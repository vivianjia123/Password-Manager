(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 63 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 62 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 129 0 0][@name:Default_Priority] [@model_trace:15099] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 63 63 >
 
 val constant first 
   : int
  ensures { result =  (63 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 2 0 0][@model_trace:102176] [@name:Max_MyString_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13b" defined at mystring.ads:38 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13b =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13b__ref =
  { mutable t13b__content : t13b }
 
 function t13b__ref_t13b__content__projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref_t13b__content__projection
 
 meta "inline:no" function t13b__ref_t13b__content__projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13b" defined at mystring.ads:38 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b__rep
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__mystring__T13b.t13b) : int =
  (Main__lines__mystring__T13b.t13b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__mystring__T13b.t13b, 
 predicate in_range = Main__lines__mystring__T13b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__TmystringstrD1.tmystringstrD1) : int =
  (Main__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Main__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Main__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at main.adb:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__mystringstr as Main__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__main__lines__mystring__length [@model_trace:.102085] [@name:Length] : Main__lines__mystring__T13b.t13b; rec__main__lines__mystring__str [@model_trace:.102100] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__main__lines__mystring__length__projection [@model_trace:.102085] [@name:Length] 
   (a : __split_fields) : Main__lines__mystring__T13b.t13b =
  a.rec__main__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
 
 function __split_fields_rec__main__lines__mystring__str__projection [@model_trace:.102100] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__main__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate main__lines__mystring__length__pred 
   (a : __rep) =
  true
 val main__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__length__pred (a : __rep) }
 
 val rec__main__lines__mystring__length_ 
   (a : __rep) : Main__lines__mystring__T13b.t13b
  requires {  (main__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__length) }
 
 predicate main__lines__mystring__str__pred 
   (a : __rep) =
  true
 val main__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__str__pred (a : __rep) }
 
 val rec__main__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (main__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Main__lines__mystring__T13b__rep.to_rep a.__split_fields.rec__main__lines__mystring__length) = (Main__lines__mystring__T13b__rep.to_rep b.__split_fields.rec__main__lines__mystring__length)) /\ (Main__lines__mystringstr.bool_eq a.__split_fields.rec__main__lines__mystring__str b.__split_fields.rec__main__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
 use export Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant main__lines__mystring__length__first__bit 
   : int

 
 val constant main__lines__mystring__length__last__bit 
   : int

 
 val constant main__lines__mystring__length__position 
   : int

 
 axiom main__lines__mystring__length__first__bit_axiom :
  ((main__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__length__last__bit_axiom :
  ((main__lines__mystring__length__last__bit ) > (main__lines__mystring__length__first__bit ))
 
 axiom main__lines__mystring__length__position_axiom :
  ((main__lines__mystring__length__position ) >= (0 : int))
 
 val constant main__lines__mystring__str__first__bit 
   : int

 
 val constant main__lines__mystring__str__last__bit 
   : int

 
 val constant main__lines__mystring__str__position 
   : int

 
 axiom main__lines__mystring__str__first__bit_axiom :
  ((main__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__str__last__bit_axiom :
  ((main__lines__mystring__str__last__bit ) > (main__lines__mystring__str__first__bit ))
 
 axiom main__lines__mystring__str__position_axiom :
  ((main__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:8 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 8 0 0][@model_projected] [@model_trace:101784] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:8 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:23 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 23 0 0][@model_projected] [@name:M] [@model_trace:101935] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function length 
   (m : Main__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (m : Main__lines__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:8 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_157 : Standard__string.string) (m : Main__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:12 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 12 0 0][@model_trace:101818] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:12 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:12 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_158 : Main__lines__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:16 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 16 0 0][@model_projected] [@model_trace:101837] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:16 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:16 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 16 0 0][@model_trace:101846] [@model_projected] [@name:M2] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:16 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:16 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_159 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:18 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 18 0 0][@model_projected] [@model_trace:101901] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:18 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:18 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 18 0 0][@model_trace:101910] [@model_projected] [@name:M2] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:18 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10b" defined at mystring.ads:21 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L9b__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:30 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 30 0 0][@model_trace:102021] [@model_projected] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:30 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:30 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 30 0 0][@model_trace:102030] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:30 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:30 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function get 
   (m : Main__lines__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_160 : int) (m : Main__lines__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:18 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_161 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 26 0 0][@model_projected] [@name:M] [@model_trace:101977] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 26 0 0][@name:From] [@model_trace:101986] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 26 0 0][@model_trace:101995] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_162 : Main__lines__mystring.mystring) (m : Main__lines__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T49b" defined at mystring.adb:8 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t49b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t49b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t49b__ref =
  { mutable t49b__content : t49b }
 
 function t49b__ref_t49b__content__projection 
   (a : t49b__ref) : t49b =
  a.t49b__content
 
 meta "model_projection" function t49b__ref_t49b__content__projection
 
 meta "inline:no" function t49b__ref_t49b__content__projection
 
 val t49b__havoc 
   (x : t49b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T50b" defined at mystring.adb:8 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T50b
 use export Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t50b =
  tmystringstrB
 
 type t50b__ref =
  { mutable t50b__content : t50b }
 
 function t50b__ref_t50b__content__projection 
   (a : t50b__ref) : t50b =
  a.t50b__content
 
 meta "model_projection" function t50b__ref_t50b__content__projection
 
 meta "inline:no" function t50b__ref_t50b__content__projection
 
 val t50b__havoc 
   (x : t50b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS52bP1" defined at mystring.adb:12 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__TS52bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS52bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS52bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS52bP1__ref =
  { mutable tS52bP1__content : tS52bP1 }
 
 function tS52bP1__ref_tS52bP1__content__projection 
   (a : tS52bP1__ref) : tS52bP1 =
  a.tS52bP1__content
 
 meta "model_projection" function tS52bP1__ref_tS52bP1__content__projection
 
 meta "inline:no" function tS52bP1__ref_tS52bP1__content__projection
 
 val tS52bP1__havoc 
   (x : tS52bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S52b" defined at mystring.adb:12 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__S52b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s52b =
  string
 
 type s52b__ref =
  { mutable s52b__content : s52b }
 
 function s52b__ref_s52b__content__projection 
   (a : s52b__ref) : s52b =
  a.s52b__content
 
 meta "model_projection" function s52b__ref_s52b__content__projection
 
 meta "inline:no" function s52b__ref_s52b__content__projection
 
 val s52b__havoc 
   (x : s52b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T53b" defined at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T53b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t53b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t53b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t53b__ref =
  { mutable t53b__content : t53b }
 
 function t53b__ref_t53b__content__projection 
   (a : t53b__ref) : t53b =
  a.t53b__content
 
 meta "model_projection" function t53b__ref_t53b__content__projection
 
 meta "inline:no" function t53b__ref_t53b__content__projection
 
 val t53b__havoc 
   (x : t53b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T53b" defined at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T53b__rep
 use        Main__lines__from_string__T53b as Main__lines__from_string__T53b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__from_string__T53b.t53b) : int =
  (Main__lines__from_string__T53b.t53b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__from_string__T53b.t53b, 
 predicate in_range = Main__lines__from_string__T53b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T54b" defined at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T54b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T55b" defined at mystring.adb:20 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__L_1__T55b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t55b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t55b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t55b__ref =
  { mutable t55b__content : t55b }
 
 function t55b__ref_t55b__content__projection 
   (a : t55b__ref) : t55b =
  a.t55b__content
 
 meta "model_projection" function t55b__ref_t55b__content__projection
 
 meta "inline:no" function t55b__ref_t55b__content__projection
 
 val t55b__havoc 
   (x : t55b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T66b" defined at mystring.adb:60 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L65b__T66b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t66b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t66b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t66b__ref =
  { mutable t66b__content : t66b }
 
 function t66b__ref_t66b__content__projection 
   (a : t66b__ref) : t66b =
  a.t66b__content
 
 meta "model_projection" function t66b__ref_t66b__content__projection
 
 meta "inline:no" function t66b__ref_t66b__content__projection
 
 val t66b__havoc 
   (x : t66b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T64b" defined at mystring.adb:60 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L63b__T64b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t64b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t64b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t64b__ref =
  { mutable t64b__content : t64b }
 
 function t64b__ref_t64b__content__projection 
   (a : t64b__ref) : t64b =
  a.t64b__content
 
 meta "model_projection" function t64b__ref_t64b__content__projection
 
 meta "inline:no" function t64b__ref_t64b__content__projection
 
 val t64b__havoc 
   (x : t64b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T69b" defined at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T69b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t69b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t69b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t69b__ref =
  { mutable t69b__content : t69b }
 
 function t69b__ref_t69b__content__projection 
   (a : t69b__ref) : t69b =
  a.t69b__content
 
 meta "model_projection" function t69b__ref_t69b__content__projection
 
 meta "inline:no" function t69b__ref_t69b__content__projection
 
 val t69b__havoc 
   (x : t69b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T69b" defined at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T69b__rep
 use        Main__lines__substring__T69b as Main__lines__substring__T69b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__substring__T69b.t69b) : int =
  (Main__lines__substring__T69b.t69b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__substring__T69b.t69b, 
 predicate in_range = Main__lines__substring__T69b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T70b" defined at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T70b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T71b" defined at mystring.adb:75 instantiated at main.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__L_4__T71b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t71b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t71b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t71b__ref =
  { mutable t71b__content : t71b }
 
 function t71b__ref_t71b__content__projection 
   (a : t71b__ref) : t71b =
  a.t71b__content
 
 meta "model_projection" function t71b__ref_t71b__content__projection
 
 meta "inline:no" function t71b__ref_t71b__content__projection
 
 val t71b__havoc 
   (x : t71b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "database" defined at passworddatabase.ads:18, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "database" defined at passworddatabase.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__database
 use export Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "information" defined at passwordmanager.ads:92, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passwordmanager__information__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pin__pin as Pin__pin
 use        Pin__pin__rep as Pin__pin__rep
 use        Passworddatabase__database as Passworddatabase__database

 type __split_fields =
  { rec__passwordmanager__information__is_locked [@model_trace:.30246] [@name:Is_Locked] : bool; rec__passwordmanager__information__master_pin [@name:Master_Pin] [@model_trace:.30256] : Pin__pin.pin; rec__passwordmanager__information__master_database [@name:Master_Database] [@model_trace:.30268] : Passworddatabase__database.database }
 
 function __split_fields_rec__passwordmanager__information__is_locked__projection [@model_trace:.30246] [@name:Is_Locked] 
   (a : __split_fields) : bool =
  a.rec__passwordmanager__information__is_locked
 
 meta "model_projection" function __split_fields_rec__passwordmanager__information__is_locked__projection
 
 meta "inline:no" function __split_fields_rec__passwordmanager__information__is_locked__projection
 
 function __split_fields_rec__passwordmanager__information__master_pin__projection [@name:Master_Pin] [@model_trace:.30256] 
   (a : __split_fields) : Pin__pin.pin =
  a.rec__passwordmanager__information__master_pin
 
 meta "model_projection" function __split_fields_rec__passwordmanager__information__master_pin__projection
 
 meta "inline:no" function __split_fields_rec__passwordmanager__information__master_pin__projection
 
 function __split_fields_rec__passwordmanager__information__master_database__projection [@name:Master_Database] [@model_trace:.30268] 
   (a : __split_fields) : Passworddatabase__database.database =
  a.rec__passwordmanager__information__master_database
 
 meta "model_projection" function __split_fields_rec__passwordmanager__information__master_database__projection
 
 meta "inline:no" function __split_fields_rec__passwordmanager__information__master_database__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passwordmanager__information__is_locked__pred 
   (a : __rep) =
  true
 val passwordmanager__information__is_locked__pred 
   (a : __rep) : bool
  ensures { result <-> passwordmanager__information__is_locked__pred (a : __rep) }
 
 val rec__passwordmanager__information__is_locked_ 
   (a : __rep) : bool
  requires {  (passwordmanager__information__is_locked__pred a) }
  ensures {  (result = a.__split_fields.rec__passwordmanager__information__is_locked) }
 
 predicate passwordmanager__information__master_pin__pred 
   (a : __rep) =
  true
 val passwordmanager__information__master_pin__pred 
   (a : __rep) : bool
  ensures { result <-> passwordmanager__information__master_pin__pred (a : __rep) }
 
 val rec__passwordmanager__information__master_pin_ 
   (a : __rep) : Pin__pin.pin
  requires {  (passwordmanager__information__master_pin__pred a) }
  ensures {  (result = a.__split_fields.rec__passwordmanager__information__master_pin) }
 
 predicate passwordmanager__information__master_database__pred 
   (a : __rep) =
  true
 val passwordmanager__information__master_database__pred 
   (a : __rep) : bool
  ensures { result <-> passwordmanager__information__master_database__pred (a : __rep) }
 
 val rec__passwordmanager__information__master_database_ 
   (a : __rep) : Passworddatabase__database.database
  requires {  (passwordmanager__information__master_database__pred a) }
  ensures {  (result = a.__split_fields.rec__passwordmanager__information__master_database) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( (a.__split_fields.rec__passwordmanager__information__is_locked = b.__split_fields.rec__passwordmanager__information__is_locked) /\ ((Pin__pin__rep.to_rep a.__split_fields.rec__passwordmanager__information__master_pin) = (Pin__pin__rep.to_rep b.__split_fields.rec__passwordmanager__information__master_pin)) )/\(Passworddatabase__database.bool_eq a.__split_fields.rec__passwordmanager__information__master_database b.__split_fields.rec__passwordmanager__information__master_database) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "information" defined at passwordmanager.ads:92, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__information
 use export Passwordmanager__information__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type information =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passwordmanager__information__is_locked__first__bit 
   : int

 
 val constant passwordmanager__information__is_locked__last__bit 
   : int

 
 val constant passwordmanager__information__is_locked__position 
   : int

 
 axiom passwordmanager__information__is_locked__first__bit_axiom :
  ((passwordmanager__information__is_locked__first__bit ) >= (0 : int))
 
 axiom passwordmanager__information__is_locked__last__bit_axiom :
  ((passwordmanager__information__is_locked__last__bit ) > (passwordmanager__information__is_locked__first__bit ))
 
 axiom passwordmanager__information__is_locked__position_axiom :
  ((passwordmanager__information__is_locked__position ) >= (0 : int))
 
 val constant passwordmanager__information__master_pin__first__bit 
   : int

 
 val constant passwordmanager__information__master_pin__last__bit 
   : int

 
 val constant passwordmanager__information__master_pin__position 
   : int

 
 axiom passwordmanager__information__master_pin__first__bit_axiom :
  ((passwordmanager__information__master_pin__first__bit ) >= (0 : int))
 
 axiom passwordmanager__information__master_pin__last__bit_axiom :
  ((passwordmanager__information__master_pin__last__bit ) > (passwordmanager__information__master_pin__first__bit ))
 
 axiom passwordmanager__information__master_pin__position_axiom :
  ((passwordmanager__information__master_pin__position ) >= (0 : int))
 
 val constant passwordmanager__information__master_database__first__bit 
   : int

 
 val constant passwordmanager__information__master_database__last__bit 
   : int

 
 val constant passwordmanager__information__master_database__position 
   : int

 
 axiom passwordmanager__information__master_database__first__bit_axiom :
  ((passwordmanager__information__master_database__first__bit ) >= (0 : int))
 
 axiom passwordmanager__information__master_database__last__bit_axiom :
  ((passwordmanager__information__master_database__last__bit ) > (passwordmanager__information__master_database__first__bit ))
 
 axiom passwordmanager__information__master_database__position_axiom :
  ((passwordmanager__information__master_database__position ) >= (0 : int))
 
 val function user_eq 
   (a : information) (b : information) : bool
 
 val constant dummy 
   : information

 
 type information__ref =
  { mutable information__content : information }
 
 function information__ref_information__content__projection 
   (a : information__ref) : information =
  a.information__content
 
 meta "model_projection" function information__ref_information__content__projection
 
 meta "inline:no" function information__ref_information__content__projection
 
 val information__havoc 
   (x : information__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTgetdbSP1" defined at main.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Main__TTgetdbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTgetdbSP1 =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTgetdbSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTgetdbSP1__ref =
  { mutable tTgetdbSP1__content : tTgetdbSP1 }
 
 function tTgetdbSP1__ref_tTgetdbSP1__content__projection 
   (a : tTgetdbSP1__ref) : tTgetdbSP1 =
  a.tTgetdbSP1__content
 
 meta "model_projection" function tTgetdbSP1__ref_tTgetdbSP1__content__projection
 
 meta "inline:no" function tTgetdbSP1__ref_tTgetdbSP1__content__projection
 
 val tTgetdbSP1__havoc 
   (x : tTgetdbSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTgetdbSP1" defined at main.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Main__TTgetdbSP1__rep
 use        Main__TTgetdbSP1 as Main__TTgetdbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTgetdbSP1.tTgetdbSP1) : int =
  (Main__TTgetdbSP1.tTgetdbSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTgetdbSP1.tTgetdbSP1, 
 predicate in_range = Main__TTgetdbSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TgetdbS" defined at main.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Main__TgetdbS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T16b" defined at main.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Main__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "getdb" defined at main.adb:18, created in Gnat2Why.Decls.Translate_Constant *)
module Main__getdb
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant getdb [#"main.adb" 18 0 0][@name:GETDB] [@model_projected] [@model_trace:2388] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TTremdbSP1" defined at main.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Main__TTremdbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTremdbSP1 =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTremdbSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTremdbSP1__ref =
  { mutable tTremdbSP1__content : tTremdbSP1 }
 
 function tTremdbSP1__ref_tTremdbSP1__content__projection 
   (a : tTremdbSP1__ref) : tTremdbSP1 =
  a.tTremdbSP1__content
 
 meta "model_projection" function tTremdbSP1__ref_tTremdbSP1__content__projection
 
 meta "inline:no" function tTremdbSP1__ref_tTremdbSP1__content__projection
 
 val tTremdbSP1__havoc 
   (x : tTremdbSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTremdbSP1" defined at main.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Main__TTremdbSP1__rep
 use        Main__TTremdbSP1 as Main__TTremdbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTremdbSP1.tTremdbSP1) : int =
  (Main__TTremdbSP1.tTremdbSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTremdbSP1.tTremdbSP1, 
 predicate in_range = Main__TTremdbSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TremdbS" defined at main.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Main__TremdbS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at main.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Main__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "remdb" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Constant *)
module Main__remdb
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant remdb [#"main.adb" 19 0 0][@model_trace:2398] [@model_projected] [@name:REMDB] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TTputdbSP1" defined at main.adb:20, created in Gnat2Why.Types.Translate_Type *)
module Main__TTputdbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTputdbSP1 =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTputdbSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTputdbSP1__ref =
  { mutable tTputdbSP1__content : tTputdbSP1 }
 
 function tTputdbSP1__ref_tTputdbSP1__content__projection 
   (a : tTputdbSP1__ref) : tTputdbSP1 =
  a.tTputdbSP1__content
 
 meta "model_projection" function tTputdbSP1__ref_tTputdbSP1__content__projection
 
 meta "inline:no" function tTputdbSP1__ref_tTputdbSP1__content__projection
 
 val tTputdbSP1__havoc 
   (x : tTputdbSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTputdbSP1" defined at main.adb:20, created in Gnat2Why.Types.Translate_Type *)
module Main__TTputdbSP1__rep
 use        Main__TTputdbSP1 as Main__TTputdbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTputdbSP1.tTputdbSP1) : int =
  (Main__TTputdbSP1.tTputdbSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTputdbSP1.tTputdbSP1, 
 predicate in_range = Main__TTputdbSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TputdbS" defined at main.adb:20, created in Gnat2Why.Types.Translate_Type *)
module Main__TputdbS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T18b" defined at main.adb:20, created in Gnat2Why.Types.Translate_Type *)
module Main__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "putdb" defined at main.adb:20, created in Gnat2Why.Decls.Translate_Constant *)
module Main__putdb
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant putdb [#"main.adb" 20 0 0][@name:PUTDB] [@model_trace:2408] [@model_projected] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TTunlockSP1" defined at main.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Main__TTunlockSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTunlockSP1 =
  < range 1 6 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTunlockSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTunlockSP1__ref =
  { mutable tTunlockSP1__content : tTunlockSP1 }
 
 function tTunlockSP1__ref_tTunlockSP1__content__projection 
   (a : tTunlockSP1__ref) : tTunlockSP1 =
  a.tTunlockSP1__content
 
 meta "model_projection" function tTunlockSP1__ref_tTunlockSP1__content__projection
 
 meta "inline:no" function tTunlockSP1__ref_tTunlockSP1__content__projection
 
 val tTunlockSP1__havoc 
   (x : tTunlockSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTunlockSP1" defined at main.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Main__TTunlockSP1__rep
 use        Main__TTunlockSP1 as Main__TTunlockSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTunlockSP1.tTunlockSP1) : int =
  (Main__TTunlockSP1.tTunlockSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTunlockSP1.tTunlockSP1, 
 predicate in_range = Main__TTunlockSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TunlockS" defined at main.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Main__TunlockS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T19b" defined at main.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Main__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "unlock" defined at main.adb:21, created in Gnat2Why.Decls.Translate_Constant *)
module Main__unlock
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant unlock [#"main.adb" 21 0 0][@model_trace:2418] [@model_projected] [@name:UNLOCK] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TTlockSP1" defined at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__TTlockSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTlockSP1 =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTlockSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTlockSP1__ref =
  { mutable tTlockSP1__content : tTlockSP1 }
 
 function tTlockSP1__ref_tTlockSP1__content__projection 
   (a : tTlockSP1__ref) : tTlockSP1 =
  a.tTlockSP1__content
 
 meta "model_projection" function tTlockSP1__ref_tTlockSP1__content__projection
 
 meta "inline:no" function tTlockSP1__ref_tTlockSP1__content__projection
 
 val tTlockSP1__havoc 
   (x : tTlockSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTlockSP1" defined at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__TTlockSP1__rep
 use        Main__TTlockSP1 as Main__TTlockSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTlockSP1.tTlockSP1) : int =
  (Main__TTlockSP1.tTlockSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTlockSP1.tTlockSP1, 
 predicate in_range = Main__TTlockSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TlockS" defined at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__TlockS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "lock" defined at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lock
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant lock [#"main.adb" 22 0 0][@model_projected] [@name:LOCK] [@model_trace:2428] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@name:Start] [@model_trace:.16345] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@model_trace:.16355] [@name:Length] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@name:Start] [@model_trace:.16345] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@model_trace:.16355] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_168   : int.
   (if (( (a__first <= temp___idx_168) /\ (temp___idx_168 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_168) (get b ((b__first - a__first) + temp___idx_168)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_168   : int.
    (if (( (a__first <= temp___idx_168) /\ (temp___idx_168 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_168) (get b ((b__first - a__first) + temp___idx_168)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTtokenslistSP1" defined at main.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtokenslistSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTtokenslistSP1 =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTtokenslistSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTtokenslistSP1__ref =
  { mutable tTtokenslistSP1__content : tTtokenslistSP1 }
 
 function tTtokenslistSP1__ref_tTtokenslistSP1__content__projection 
   (a : tTtokenslistSP1__ref) : tTtokenslistSP1 =
  a.tTtokenslistSP1__content
 
 meta "model_projection" function tTtokenslistSP1__ref_tTtokenslistSP1__content__projection
 
 meta "inline:no" function tTtokenslistSP1__ref_tTtokenslistSP1__content__projection
 
 val tTtokenslistSP1__havoc 
   (x : tTtokenslistSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTtokenslistSP1" defined at main.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtokenslistSP1__rep
 use        Main__TTtokenslistSP1 as Main__TTtokenslistSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTtokenslistSP1.tTtokenslistSP1) : int =
  (Main__TTtokenslistSP1.tTtokenslistSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTtokenslistSP1.tTtokenslistSP1, 
 predicate in_range = Main__TTtokenslistSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtokenslistS" defined at main.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Main__TtokenslistS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T21b" defined at main.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Main__T21b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t21b =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t21b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t21b__ref =
  { mutable t21b__content : t21b }
 
 function t21b__ref_t21b__content__projection 
   (a : t21b__ref) : t21b =
  a.t21b__content
 
 meta "model_projection" function t21b__ref_t21b__content__projection
 
 meta "inline:no" function t21b__ref_t21b__content__projection
 
 val t21b__havoc 
   (x : t21b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T21b" defined at main.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Main__T21b__rep
 use        Main__T21b as Main__T21b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__T21b.t21b) : int =
  (Main__T21b.t21b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__T21b.t21b, 
 predicate in_range = Main__T21b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T22b" defined at main.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Main__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function argument_count 
   (__void_param : unit) : int
 
 val predicate argument_count__function_guard 
   (temp___result_169 : int) (__void_param : unit)

end

(* Module for defining the constant "number" defined at mycommandline.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Mycommandline__argument__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"mycommandline.ads" 7 0 0][@name:Number] [@model_trace:16291] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at mycommandline.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mycommandline__argument__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function argument 
   (number : int) : Standard__string.string
 
 val predicate argument__function_guard 
   (temp___result_170 : Standard__string.string) (number : int)

end

(* Module for axiomatizing type "T24b" defined at main.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__L23b__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t24b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t24b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24b__ref =
  { mutable t24b__content : t24b }
 
 function t24b__ref_t24b__content__projection 
   (a : t24b__ref) : t24b =
  a.t24b__content
 
 meta "model_projection" function t24b__ref_t24b__content__projection
 
 meta "inline:no" function t24b__ref_t24b__content__projection
 
 val t24b__havoc 
   (x : t24b__ref) : unit
  writes {x}

end

(* Module for defining the constant "pin_input" defined at passwordmanager.ads:23, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__init__pin_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pin_input [#"passwordmanager.ads" 23 0 0][@model_trace:29754] [@model_projected] [@name:Pin_Input] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pin_input" defined at passwordmanager.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__init__pin_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10s" defined at passwordmanager.ads:26, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__init__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T25b" defined at main.adb:39, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_projected] [@model_trace:22771] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T27b" defined at main.adb:45, created in Gnat2Why.Types.Translate_Type *)
module Main__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "manager_information" defined at passwordmanager.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__lock_status__manager_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val constant manager_information [#"passwordmanager.ads" 30 0 0][@name:Manager_Information] [@model_projected] [@model_trace:29813] 
   : Passwordmanager__information.information

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "manager_information" defined at passwordmanager.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__lock_status__manager_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "lock_status" defined at passwordmanager.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__lock_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val function lock_status 
   (manager_information : Passwordmanager__information.information) : bool
 
 val predicate lock_status__function_guard 
   (temp___result_171 : bool) (manager_information : Passwordmanager__information.information)

end

(* Module for axiomatizing type "T29b" defined at main.adb:53, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_trace:22459] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T30b" defined at main.adb:55, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T30b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Mystringtokeniser__tokenise__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystringtokeniser.ads" 16 0 0][@model_projected] [@model_trace:16428] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7s" defined at mystringtokeniser.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenise__L6s__T7s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t7s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t7s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7s__ref =
  { mutable t7s__content : t7s }
 
 function t7s__ref_t7s__content__projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref_t7s__content__projection
 
 meta "inline:no" function t7s__ref_t7s__content__projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for defining the constant "max_line_length" defined at utility.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__max_line_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_line_length [#"utility.ads" 9 0 0][@name:Max_Line_Length] [@model_trace:30408] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T31b" defined at main.adb:66, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-chahan.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__handling__to_lower__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-chahan.ads" 70 0 0][@name:Item] [@model_projected] [@model_trace:29224] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-chahan.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__characters__handling__to_lower__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_lower__2" defined at a-chahan.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__characters__handling__to_lower__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function to_lower__2 
   (item : Standard__string.string) : Standard__string.string
 
 val predicate to_lower__2__function_guard 
   (temp___result_172 : Standard__string.string) (item : Standard__string.string)

end

(* Module for defining the constant "get_rem_pin_length" defined at utility.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__get_rem_pin_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant get_rem_pin_length [#"utility.ads" 11 0 0][@model_trace:30428] [@name:Get_Rem_Pin_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_url_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_url_length [#"passworddatabase.ads" 9 0 0][@name:Max_URL_Length] [@model_trace:3233] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t28s =
  < range 0 1024 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t28s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t28s__ref =
  { mutable t28s__content : t28s }
 
 function t28s__ref_t28s__content__projection 
   (a : t28s__ref) : t28s =
  a.t28s__content
 
 meta "model_projection" function t28s__ref_t28s__content__projection
 
 meta "inline:no" function t28s__ref_t28s__content__projection
 
 val t28s__havoc 
   (x : t28s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__mystring__T28s.t28s) : int =
  (Passworddatabase__urls__mystring__T28s.t28s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__mystring__T28s.t28s, 
 predicate in_range = Passworddatabase__urls__mystring__T28s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__2__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__TmystringstrD1.tmystringstrD1) : int =
  (Passworddatabase__urls__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Passworddatabase__urls__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Passworddatabase__urls__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__2__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystringstr as Passworddatabase__urls__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__passworddatabase__urls__mystring__length [@model_trace:.68671] [@name:Length] : Passworddatabase__urls__mystring__T28s.t28s; rec__passworddatabase__urls__mystring__str [@model_trace:.68686] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__passworddatabase__urls__mystring__length__projection [@model_trace:.68671] [@name:Length] 
   (a : __split_fields) : Passworddatabase__urls__mystring__T28s.t28s =
  a.rec__passworddatabase__urls__mystring__length
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 function __split_fields_rec__passworddatabase__urls__mystring__str__projection [@model_trace:.68686] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__passworddatabase__urls__mystring__str
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__4__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__4__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__4__projection
 
 meta "inline:no" function __rep___split_fields__4__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passworddatabase__urls__mystring__length__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__length__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__length_ 
   (a : __rep) : Passworddatabase__urls__mystring__T28s.t28s
  requires {  (passworddatabase__urls__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__length) }
 
 predicate passworddatabase__urls__mystring__str__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__str__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (passworddatabase__urls__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Passworddatabase__urls__mystring__T28s__rep.to_rep a.__split_fields.rec__passworddatabase__urls__mystring__length) = (Passworddatabase__urls__mystring__T28s__rep.to_rep b.__split_fields.rec__passworddatabase__urls__mystring__length)) /\ (Passworddatabase__urls__mystringstr.bool_eq a.__split_fields.rec__passworddatabase__urls__mystring__str b.__split_fields.rec__passworddatabase__urls__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__2__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__2__projection
 
 meta "inline:no" function mystring__ref_mystring__content__2__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "url" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__url
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type url =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : url) (b : url) : bool
 
 val constant dummy 
   : url

 
 type url__ref =
  { mutable url__content : url }
 
 function url__ref_url__content__projection 
   (a : url__ref) : url =
  a.url__content
 
 meta "model_projection" function url__ref_url__content__projection
 
 meta "inline:no" function url__ref_url__content__projection
 
 val url__havoc 
   (x : url__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at passworddatabase.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__from_string__2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"passworddatabase.ads" 35 0 0][@model_projected] [@model_trace:3517] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at passworddatabase.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__from_string__2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string__2" defined at passworddatabase.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__from_string__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url

 val function from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
 
 val predicate from_string__2__function_guard 
   (temp___result_173 : Passworddatabase__url.url) (s : Standard__string.string)

end

(* Module for defining the constant "manager_information" defined at passwordmanager.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__execute_get_command__manager_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val constant manager_information [#"passwordmanager.ads" 55 0 0][@name:Manager_Information] [@model_projected] [@model_trace:29994] 
   : Passwordmanager__information.information

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "manager_information" defined at passwordmanager.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_get_command__manager_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "input_url" defined at passwordmanager.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__execute_get_command__input_url
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant input_url [#"passwordmanager.ads" 56 0 0][@model_projected] [@name:Input_Url] [@model_trace:30003] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input_url" defined at passwordmanager.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_get_command__input_url___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T33b" defined at main.adb:92, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "put_length" defined at utility.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__put_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant put_length [#"utility.ads" 10 0 0][@model_trace:30418] [@name:Put_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_password_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_password_length [#"passworddatabase.ads" 8 0 0][@model_trace:3223] [@name:Max_Password_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__mystring__T13s.t13s) : int =
  (Passworddatabase__passwords__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__mystring__T13s.t13s, 
 predicate in_range = Passworddatabase__passwords__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 100 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__3__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__3__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__3__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrD1__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__TmystringstrD1.tmystringstrD1) : int =
  (Passworddatabase__passwords__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Passworddatabase__passwords__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Passworddatabase__passwords__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__3__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__3__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__3__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__mystringstr as Passworddatabase__passwords__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__passworddatabase__passwords__mystring__length [@model_trace:.67789] [@name:Length] : Passworddatabase__passwords__mystring__T13s.t13s; rec__passworddatabase__passwords__mystring__str [@name:Str] [@model_trace:.67804] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__passworddatabase__passwords__mystring__length__projection [@model_trace:.67789] [@name:Length] 
   (a : __split_fields) : Passworddatabase__passwords__mystring__T13s.t13s =
  a.rec__passworddatabase__passwords__mystring__length
 
 meta "model_projection" function __split_fields_rec__passworddatabase__passwords__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__passwords__mystring__length__projection
 
 function __split_fields_rec__passworddatabase__passwords__mystring__str__projection [@name:Str] [@model_trace:.67804] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__passworddatabase__passwords__mystring__str
 
 meta "model_projection" function __split_fields_rec__passworddatabase__passwords__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__passwords__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__5__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__5__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__5__projection
 
 meta "inline:no" function __rep___split_fields__5__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passworddatabase__passwords__mystring__length__pred 
   (a : __rep) =
  true
 val passworddatabase__passwords__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__passwords__mystring__length__pred (a : __rep) }
 
 val rec__passworddatabase__passwords__mystring__length_ 
   (a : __rep) : Passworddatabase__passwords__mystring__T13s.t13s
  requires {  (passworddatabase__passwords__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__passwords__mystring__length) }
 
 predicate passworddatabase__passwords__mystring__str__pred 
   (a : __rep) =
  true
 val passworddatabase__passwords__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__passwords__mystring__str__pred (a : __rep) }
 
 val rec__passworddatabase__passwords__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (passworddatabase__passwords__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__passwords__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Passworddatabase__passwords__mystring__T13s__rep.to_rep a.__split_fields.rec__passworddatabase__passwords__mystring__length) = (Passworddatabase__passwords__mystring__T13s__rep.to_rep b.__split_fields.rec__passworddatabase__passwords__mystring__length)) /\ (Passworddatabase__passwords__mystringstr.bool_eq a.__split_fields.rec__passworddatabase__passwords__mystring__str b.__split_fields.rec__passworddatabase__passwords__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring
 use export Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__position 
   : int

 
 axiom passworddatabase__passwords__mystring__length__first__bit_axiom :
  ((passworddatabase__passwords__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__length__last__bit_axiom :
  ((passworddatabase__passwords__mystring__length__last__bit ) > (passworddatabase__passwords__mystring__length__first__bit ))
 
 axiom passworddatabase__passwords__mystring__length__position_axiom :
  ((passworddatabase__passwords__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__position 
   : int

 
 axiom passworddatabase__passwords__mystring__str__first__bit_axiom :
  ((passworddatabase__passwords__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__str__last__bit_axiom :
  ((passworddatabase__passwords__mystring__str__last__bit ) > (passworddatabase__passwords__mystring__str__first__bit ))
 
 axiom passworddatabase__passwords__mystring__str__position_axiom :
  ((passworddatabase__passwords__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__3__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__3__projection
 
 meta "inline:no" function mystring__ref_mystring__content__3__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "password" defined at passworddatabase.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__password
 use export Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type password =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__position 
   : int

 
 axiom passworddatabase__passwords__mystring__length__first__bit_axiom :
  ((passworddatabase__passwords__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__length__last__bit_axiom :
  ((passworddatabase__passwords__mystring__length__last__bit ) > (passworddatabase__passwords__mystring__length__first__bit ))
 
 axiom passworddatabase__passwords__mystring__length__position_axiom :
  ((passworddatabase__passwords__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__position 
   : int

 
 axiom passworddatabase__passwords__mystring__str__first__bit_axiom :
  ((passworddatabase__passwords__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__str__last__bit_axiom :
  ((passworddatabase__passwords__mystring__str__last__bit ) > (passworddatabase__passwords__mystring__str__first__bit ))
 
 axiom passworddatabase__passwords__mystring__str__position_axiom :
  ((passworddatabase__passwords__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : password) (b : password) : bool
 
 val constant dummy 
   : password

 
 type password__ref =
  { mutable password__content : password }
 
 function password__ref_password__content__projection 
   (a : password__ref) : password =
  a.password__content
 
 meta "model_projection" function password__ref_password__content__projection
 
 meta "inline:no" function password__ref_password__content__projection
 
 val password__havoc 
   (x : password__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at passworddatabase.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"passworddatabase.ads" 33 0 0][@model_projected] [@model_trace:3489] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at passworddatabase.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password

 val function from_string 
   (s : Standard__string.string) : Passworddatabase__password.password
 
 val predicate from_string__function_guard 
   (temp___result_174 : Passworddatabase__password.password) (s : Standard__string.string)

end

(* Module for defining the constant "input_url" defined at passwordmanager.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__execute_put_command__input_url
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant input_url [#"passwordmanager.ads" 67 0 0][@model_trace:30079] [@model_projected] [@name:Input_Url] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input_url" defined at passwordmanager.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_put_command__input_url___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "input_pwd" defined at passwordmanager.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__execute_put_command__input_pwd
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val constant input_pwd [#"passwordmanager.ads" 68 0 0][@model_trace:30090] [@model_projected] [@name:Input_Pwd] 
   : Passworddatabase__password.password

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input_pwd" defined at passwordmanager.ads:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_put_command__input_pwd___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T35b" defined at main.adb:119, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_5__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "input_url" defined at passwordmanager.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__execute_rem_command__input_url
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant input_url [#"passwordmanager.ads" 80 0 0][@model_projected] [@model_trace:30176] [@name:Input_Url] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input_url" defined at passwordmanager.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_rem_command__input_url___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T37b" defined at main.adb:138, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_6__T37b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T40b" defined at main.adb:154, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_7__L39b__T40b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t40b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t40b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t40b__ref =
  { mutable t40b__content : t40b }
 
 function t40b__ref_t40b__content__projection 
   (a : t40b__ref) : t40b =
  a.t40b__content
 
 meta "model_projection" function t40b__ref_t40b__content__projection
 
 meta "inline:no" function t40b__ref_t40b__content__projection
 
 val t40b__havoc 
   (x : t40b__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 5 0 0][@model_projected] [@model_trace:19383] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_175 : int) (s : Standard__string.string)

end

(* Module for defining the constant "pin_input" defined at passwordmanager.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__execute_unlock__pin_input
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant pin_input [#"passwordmanager.ads" 34 0 0][@name:Pin_Input] [@model_trace:29841] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pin_input" defined at passwordmanager.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_unlock__pin_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T41b" defined at main.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_7__T41b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T44b" defined at main.adb:175, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_8__L43b__T44b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t44b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t44b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t44b__ref =
  { mutable t44b__content : t44b }
 
 function t44b__ref_t44b__content__projection 
   (a : t44b__ref) : t44b =
  a.t44b__content
 
 meta "model_projection" function t44b__ref_t44b__content__projection
 
 meta "inline:no" function t44b__ref_t44b__content__projection
 
 val t44b__havoc 
   (x : t44b__ref) : unit
  writes {x}

end

(* Module for defining the constant "pin_input" defined at passwordmanager.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__execute_lock__pin_input
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant pin_input [#"passwordmanager.ads" 45 0 0][@name:Pin_Input] [@model_trace:29922] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pin_input" defined at passwordmanager.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_lock__pin_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T45b" defined at main.adb:182, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_8__T45b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T47b" defined at main.adb:190, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T47b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:33 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.ads" 33 0 0][@model_projected] [@name:M] [@model_trace:102049]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:33 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:130656] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:130656'First] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 6 0 0][@model_projected] [@name:Result] [@model_trace:130656'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.adb" 13 0 0][@model_trace:130711] [@model_projected] [@name:M]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 14 0 0][@model_projected] [@name:J] [@model_trace:130730]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 20 0 0][@model_trace:130807] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 29 0 0][@model_trace:130874] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:53 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 53 0 0][@model_trace:131051] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:53 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val r__split_fields [#"mystring.adb" 72 0 0][@model_trace:131251] [@model_projected] [@name:R]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 73 0 0][@model_projected] [@name:J] [@model_trace:131274]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 75 0 0][@model_projected] [@name:I] [@model_trace:131340]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:22581]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:22581'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:22581'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_trace:22590] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at main.adb:16, created in Gnat2Why.Decls.Translate_Variable *)
module Main__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val s__split_fields [#"main.adb" 16 0 0][@model_trace:2366] [@model_projected] [@name:S]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at main.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pm_information" defined at main.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Main__pm_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val pm_information__split_fields [#"main.adb" 17 0 0][@model_projected] [@name:PM_Information] [@model_trace:2377]  : Passwordmanager__information.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pm_information" defined at main.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokenslist" defined at main.adb:23, created in Gnat2Why.Decls.Translate_Variable *)
module Main__tokenslist
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenslist [#"main.adb" 23 0 0][@name:TokensList] [@model_projected] [@model_trace:2438]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokenslist" defined at main.adb:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__tokenslist___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:24, created in Gnat2Why.Decls.Translate_Variable *)
module Main__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"main.adb" 24 0 0][@model_projected] [@name:NumTokens] [@model_trace:2464]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "temp_pin" defined at main.adb:30, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__temp_pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val temp_pin [#"main.adb" 30 0 0][@model_projected] [@name:Temp_Pin] [@model_trace:2483]  : Array__Int__Standard__character.map__ref 
 
 val constant temp_pin__first [#"main.adb" 30 0 0][@model_projected] [@name:Temp_Pin] [@model_trace:2483'First] 
   : Standard__integer.integer

 
 val constant temp_pin__last [#"main.adb" 30 0 0][@model_projected] [@name:Temp_Pin] [@model_trace:2483'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "temp_pin" defined at main.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__temp_pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "manager_information" defined at passwordmanager.ads:24, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__init__manager_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val manager_information__split_fields [#"passwordmanager.ads" 24 0 0][@name:Manager_Information] [@model_projected] [@model_trace:29763]  : Passwordmanager__information.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "manager_information" defined at passwordmanager.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__init__manager_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_trace:16437] [@model_projected]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_trace:16437'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant tokens__last [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_trace:16437'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"mystringtokeniser.ads" 16 0 0][@model_projected] [@name:Count] [@model_trace:16446]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "command" defined at main.adb:71, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__command
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val command [#"main.adb" 71 0 0][@model_projected] [@model_trace:2624] [@name:Command]  : Array__Int__Standard__character.map__ref 
 
 val constant command__first [#"main.adb" 71 0 0][@model_projected] [@name:Command] [@model_trace:2624'First] 
   : Standard__integer.integer

 
 val constant command__last [#"main.adb" 71 0 0][@model_trace:2624'Last] [@model_projected] [@name:Command] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "command" defined at main.adb:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__command___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokurl" defined at main.adb:81, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__tokurl
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokurl [#"main.adb" 81 0 0][@model_trace:2676] [@model_projected] [@name:TokUrl]  : Array__Int__Standard__character.map__ref 
 
 val constant tokurl__first [#"main.adb" 81 0 0][@model_projected] [@name:TokUrl] [@model_trace:2676'First] 
   : Standard__integer.integer

 
 val constant tokurl__last [#"main.adb" 81 0 0][@model_trace:2676'Last] [@model_projected] [@name:TokUrl] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokurl" defined at main.adb:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__tokurl___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokurl" defined at main.adb:102, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_5__tokurl
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokurl [#"main.adb" 102 0 0][@model_projected] [@model_trace:2749] [@name:TokUrl]  : Array__Int__Standard__character.map__ref 
 
 val constant tokurl__first [#"main.adb" 102 0 0][@model_trace:2749'First] [@model_projected] [@name:TokUrl] 
   : Standard__integer.integer

 
 val constant tokurl__last [#"main.adb" 102 0 0][@model_projected] [@model_trace:2749'Last] [@name:TokUrl] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokurl" defined at main.adb:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_5__tokurl___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokpwd" defined at main.adb:106, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_5__tokpwd
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokpwd [#"main.adb" 106 0 0][@model_trace:2785] [@model_projected] [@name:TokPwd]  : Array__Int__Standard__character.map__ref 
 
 val constant tokpwd__first [#"main.adb" 106 0 0][@model_projected] [@model_trace:2785'First] [@name:TokPwd] 
   : Standard__integer.integer

 
 val constant tokpwd__last [#"main.adb" 106 0 0][@model_trace:2785'Last] [@model_projected] [@name:TokPwd] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokpwd" defined at main.adb:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_5__tokpwd___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "manager_information" defined at passwordmanager.ads:66, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__execute_put_command__manager_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val manager_information__split_fields [#"passwordmanager.ads" 66 0 0][@name:Manager_Information] [@model_projected] [@model_trace:30070]  : Passwordmanager__information.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "manager_information" defined at passwordmanager.ads:66, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_put_command__manager_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokurl" defined at main.adb:128, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_6__tokurl
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokurl [#"main.adb" 128 0 0][@model_projected] [@name:TokUrl] [@model_trace:2871]  : Array__Int__Standard__character.map__ref 
 
 val constant tokurl__first [#"main.adb" 128 0 0][@model_trace:2871'First] [@model_projected] [@name:TokUrl] 
   : Standard__integer.integer

 
 val constant tokurl__last [#"main.adb" 128 0 0][@model_projected] [@model_trace:2871'Last] [@name:TokUrl] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokurl" defined at main.adb:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_6__tokurl___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "manager_information" defined at passwordmanager.ads:79, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__execute_rem_command__manager_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val manager_information__split_fields [#"passwordmanager.ads" 79 0 0][@name:Manager_Information] [@model_projected] [@model_trace:30167]  : Passwordmanager__information.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "manager_information" defined at passwordmanager.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_rem_command__manager_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokpin" defined at main.adb:147, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_7__tokpin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokpin [#"main.adb" 147 0 0][@model_trace:2944] [@model_projected] [@name:TokPin]  : Array__Int__Standard__character.map__ref 
 
 val constant tokpin__first [#"main.adb" 147 0 0][@model_projected] [@model_trace:2944'First] [@name:TokPin] 
   : Standard__integer.integer

 
 val constant tokpin__last [#"main.adb" 147 0 0][@model_projected] [@model_trace:2944'Last] [@name:TokPin] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokpin" defined at main.adb:147, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_7__tokpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "manager_information" defined at passwordmanager.ads:33, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__execute_unlock__manager_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val manager_information__split_fields [#"passwordmanager.ads" 33 0 0][@name:Manager_Information] [@model_trace:29832] [@model_projected]  : Passwordmanager__information.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "manager_information" defined at passwordmanager.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_unlock__manager_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokpin" defined at main.adb:169, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_8__tokpin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokpin [#"main.adb" 169 0 0][@model_projected] [@name:TokPin] [@model_trace:3038]  : Array__Int__Standard__character.map__ref 
 
 val constant tokpin__first [#"main.adb" 169 0 0][@model_projected] [@model_trace:3038'First] [@name:TokPin] 
   : Standard__integer.integer

 
 val constant tokpin__last [#"main.adb" 169 0 0][@model_projected] [@model_trace:3038'Last] [@name:TokPin] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokpin" defined at main.adb:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_8__tokpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "manager_information" defined at passwordmanager.ads:44, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__execute_lock__manager_information
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 val manager_information__split_fields [#"passwordmanager.ads" 44 0 0][@name:Manager_Information] [@model_trace:29913] [@model_projected]  : Passwordmanager__information.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "manager_information" defined at passwordmanager.ads:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__execute_lock__manager_information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "main" defined at main.adb:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:33 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:58 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:58 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at main.adb:18, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_163
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_163 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_163__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_163 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_163 __void_param) (1 : int))) = (103 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_163 __void_param) (2 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_163 __void_param) (3 : int))) = (116 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:19, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_164
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_164 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_164__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_164 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_164 __void_param) (1 : int))) = (114 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_164 __void_param) (2 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_164 __void_param) (3 : int))) = (109 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:20, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_165
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_165 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_165__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_165 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_165 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_165 __void_param) (2 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_165 __void_param) (3 : int))) = (116 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:21, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_166
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_166 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_166__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_166 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_166 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_166 __void_param) (2 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_166 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_166 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_166 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_166 __void_param) (6 : int))) = (107 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:22, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_167
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_167 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_167__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_167 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_167 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_167 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_167 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_167 __void_param) (4 : int))) = (107 : int)) ) ))

end

(* Module for possibly declaring a logic function for "init" defined at passwordmanager.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:50, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mystringtokeniser__tokenise
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "execute_get_command" defined at passwordmanager.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__execute_get_command
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "execute_put_command" defined at passwordmanager.ads:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__execute_put_command
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "execute_rem_command" defined at passwordmanager.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__execute_rem_command
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "execute_unlock" defined at passwordmanager.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__execute_unlock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "execute_lock" defined at passwordmanager.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__execute_lock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) =
  (if (( temp___is_init_176 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_180)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_181 : int) (temp___skip_top_level_182 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) =
  (if (( temp___is_init_183 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_187)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_188 : int) (temp___skip_top_level_189 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) =
  (if (( temp___is_init_190 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_194)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_195 : int) (temp___skip_top_level_196 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_195 : int) (temp___skip_top_level_196 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_195 : int) (temp___skip_top_level_196 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_201 : int) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool) =
  (if (( temp___is_init_197 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_201)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_201 : int) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_201 : int) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_202 : int) (temp___skip_top_level_203 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_202 : int) (temp___skip_top_level_203 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_202 : int) (temp___skip_top_level_203 : bool) }

end

(* Module giving axioms for type "T13b" defined at mystring.ads:38 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_208 : Array__Int__Standard__character.map) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_208 : Array__Int__Standard__character.map) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_208 : Array__Int__Standard__character.map) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_210 : Array__Int__Standard__character.map) (temp___skip_top_level_211 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_210 : Array__Int__Standard__character.map) (temp___skip_top_level_211 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_210 : Array__Int__Standard__character.map) (temp___skip_top_level_211 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_218 : Main__lines__mystring.mystring) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_218 : Main__lines__mystring.mystring) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_218 : Main__lines__mystring.mystring) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_220 : Main__lines__mystring.mystring) (temp___skip_top_level_221 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_220 : Main__lines__mystring.mystring) (temp___skip_top_level_221 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_220 : Main__lines__mystring.mystring) (temp___skip_top_level_221 : bool) }

end

(* Module giving axioms for type "T10b" defined at mystring.ads:21 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L9b__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_249 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) =
  (if (temp___skip_constant_246) then (
   true) else (
   ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Main__lines__to_string__TresultS.first temp___expr_249) (Main__lines__to_string__TresultS.last temp___expr_249)) /\ ( ((Main__lines__to_string__TresultS.first temp___expr_249) = (1 : int)) /\ ((Main__lines__to_string__TresultS.last temp___expr_249) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_249 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_249 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_251 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_252 : bool) =
  ( ( true /\ ((Main__lines__to_string__TresultS.first temp___expr_251) = (1 : int)) )/\((Main__lines__to_string__TresultS.last temp___expr_251) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_251 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_252 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_251 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_252 : bool) }

end

(* Module giving axioms for type "T49b" defined at mystring.adb:8 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T49b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T50b" defined at mystring.adb:8 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T50b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS52bP1" defined at mystring.adb:12 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__TS52bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S52b" defined at mystring.adb:12 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__S52b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__from_string__S52b as Main__lines__from_string__S52b

 predicate dynamic_invariant [@inline] 
   (temp___expr_259 : Main__lines__from_string__S52b.s52b) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) =
  (if (temp___skip_constant_256) then (
   true) else (
   ( (Main__lines__from_string__S52b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) (Main__lines__from_string__S52b.first temp___expr_259) (Main__lines__from_string__S52b.last temp___expr_259)) /\ ( ((Main__lines__from_string__S52b.first temp___expr_259) = (Standard__string.first Main__lines__from_string__s.s)) /\ ((Main__lines__from_string__S52b.last temp___expr_259) = (Standard__string.last Main__lines__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_259 : Main__lines__from_string__S52b.s52b) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_259 : Main__lines__from_string__S52b.s52b) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_261 : Main__lines__from_string__S52b.s52b) (temp___skip_top_level_262 : bool) =
  ( ( true /\ ((Main__lines__from_string__S52b.first temp___expr_261) = (Standard__string.first Main__lines__from_string__s.s)) )/\((Main__lines__from_string__S52b.last temp___expr_261) = (Standard__string.last Main__lines__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_261 : Main__lines__from_string__S52b.s52b) (temp___skip_top_level_262 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_261 : Main__lines__from_string__S52b.s52b) (temp___skip_top_level_262 : bool) }

end

(* Module giving axioms for type "T53b" defined at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T53b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T54b" defined at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T54b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T55b" defined at mystring.adb:20 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__L_1__T55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T66b" defined at mystring.adb:60 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L65b__T66b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T64b" defined at mystring.adb:60 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L63b__T64b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T69b" defined at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T69b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T70b" defined at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T70b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T71b" defined at mystring.adb:75 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__L_4__T71b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_271 : int) (temp___is_init_267 : bool) (temp___skip_constant_268 : bool) (temp___do_toplevel_269 : bool) (temp___do_typ_inv_270 : bool) =
  (if (( temp___is_init_267 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_271)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_271 : int) (temp___is_init_267 : bool) (temp___skip_constant_268 : bool) (temp___do_toplevel_269 : bool) (temp___do_typ_inv_270 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_271 : int) (temp___is_init_267 : bool) (temp___skip_constant_268 : bool) (temp___do_toplevel_269 : bool) (temp___do_typ_inv_270 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_272 : int) (temp___skip_top_level_273 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_272 : int) (temp___skip_top_level_273 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_272 : int) (temp___skip_top_level_273 : bool) }

end

(* Module giving axioms for type "database" defined at passworddatabase.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 predicate dynamic_invariant [@inline] 
   (temp___expr_278 : Passworddatabase__database.database) (temp___is_init_274 : bool) (temp___skip_constant_275 : bool) (temp___do_toplevel_276 : bool) (temp___do_typ_inv_277 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_278 : Passworddatabase__database.database) (temp___is_init_274 : bool) (temp___skip_constant_275 : bool) (temp___do_toplevel_276 : bool) (temp___do_typ_inv_277 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_278 : Passworddatabase__database.database) (temp___is_init_274 : bool) (temp___skip_constant_275 : bool) (temp___do_toplevel_276 : bool) (temp___do_typ_inv_277 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_279 : Passworddatabase__database.database) (temp___skip_top_level_280 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_279 : Passworddatabase__database.database) (temp___skip_top_level_280 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_279 : Passworddatabase__database.database) (temp___skip_top_level_280 : bool) }

end

(* Module giving axioms for type "information" defined at passwordmanager.ads:92, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__information___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information

 predicate dynamic_invariant [@inline] 
   (temp___expr_285 : Passwordmanager__information.information) (temp___is_init_281 : bool) (temp___skip_constant_282 : bool) (temp___do_toplevel_283 : bool) (temp___do_typ_inv_284 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_285 : Passwordmanager__information.information) (temp___is_init_281 : bool) (temp___skip_constant_282 : bool) (temp___do_toplevel_283 : bool) (temp___do_typ_inv_284 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_285 : Passwordmanager__information.information) (temp___is_init_281 : bool) (temp___skip_constant_282 : bool) (temp___do_toplevel_283 : bool) (temp___do_typ_inv_284 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_286 : Passwordmanager__information.information) (temp___skip_top_level_287 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_286 : Passwordmanager__information.information) (temp___skip_top_level_287 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_286 : Passwordmanager__information.information) (temp___skip_top_level_287 : bool) }

end

(* Module giving axioms for type "TTgetdbSP1" defined at main.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTgetdbSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TgetdbS" defined at main.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TgetdbS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_295 : Array__Int__Standard__character.map) (temp___is_init_291 : bool) (temp___skip_constant_292 : bool) (temp___do_toplevel_293 : bool) (temp___do_typ_inv_294 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_295 : Array__Int__Standard__character.map) (temp___is_init_291 : bool) (temp___skip_constant_292 : bool) (temp___do_toplevel_293 : bool) (temp___do_typ_inv_294 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_295 : Array__Int__Standard__character.map) (temp___is_init_291 : bool) (temp___skip_constant_292 : bool) (temp___do_toplevel_293 : bool) (temp___do_typ_inv_294 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_297 : Array__Int__Standard__character.map) (temp___skip_top_level_298 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_297 : Array__Int__Standard__character.map) (temp___skip_top_level_298 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_297 : Array__Int__Standard__character.map) (temp___skip_top_level_298 : bool) }

end

(* Module giving axioms for type "T16b" defined at main.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTremdbSP1" defined at main.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTremdbSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TremdbS" defined at main.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TremdbS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_305 : Array__Int__Standard__character.map) (temp___is_init_301 : bool) (temp___skip_constant_302 : bool) (temp___do_toplevel_303 : bool) (temp___do_typ_inv_304 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_305 : Array__Int__Standard__character.map) (temp___is_init_301 : bool) (temp___skip_constant_302 : bool) (temp___do_toplevel_303 : bool) (temp___do_typ_inv_304 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_305 : Array__Int__Standard__character.map) (temp___is_init_301 : bool) (temp___skip_constant_302 : bool) (temp___do_toplevel_303 : bool) (temp___do_typ_inv_304 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_307 : Array__Int__Standard__character.map) (temp___skip_top_level_308 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_307 : Array__Int__Standard__character.map) (temp___skip_top_level_308 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_307 : Array__Int__Standard__character.map) (temp___skip_top_level_308 : bool) }

end

(* Module giving axioms for type "T17b" defined at main.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTputdbSP1" defined at main.adb:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTputdbSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TputdbS" defined at main.adb:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TputdbS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_315 : Array__Int__Standard__character.map) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_315 : Array__Int__Standard__character.map) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_315 : Array__Int__Standard__character.map) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_317 : Array__Int__Standard__character.map) (temp___skip_top_level_318 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_317 : Array__Int__Standard__character.map) (temp___skip_top_level_318 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_317 : Array__Int__Standard__character.map) (temp___skip_top_level_318 : bool) }

end

(* Module giving axioms for type "T18b" defined at main.adb:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTunlockSP1" defined at main.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTunlockSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TunlockS" defined at main.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TunlockS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_325 : Array__Int__Standard__character.map) (temp___is_init_321 : bool) (temp___skip_constant_322 : bool) (temp___do_toplevel_323 : bool) (temp___do_typ_inv_324 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_325 : Array__Int__Standard__character.map) (temp___is_init_321 : bool) (temp___skip_constant_322 : bool) (temp___do_toplevel_323 : bool) (temp___do_typ_inv_324 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_325 : Array__Int__Standard__character.map) (temp___is_init_321 : bool) (temp___skip_constant_322 : bool) (temp___do_toplevel_323 : bool) (temp___do_typ_inv_324 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_327 : Array__Int__Standard__character.map) (temp___skip_top_level_328 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_327 : Array__Int__Standard__character.map) (temp___skip_top_level_328 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_327 : Array__Int__Standard__character.map) (temp___skip_top_level_328 : bool) }

end

(* Module giving axioms for type "T19b" defined at main.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTlockSP1" defined at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTlockSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TlockS" defined at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TlockS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_335 : Array__Int__Standard__character.map) (temp___is_init_331 : bool) (temp___skip_constant_332 : bool) (temp___do_toplevel_333 : bool) (temp___do_typ_inv_334 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_335 : Array__Int__Standard__character.map) (temp___is_init_331 : bool) (temp___skip_constant_332 : bool) (temp___do_toplevel_333 : bool) (temp___do_typ_inv_334 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_335 : Array__Int__Standard__character.map) (temp___is_init_331 : bool) (temp___skip_constant_332 : bool) (temp___do_toplevel_333 : bool) (temp___do_typ_inv_334 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_337 : Array__Int__Standard__character.map) (temp___skip_top_level_338 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_337 : Array__Int__Standard__character.map) (temp___skip_top_level_338 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_337 : Array__Int__Standard__character.map) (temp___skip_top_level_338 : bool) }

end

(* Module giving axioms for type "T20b" defined at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_345 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_341 : bool) (temp___skip_constant_342 : bool) (temp___do_toplevel_343 : bool) (temp___do_typ_inv_344 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_345 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_341 : bool) (temp___skip_constant_342 : bool) (temp___do_toplevel_343 : bool) (temp___do_typ_inv_344 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_345 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_341 : bool) (temp___skip_constant_342 : bool) (temp___do_toplevel_343 : bool) (temp___do_typ_inv_344 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_346 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_347 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_346 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_347 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_346 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_347 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_354 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_350 : bool) (temp___skip_constant_351 : bool) (temp___do_toplevel_352 : bool) (temp___do_typ_inv_353 : bool) =
  (if (temp___skip_constant_351) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_354) (Mystringtokeniser__tokenarray.last temp___expr_354))))
 val dynamic_invariant [@inline] 
   (temp___expr_354 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_350 : bool) (temp___skip_constant_351 : bool) (temp___do_toplevel_352 : bool) (temp___do_typ_inv_353 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_354 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_350 : bool) (temp___skip_constant_351 : bool) (temp___do_toplevel_352 : bool) (temp___do_typ_inv_353 : bool) }

end

(* Module giving axioms for type "TTtokenslistSP1" defined at main.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTtokenslistSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtokenslistS" defined at main.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TtokenslistS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_360 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_356 : bool) (temp___skip_constant_357 : bool) (temp___do_toplevel_358 : bool) (temp___do_typ_inv_359 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_360 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_356 : bool) (temp___skip_constant_357 : bool) (temp___do_toplevel_358 : bool) (temp___do_typ_inv_359 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_360 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_356 : bool) (temp___skip_constant_357 : bool) (temp___do_toplevel_358 : bool) (temp___do_typ_inv_359 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_362 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_363 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_362 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_363 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_362 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_363 : bool) }

end

(* Module giving axioms for type "T21b" defined at main.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at main.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24b" defined at main.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__L23b__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10s" defined at passwordmanager.ads:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__init__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at main.adb:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27b" defined at main.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at main.adb:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30b" defined at main.adb:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T30b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7s" defined at mystringtokeniser.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenise__L6s__T7s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31b" defined at main.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring__T28s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_385 : Array__Int__Standard__character.map) (temp___is_init_381 : bool) (temp___skip_constant_382 : bool) (temp___do_toplevel_383 : bool) (temp___do_typ_inv_384 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_385 : Array__Int__Standard__character.map) (temp___is_init_381 : bool) (temp___skip_constant_382 : bool) (temp___do_toplevel_383 : bool) (temp___do_typ_inv_384 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_385 : Array__Int__Standard__character.map) (temp___is_init_381 : bool) (temp___skip_constant_382 : bool) (temp___do_toplevel_383 : bool) (temp___do_typ_inv_384 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_387 : Array__Int__Standard__character.map) (temp___skip_top_level_388 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_387 : Array__Int__Standard__character.map) (temp___skip_top_level_388 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_387 : Array__Int__Standard__character.map) (temp___skip_top_level_388 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_395 : Passworddatabase__urls__mystring.mystring) (temp___is_init_391 : bool) (temp___skip_constant_392 : bool) (temp___do_toplevel_393 : bool) (temp___do_typ_inv_394 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_395 : Passworddatabase__urls__mystring.mystring) (temp___is_init_391 : bool) (temp___skip_constant_392 : bool) (temp___do_toplevel_393 : bool) (temp___do_typ_inv_394 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_395 : Passworddatabase__urls__mystring.mystring) (temp___is_init_391 : bool) (temp___skip_constant_392 : bool) (temp___do_toplevel_393 : bool) (temp___do_typ_inv_394 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_397 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_398 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_397 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_398 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_397 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_398 : bool) }

end

(* Module giving axioms for type "url" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__url___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 predicate dynamic_invariant [@inline] 
   (temp___expr_407 : Passworddatabase__url.url) (temp___is_init_403 : bool) (temp___skip_constant_404 : bool) (temp___do_toplevel_405 : bool) (temp___do_typ_inv_406 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_407 : Passworddatabase__url.url) (temp___is_init_403 : bool) (temp___skip_constant_404 : bool) (temp___do_toplevel_405 : bool) (temp___do_typ_inv_406 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_407 : Passworddatabase__url.url) (temp___is_init_403 : bool) (temp___skip_constant_404 : bool) (temp___do_toplevel_405 : bool) (temp___do_typ_inv_406 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_409 : Passworddatabase__url.url) (temp___skip_top_level_410 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_409 : Passworddatabase__url.url) (temp___skip_top_level_410 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_409 : Passworddatabase__url.url) (temp___skip_top_level_410 : bool) }

end

(* Module giving axioms for type "T33b" defined at main.adb:92, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_422 : Array__Int__Standard__character.map) (temp___is_init_418 : bool) (temp___skip_constant_419 : bool) (temp___do_toplevel_420 : bool) (temp___do_typ_inv_421 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_422 : Array__Int__Standard__character.map) (temp___is_init_418 : bool) (temp___skip_constant_419 : bool) (temp___do_toplevel_420 : bool) (temp___do_typ_inv_421 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_422 : Array__Int__Standard__character.map) (temp___is_init_418 : bool) (temp___skip_constant_419 : bool) (temp___do_toplevel_420 : bool) (temp___do_typ_inv_421 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_424 : Array__Int__Standard__character.map) (temp___skip_top_level_425 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_424 : Array__Int__Standard__character.map) (temp___skip_top_level_425 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_424 : Array__Int__Standard__character.map) (temp___skip_top_level_425 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_432 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_428 : bool) (temp___skip_constant_429 : bool) (temp___do_toplevel_430 : bool) (temp___do_typ_inv_431 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_432 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_428 : bool) (temp___skip_constant_429 : bool) (temp___do_toplevel_430 : bool) (temp___do_typ_inv_431 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_432 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_428 : bool) (temp___skip_constant_429 : bool) (temp___do_toplevel_430 : bool) (temp___do_typ_inv_431 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_434 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_435 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_434 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_435 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_434 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_435 : bool) }

end

(* Module giving axioms for type "password" defined at passworddatabase.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__password___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 predicate dynamic_invariant [@inline] 
   (temp___expr_444 : Passworddatabase__password.password) (temp___is_init_440 : bool) (temp___skip_constant_441 : bool) (temp___do_toplevel_442 : bool) (temp___do_typ_inv_443 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_444 : Passworddatabase__password.password) (temp___is_init_440 : bool) (temp___skip_constant_441 : bool) (temp___do_toplevel_442 : bool) (temp___do_typ_inv_443 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_444 : Passworddatabase__password.password) (temp___is_init_440 : bool) (temp___skip_constant_441 : bool) (temp___do_toplevel_442 : bool) (temp___do_typ_inv_443 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_446 : Passworddatabase__password.password) (temp___skip_top_level_447 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_446 : Passworddatabase__password.password) (temp___skip_top_level_447 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_446 : Passworddatabase__password.password) (temp___skip_top_level_447 : bool) }

end

(* Module giving axioms for type "T35b" defined at main.adb:119, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_5__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T37b" defined at main.adb:138, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_6__T37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T40b" defined at main.adb:154, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_7__L39b__T40b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T41b" defined at main.adb:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_7__T41b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T44b" defined at main.adb:175, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_8__L43b__T44b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T45b" defined at main.adb:182, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_8__T45b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T47b" defined at main.adb:190, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T47b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at main.adb:23, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__tokenslist__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val function main__tokenslist__aggregate_def 
   (temp___464 : Mystringtokeniser__tokenextent.tokenextent) : Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:39, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_466
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_466 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_466__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_466 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:45, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_468
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_468 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_468__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_468 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:53, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_469
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_469 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_469__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_469 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (4 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (5 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (7 : int))) = (62 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_469 __void_param) (10 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:55, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_470
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_470 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_470__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_470 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (6 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (8 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (9 : int))) = (62 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_470 __void_param) (10 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:66, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_472
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_472 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_472__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_472 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_472 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:92, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_474
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_474 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_474__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_474 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:190, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_477
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_477 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_477__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_477 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:182, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_479
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_479 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_479__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_479 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:161, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_484
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_484 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_484__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_484 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_484 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:138, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_489
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_489 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_489__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_489 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:119, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_494
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_494 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_494__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_494 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (14 : int))) = (44 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (18 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (19 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (21 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (22 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (24 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (26 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (28 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (30 : int))) = (120 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (32 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (33 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_518
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_518 
   (temp___520 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_561
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_561 
   (temp___563 : int) : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (31 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Main__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "getdb" defined at main.adb:18, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__getdb___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__getdb as Main__getdb
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_163 as Temp___String_Literal_163
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom getdb__def_axiom :
  ((Main__getdb.getdb ) = (Temp___String_Literal_163.temp___String_Literal_163 ()))

end

(* Module for defining the value of constant "remdb" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__remdb___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__remdb as Main__remdb
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_164 as Temp___String_Literal_164
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom remdb__def_axiom :
  ((Main__remdb.remdb ) = (Temp___String_Literal_164.temp___String_Literal_164 ()))

end

(* Module for defining the value of constant "putdb" defined at main.adb:20, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__putdb___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__putdb as Main__putdb
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_165 as Temp___String_Literal_165
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom putdb__def_axiom :
  ((Main__putdb.putdb ) = (Temp___String_Literal_165.temp___String_Literal_165 ()))

end

(* Module for defining the value of constant "unlock" defined at main.adb:21, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__unlock as Main__unlock
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_166 as Temp___String_Literal_166
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom unlock__def_axiom :
  ((Main__unlock.unlock ) = (Temp___String_Literal_166.temp___String_Literal_166 ()))

end

(* Module for defining the value of constant "lock" defined at main.adb:22, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__lock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lock as Main__lock
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_167 as Temp___String_Literal_167
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom lock__def_axiom :
  ((Main__lock.lock ) = (Temp___String_Literal_167.temp___String_Literal_167 ()))

end

(* Module for defining the value of constant "max_line_length" defined at utility.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Utility__max_line_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Utility__max_line_length as Utility__max_line_length

 axiom max_line_length__def_axiom :
  ((Utility__max_line_length.max_line_length ) = (2048 : int))

end

(* Module for defining the value of constant "get_rem_pin_length" defined at utility.ads:11, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Utility__get_rem_pin_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Utility__get_rem_pin_length as Utility__get_rem_pin_length

 axiom get_rem_pin_length__def_axiom :
  ((Utility__get_rem_pin_length.get_rem_pin_length ) = (2 : int))

end

(* Module for defining the value of constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_url_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_url_length as Passworddatabase__max_url_length

 axiom max_url_length__def_axiom :
  ((Passworddatabase__max_url_length.max_url_length ) = (1024 : int))

end

(* Module for defining the value of constant "put_length" defined at utility.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Utility__put_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Utility__put_length as Utility__put_length

 axiom put_length__def_axiom :
  ((Utility__put_length.put_length ) = (3 : int))

end

(* Module for defining the value of constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_password_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_password_length as Passworddatabase__max_password_length

 axiom max_password_length__def_axiom :
  ((Passworddatabase__max_password_length.max_password_length ) = (100 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep

 val length 
   (m : Main__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:102323] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__length.length m) in (
    (if ((Main__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:102323] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Main__lines__length.length m) in (
    (Main__lines__length.length__function_guard result m)))
    ) -> ((Main__lines__length.length m) = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:8 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__to_string as Main__lines__to_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Main__lines__to_string.to_string m)) /\ (Main__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:101756] ((Standard__string.length result) = (epsilon temp___result_226 : int.
   ( (temp___result_226 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_226 m) ))) ) /\ ( [@GP_Pretty_Ada:101763] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:101768] ((Standard__string.last result) = (epsilon temp___result_227 : int.
   ( (temp___result_227 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_227 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__to_string.to_string m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__to_string.to_string m) in (
    (if ((Main__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:101756] ((Standard__string.length result) = (epsilon temp___result_228 : int.
      ( (temp___result_228 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_228 m) ))) ) /\ ( [@GP_Pretty_Ada:101763] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:101768] ((Standard__string.last result) = (epsilon temp___result_229 : int.
      ( (temp___result_229 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_229 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:12 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__from_string as Main__lines__from_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:102241] ((Standard__string.length s) <= (2048 : int)) ) }
  ensures {  ( ( (result = (Main__lines__from_string.from_string s)) /\ (Main__lines__from_string.from_string__function_guard result s) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:102255] ((epsilon temp___result_230 : int.
   ( (temp___result_230 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_230 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Main__lines__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:102241] ((Standard__string.length s) <= (2048 : int)) ) ) -> (let result = (Main__lines__from_string.from_string s) in (
    (if ((Main__lines__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:102255] ((epsilon temp___result_231 : int.
      ( (temp___result_231 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_231 result) )) = (Standard__string.length s)) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:16 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less as Main__lines__less

 val less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__less.less m1 m2)) /\ (Main__lines__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:30 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Main__lines__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:102391] (index <= (epsilon temp___result_232 : int.
   ( (temp___result_232 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_232 m) ))) ) }
  ensures {  ( ( (result = (Main__lines__get.get m index)) /\ (Main__lines__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___233 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
   (Array__Int__Standard__character.get temp___233 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:102391] (index <= (epsilon temp___result_234 : int.
    ( (temp___result_234 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_234 m) ))) ) ) -> (let result = (Main__lines__get.get m index) in (
    (if ((Main__lines__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Main__lines__get.get m index) in (
    (Main__lines__get.get__function_guard result m index)))
    ) -> ((Main__lines__get.get m index) = (Standard__character__rep.to_rep (let temp___235 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get temp___235 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:18 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__equal as Main__lines__equal

 val equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__equal.equal m1 m2)) /\ (Main__lines__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:101862] ((epsilon temp___result_236 : int.
    ( (temp___result_236 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_236 m1) )) = (epsilon temp___result_237 : int.
    ( (temp___result_237 = (Main__lines__length.length m2)) /\ (Main__lines__length.length__function_guard temp___result_237 m2) ))) ) /\ (forall i   [@name:I] [@model_trace:101880]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_238 : int.
     ( (temp___result_238 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_238 m1) ))) ) -> ( [@GP_Pretty_Ada:101870] ((epsilon temp___result_239 : int.
     ( (temp___result_239 = (Main__lines__get.get m1 i)) /\ (Main__lines__get.get__function_guard temp___result_239 m1 i) )) = (epsilon temp___result_240 : int.
     ( (temp___result_240 = (Main__lines__get.get m2 i)) /\ (Main__lines__get.get__function_guard temp___result_240 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:102469] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__substring as Main__lines__substring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:101948] (from <= to__) ) /\ ( [@GP_Pretty_Ada:101951] (to__ <= (epsilon temp___result_241 : int.
   ( (temp___result_241 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_241 m) ))) ) ) }
  ensures {  ( ( (result = (Main__lines__substring.substring m from to__)) /\ (Main__lines__substring.substring__function_guard result m from to__) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:102364] ((epsilon temp___result_242 : int.
   ( (temp___result_242 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_242 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall from   to__   : int [(Main__lines__substring.substring m from to__)].
   ( ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:101948] (from <= to__) ) /\ ( [@GP_Pretty_Ada:101951] (to__ <= (epsilon temp___result_243 : int.
    ( (temp___result_243 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_243 m) ))) ) ) ) -> (let result = (Main__lines__substring.substring m from to__) in (
    (if ((Main__lines__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:102364] ((epsilon temp___result_244 : int.
      ( (temp___result_244 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_244 result) )) = ((to__ - from) + (1 : int))) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:33 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Main__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:22609] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:22615] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:22624] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:22635] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count

 val argument_count 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard result ()) )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom argument_count__post_axiom :
  (forall __void_param   : unit [(Mycommandline__argument_count.argument_count __void_param)].
   (let result = (Mycommandline__argument_count.argument_count __void_param) in (
    (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count
 use        Mycommandline__argument as Mycommandline__argument

 val argument 
   (number : int) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:94280] (number <= (epsilon temp___result_368 : int.
   ( (temp___result_368 = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard temp___result_368 ()) ))) ) }
  ensures {  ( ( (result = (Mycommandline__argument.argument number)) /\ (Mycommandline__argument.argument__function_guard result number) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at passwordmanager.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Passwordmanager__information as Passwordmanager__information
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val init 
   (pin_input : Standard__string.string) (manager_information__split_fields : Passwordmanager__information.__split_fields__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:29782] ((Standard__string.length pin_input) = (4 : int)) ) /\ (forall i   [@model_trace:29785] [@name:I]  : int.
   ( ( ((Standard__string.first pin_input) <= i) /\ (i <= (Standard__string.last pin_input)) ) -> ( ( [@GP_Pretty_Ada:29799] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pin_input) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:29805] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pin_input) i)) <= (57 : int)) ) ) )) ) }
  ensures {  (Passwordmanager__information___axiom.dynamic_invariant { Passwordmanager__information.__split_fields = manager_information__split_fields.Passwordmanager__information.__split_fields__content } True True True True) }
  writes {manager_information__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:22790] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:22796] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "lock_status" defined at passwordmanager.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__lock_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom
 use        Passwordmanager__lock_status as Passwordmanager__lock_status

 val lock_status 
   (manager_information : Passwordmanager__information.information) : bool
  requires {  true }
  ensures {  ( ( (result = (Passwordmanager__lock_status.lock_status manager_information)) /\ (Passwordmanager__lock_status.lock_status__function_guard result manager_information) )/\true ) }
 
 axiom lock_status__post_axiom :
  (forall manager_information   : Passwordmanager__information.information [(Passwordmanager__lock_status.lock_status manager_information)].
   ( (Passwordmanager__information___axiom.dynamic_invariant manager_information True True True True) -> (let result = (Passwordmanager__lock_status.lock_status manager_information) in (
    (if ((Passwordmanager__lock_status.lock_status__function_guard result manager_information)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:22478] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:22484] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenise 
   (s : Standard__string.string) (tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first : Standard__integer.integer) (tokens__last : Standard__integer.integer) (count : int__ref) : unit
  requires {  ( (if (((Standard__string.length s) > (0 : int))) then (
   ( [@GP_Pretty_Ada:16470] ((Standard__string.first s) <= (Standard__string.last s)) )) else (
   ( [@GP_Pretty_Ada:94777] true ))) /\ ( [@GP_Pretty_Ada:16479] ((Standard__integer__rep.to_rep tokens__first) <= (Standard__integer__rep.to_rep tokens__last)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:16487] (count.int__content <= (Integer.length (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last))) ) /\ (forall index   [@model_trace:16492] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep tokens__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep tokens__first) + (count.int__content - (1 : int)))) ) -> ( ( [@GP_Pretty_Ada:16517] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:16527] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last s) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) /\ ( ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last)))) /\ (forall temp___374   : int.
   (if (( ((Standard__integer__rep.to_rep tokens__first) <= temp___374) /\ (temp___374 <= (Standard__integer__rep.to_rep tokens__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___374) True False True True)) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant count.int__content True True True True) ) ) }
  writes {tokens, count}

end

(* Module for declaring a program function (and possibly an axiom) for "to_lower__2" defined at a-chahan.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__characters__handling__to_lower__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__characters__handling__to_lower__2 as Ada__characters__handling__to_lower__2

 val to_lower__2 
   (item : Standard__string.string) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Ada__characters__handling__to_lower__2.to_lower__2 item)) /\ true )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom to_lower__2__post_axiom :
  (forall item   : Standard__string.string [(Ada__characters__handling__to_lower__2.to_lower__2 item)].
   ( (Standard__string___axiom.dynamic_invariant item True True True True) -> (let result = (Ada__characters__handling__to_lower__2.to_lower__2 item) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string__2" defined at passworddatabase.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__from_string__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2 as Passworddatabase__from_string__2
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
  requires {  ( [@GP_Pretty_Ada:69651] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__from_string__2.from_string__2 s)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard result s) )/\(Passworddatabase__url___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "execute_get_command" defined at passwordmanager.ads:55, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__execute_get_command___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information
 use        Passworddatabase__url as Passworddatabase__url
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val execute_get_command 
   (manager_information : Passwordmanager__information.information) (input_url : Passworddatabase__url.url) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__from_string as Passworddatabase__from_string
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val from_string 
   (s : Standard__string.string) : Passworddatabase__password.password
  requires {  ( [@GP_Pretty_Ada:69632] ((Standard__string.length s) <= (100 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__from_string.from_string s)) /\ (Passworddatabase__from_string.from_string__function_guard result s) )/\(Passworddatabase__password___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "execute_put_command" defined at passwordmanager.ads:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__execute_put_command___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__password as Passworddatabase__password

 val execute_put_command 
   (manager_information__split_fields : Passwordmanager__information.__split_fields__ref) (input_url : Passworddatabase__url.url) (input_pwd : Passworddatabase__password.password) : unit
  requires {  true }
  ensures {  (Passwordmanager__information___axiom.dynamic_invariant { Passwordmanager__information.__split_fields = manager_information__split_fields.Passwordmanager__information.__split_fields__content } True True True True) }
  writes {manager_information__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "execute_rem_command" defined at passwordmanager.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__execute_rem_command___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom
 use        Passworddatabase__url as Passworddatabase__url

 val execute_rem_command 
   (manager_information__split_fields : Passwordmanager__information.__split_fields__ref) (input_url : Passworddatabase__url.url) : unit
  requires {  true }
  ensures {  (Passwordmanager__information___axiom.dynamic_invariant { Passwordmanager__information.__split_fields = manager_information__split_fields.Passwordmanager__information.__split_fields__content } True True True True) }
  writes {manager_information__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:19403] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:19406] [@name:I]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:19420] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:19426] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:19403] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:19406] [@name:I]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:19420] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:19426] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "execute_unlock" defined at passwordmanager.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__execute_unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom

 val execute_unlock 
   (manager_information__split_fields : Passwordmanager__information.__split_fields__ref) (pin_input : int) : unit
  requires {  true }
  ensures {  (Passwordmanager__information___axiom.dynamic_invariant { Passwordmanager__information.__split_fields = manager_information__split_fields.Passwordmanager__information.__split_fields__content } True True True True) }
  writes {manager_information__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "execute_lock" defined at passwordmanager.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__execute_lock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passwordmanager__information as Passwordmanager__information
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom

 val execute_lock 
   (manager_information__split_fields : Passwordmanager__information.__split_fields__ref) (pin_input : int) : unit
  requires {  true }
  ensures {  (Passwordmanager__information___axiom.dynamic_invariant { Passwordmanager__information.__split_fields = manager_information__split_fields.Passwordmanager__information.__split_fields__content } True True True True) }
  writes {manager_information__split_fields}

end

(* Module for defining the value of the aggregate at main.adb:23, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__tokenslist__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__tokenslist__aggregate_def as Main__tokenslist__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom def_axiom :
  (forall temp___464   : Mystringtokeniser__tokenextent.tokenextent.
   (let temp___463 [@mlw:proxy_symbol] [@introduced] = (Main__tokenslist__aggregate_def.main__tokenslist__aggregate_def temp___464) in (
    (if ((Mystringtokeniser__tokenextent___axiom.dynamic_invariant temp___464 True True True True)) then (
     (forall temp___465   : int.
      ((Array__Int__Mystringtokeniser__tokenextent.get temp___463 temp___465) = temp___464))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__s as Main__s
 use        Main__pm_information as Main__pm_information
 use        Passwordmanager__information as Passwordmanager__information
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom
 use        Main__getdb as Main__getdb
 use        Main__remdb as Main__remdb
 use        Main__putdb as Main__putdb
 use        Main__unlock as Main__unlock
 use        Main__lock as Main__lock
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__tokenslist as Main__tokenslist
 use        Main__numtokens as Main__numtokens
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_1__temp_pin as Main__B_1__temp_pin
 use        Passwordmanager__init___axiom as Passwordmanager__init___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Passwordmanager__lock_status___axiom as Passwordmanager__lock_status___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Ada__characters__handling__to_lower__2___axiom as Ada__characters__handling__to_lower__2___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__command as Main__B_3__command
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_4__tokurl as Main__B_3__B_4__tokurl
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passwordmanager__execute_get_command___axiom as Passwordmanager__execute_get_command___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_5__tokurl as Main__B_3__B_5__tokurl
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_5__tokpwd as Main__B_3__B_5__tokpwd
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__from_string___axiom as Passworddatabase__from_string___axiom
 use        Passwordmanager__execute_put_command___axiom as Passwordmanager__execute_put_command___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_6__tokurl as Main__B_3__B_6__tokurl
 use        Passwordmanager__execute_rem_command___axiom as Passwordmanager__execute_rem_command___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_7__tokpin as Main__B_3__B_7__tokpin
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Passwordmanager__execute_unlock___axiom as Passwordmanager__execute_unlock___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_8__tokpin as Main__B_3__B_8__tokpin
 use        Passwordmanager__execute_lock___axiom as Passwordmanager__execute_lock___axiom
 use        Main__TTgetdbSP1 as Main__TTgetdbSP1
 use        Main__TgetdbS___axiom as Main__TgetdbS___axiom
 use        Temp___String_Literal_163 as Temp___String_Literal_163
 use        Main__TTremdbSP1 as Main__TTremdbSP1
 use        Main__TremdbS___axiom as Main__TremdbS___axiom
 use        Temp___String_Literal_164 as Temp___String_Literal_164
 use        Main__TTputdbSP1 as Main__TTputdbSP1
 use        Main__TputdbS___axiom as Main__TputdbS___axiom
 use        Temp___String_Literal_165 as Temp___String_Literal_165
 use        Main__TTunlockSP1 as Main__TTunlockSP1
 use        Main__TunlockS___axiom as Main__TunlockS___axiom
 use        Temp___String_Literal_166 as Temp___String_Literal_166
 use        Main__TTlockSP1 as Main__TTlockSP1
 use        Main__TlockS___axiom as Main__TlockS___axiom
 use        Temp___String_Literal_167 as Temp___String_Literal_167
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Main__TTtokenslistSP1 as Main__TTtokenslistSP1
 use        Main__TtokenslistS___axiom as Main__TtokenslistS___axiom
 use        Main__L_2 as Main__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__tokenslist__aggregate_def as Main__tokenslist__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_466 as Temp___String_Literal_466
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_468 as Temp___String_Literal_468
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_469 as Temp___String_Literal_469
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_470 as Temp___String_Literal_470
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_472 as Temp___String_Literal_472
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_474 as Temp___String_Literal_474
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_477 as Temp___String_Literal_477
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_479 as Temp___String_Literal_479
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_484 as Temp___String_Literal_484
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_489 as Temp___String_Literal_489
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_494 as Temp___String_Literal_494
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__s___axiom as Main__s___axiom
 use        Main__pm_information___axiom as Main__pm_information___axiom
 use        Main__getdb___axiom as Main__getdb___axiom
 use        Main__remdb___axiom as Main__remdb___axiom
 use        Main__putdb___axiom as Main__putdb___axiom
 use        Main__unlock___axiom as Main__unlock___axiom
 use        Main__lock___axiom as Main__lock___axiom
 use        Main__tokenslist___axiom as Main__tokenslist___axiom
 use        Main__tokenslist__aggregate_def___axiom as Main__tokenslist__aggregate_def___axiom
 use        Main__numtokens___axiom as Main__numtokens___axiom
 use        Main__B_1__temp_pin___axiom as Main__B_1__temp_pin___axiom
 use        Main__B_3__command___axiom as Main__B_3__command___axiom
 use        Main__B_3__B_4__tokurl___axiom as Main__B_3__B_4__tokurl___axiom
 use        Main__B_3__B_5__tokurl___axiom as Main__B_3__B_5__tokurl___axiom
 use        Main__B_3__B_5__tokpwd___axiom as Main__B_3__B_5__tokpwd___axiom
 use        Main__B_3__B_6__tokurl___axiom as Main__B_3__B_6__tokurl___axiom
 use        Main__B_3__B_7__tokpin___axiom as Main__B_3__B_7__tokpin___axiom
 use        Main__B_3__B_8__tokpin___axiom as Main__B_3__B_8__tokpin___axiom
 use        Main__L_2___axiom as Main__L_2___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__from_string___axiom as Passworddatabase__from_string___axiom
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Ada__characters__handling__to_lower__2___axiom as Ada__characters__handling__to_lower__2___axiom
 use        Passwordmanager__init___axiom as Passwordmanager__init___axiom
 use        Passwordmanager__lock_status___axiom as Passwordmanager__lock_status___axiom
 use        Passwordmanager__execute_unlock___axiom as Passwordmanager__execute_unlock___axiom
 use        Passwordmanager__execute_lock___axiom as Passwordmanager__execute_lock___axiom
 use        Passwordmanager__execute_get_command___axiom as Passwordmanager__execute_get_command___axiom
 use        Passwordmanager__execute_put_command___axiom as Passwordmanager__execute_put_command___axiom
 use        Passwordmanager__execute_rem_command___axiom as Passwordmanager__execute_rem_command___axiom
 use        Passwordmanager__information___axiom as Passwordmanager__information___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__TgetdbS___axiom as Main__TgetdbS___axiom
 use        Main__TTgetdbSP1___axiom as Main__TTgetdbSP1___axiom
 use        Main__TremdbS___axiom as Main__TremdbS___axiom
 use        Main__TTremdbSP1___axiom as Main__TTremdbSP1___axiom
 use        Main__TputdbS___axiom as Main__TputdbS___axiom
 use        Main__TTputdbSP1___axiom as Main__TTputdbSP1___axiom
 use        Main__TunlockS___axiom as Main__TunlockS___axiom
 use        Main__TTunlockSP1___axiom as Main__TTunlockSP1___axiom
 use        Main__TlockS___axiom as Main__TlockS___axiom
 use        Main__TTlockSP1___axiom as Main__TTlockSP1___axiom
 use        Main__TtokenslistS___axiom as Main__TtokenslistS___axiom
 use        Main__TTtokenslistSP1___axiom as Main__TTtokenslistSP1___axiom

 exception Temp___exception_473
 
 exception Temp___exception_475
 
 exception Temp___exception_478
 
 exception Temp___exception_480
 
 exception Temp___exception_485
 
 exception Temp___exception_490
 
 exception Temp___exception_495
 
 let def [#"main.adb" 13 0 0][@GP_Subp:main.adb:13] 
   (__void_param : unit)
  requires { [#"main.adb" 13 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:13 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:13 *)
  ;
  [#"main.adb" 13 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:13 *)
  ;
  [#"main.adb" 13 0 0] try
   ( ();
   ([#"main.adb" 15 0 0] ());
   ([#"mystring.adb" 3 0 0] ());
   ([#"main.adb" 15 0 0] ());
   ([#"main.adb" 16 0 0] ( [#"main.adb" 16 0 0] begin ensures {true} let _ = (let _ = (let temp___459 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 16 0 0] (val _f : Main__lines__mystring.mystring
   ensures {[#"main.adb" 16 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 16 0 0] assume { [#"main.adb" 16 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False) };
   [#"main.adb" 16 0 0] assume { [#"main.adb" 16 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
   ([#"main.adb" 17 0 0] ( [#"main.adb" 17 0 0] begin ensures {true} let _ = (let _ = (let temp___461 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 17 0 0] (val _f : Passwordmanager__information.information
   ensures {[#"main.adb" 17 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 17 0 0] assume { [#"main.adb" 17 0 0] (Passwordmanager__information___axiom.default_initial_assumption { Passwordmanager__information.__split_fields = Main__pm_information.pm_information__split_fields.Passwordmanager__information.__split_fields__content } False) };
   [#"main.adb" 17 0 0] assume { [#"main.adb" 17 0 0] (Passwordmanager__information___axiom.dynamic_invariant { Passwordmanager__information.__split_fields = Main__pm_information.pm_information__split_fields.Passwordmanager__information.__split_fields__content } False False True True) } ));
   ([#"main.adb" 18 0 0] ());
   ([#"main.adb" 18 0 0] ( [#"main.adb" 18 0 0] begin ensures {true} let _ = (let _ = (Temp___String_Literal_163.temp___String_Literal_163(())) in (
    ()))
    in () end ;
   [#"main.adb" 18 0 0] assume { [#"main.adb" 18 0 0] (Main__TgetdbS___axiom.dynamic_invariant Main__getdb.getdb True False True True) } ));
   ([#"main.adb" 19 0 0] ());
   ([#"main.adb" 19 0 0] ( [#"main.adb" 19 0 0] begin ensures {true} let _ = (let _ = (Temp___String_Literal_164.temp___String_Literal_164(())) in (
    ()))
    in () end ;
   [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Main__TremdbS___axiom.dynamic_invariant Main__remdb.remdb True False True True) } ));
   ([#"main.adb" 20 0 0] ());
   ([#"main.adb" 20 0 0] ( [#"main.adb" 20 0 0] begin ensures {true} let _ = (let _ = (Temp___String_Literal_165.temp___String_Literal_165(())) in (
    ()))
    in () end ;
   [#"main.adb" 20 0 0] assume { [#"main.adb" 20 0 0] (Main__TputdbS___axiom.dynamic_invariant Main__putdb.putdb True False True True) } ));
   ([#"main.adb" 21 0 0] ());
   ([#"main.adb" 21 0 0] ( [#"main.adb" 21 0 0] begin ensures {true} let _ = (let _ = (Temp___String_Literal_166.temp___String_Literal_166(())) in (
    ()))
    in () end ;
   [#"main.adb" 21 0 0] assume { [#"main.adb" 21 0 0] (Main__TunlockS___axiom.dynamic_invariant Main__unlock.unlock True False True True) } ));
   ([#"main.adb" 22 0 0] ());
   ([#"main.adb" 22 0 0] ( [#"main.adb" 22 0 0] begin ensures {true} let _ = (let _ = (Temp___String_Literal_167.temp___String_Literal_167(())) in (
    ()))
    in () end ;
   [#"main.adb" 22 0 0] assume { [#"main.adb" 22 0 0] (Main__TlockS___axiom.dynamic_invariant Main__lock.lock True False True True) } ));
   ([#"main.adb" 23 0 0] ());
   ([#"main.adb" 23 0 0] ( [#"main.adb" 23 0 0] (Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Main__tokenslist__aggregate_def.main__tokenslist__aggregate_def({ Mystringtokeniser__tokenextent.__split_fields = { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start = ( 1 : Standard__positive.positive ); Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length = ( 0 : Standard__natural.natural ) } })) ));
   [#"main.adb" 23 0 0] assume { [#"main.adb" 23 0 0] (Main__TtokenslistS___axiom.dynamic_invariant Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content True False True True) } ));
   ([#"main.adb" 24 0 0] ( [#"main.adb" 24 0 0] assume { [#"main.adb" 24 0 0] (Standard__natural___axiom.default_initial_assumption Main__numtokens.numtokens.int__content False) };
   [#"main.adb" 24 0 0] assume { [#"main.adb" 24 0 0] (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False False True True) } ));
   ([#"main.adb" 29 0 0] ());
   ([#"main.adb" 69 0 0] ());
   ([#"main.adb" 50 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:28:21] ([#"main.adb" 28 0 0] ()) );
   ( [@GP_Sloc:main.adb:28:4] ([#"main.adb" 28 0 0] (if (( ([#"main.adb" 28 0 0] [#"main.adb" 28 0 0] (([@branch_id=2474] Main.spark__branch).bool__content <- ( ((Mycommandline__argument_count___axiom.argument_count(())) = (1 : int)) )));
   ( [@branch_id=2474] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:29:7] ([#"main.adb" 29 0 0] ( ();
    ([#"main.adb" 30 0 0] ());
    ([#"main.adb" 30 0 0] ( (let main__B_1__temp_pin__assume = ([#"main.adb" 30 0 0] ( [@GP_Shape:if__B_1_declblk__temp_pin_decl__call_argument] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:30:44] [@vc:annotation] [@comment:         Temp_Pin : String := MyCommandLine.Argument(1);                                            ^ main.adb:30:44:VC_PRECONDITION] [@GP_Id:5] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
     (  (Main__B_1__temp_pin.temp_pin.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_1__temp_pin__assume)) ));
      assume {  ((Standard__integer__rep.to_rep(Main__B_1__temp_pin.temp_pin__first)) = (Standard__string.first(main__B_1__temp_pin__assume))) };
      assume {  ((Standard__integer__rep.to_rep(Main__B_1__temp_pin.temp_pin__last)) = (Standard__string.last(main__B_1__temp_pin__assume))) } )))
    ;
     assume {  (if (False) then (
     true) else (
     (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__first) (Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__last)))) } ));
    ();
    ( [@GP_Sloc:main.adb:34:27] ([#"main.adb" 34 0 0] ()) );
    ( [@GP_Sloc:main.adb:34:10] ([#"main.adb" 34 0 0] (if (( ([#"main.adb" 34 0 0] [#"main.adb" 34 0 0] (([@branch_id=2498] Main.spark__branch).bool__content <- ( (Boolean.andb((( [#"main.adb" 34 0 0] begin ensures {true} let _ = (let _ = ([#"main.adb" 34 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:34:27] [@GP_Shape:if__B_1_declblk__if__and__cmp__typeconv__length_ref__call_argument] [@GP_Id:2] [@comment:         if (MyCommandLine.Argument(1)'Length = 4 and                           ^ main.adb:34:27:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
     ()))
     in () end ;
    (Standard__string.length(([#"main.adb" 34 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:34:27] [@GP_Shape:if__B_1_declblk__if__and__cmp__typeconv__length_ref__call_argument] [@GP_Id:2] [@comment:         if (MyCommandLine.Argument(1)'Length = 4 and                           ^ main.adb:34:27:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) = (4 : int))) (( (let i =  (val _f : int
    in _f) in (
     (if ((Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Main__B_1__temp_pin.temp_pin.Array__Int__Standard__character.map__content in (
      ()))
      in () end ;
     Main__B_1__temp_pin.temp_pin__first ))) <= i)) ((i <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Main__B_1__temp_pin.temp_pin.Array__Int__Standard__character.map__content in (
      ()))
      in () end ;
     Main__B_1__temp_pin.temp_pin__last ))))))) then (
       begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_1__temp_pin.temp_pin.Array__Int__Standard__character.map__content) ((  assert {  ([#"main.adb" 35 0 0] ( [@comment:               (for all I in Temp_Pin'Range => Temp_Pin(I)                                                         ^ main.adb:35:57:VC_INDEX_CHECK] [@GP_Shape:if__B_1_declblk__if__and__forall__and__cmp__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:3] [@GP_Sloc:main.adb:35:57] ( ((Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__last)) ) )) };
      i ))))) >= (48 : int))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_1__temp_pin.temp_pin.Array__Int__Standard__character.map__content) ((  assert {  ([#"main.adb" 36 0 0] ( [@GP_Shape:if__B_1_declblk__if__and__forall__and__cmp__ixdcomp] [@comment:                >= '0' and Temp_Pin(I) <= '9')) then                                     ^ main.adb:36:37:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:4] [@GP_Sloc:main.adb:36:37] ( ((Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__last)) ) )) };
      i ))))) <= (57 : int)))) in (
       ()))
       in () end ))))
    ;
     (val _f : bool
    ensures { ( (result = True) <-> (forall i   [@model_trace:2510] [@name:I]  : int.
     ( ( ((Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_1__temp_pin.temp_pin__last)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_1__temp_pin.temp_pin.Array__Int__Standard__character.map__content i)) >= (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_1__temp_pin.temp_pin.Array__Int__Standard__character.map__content i)) <= (57 : int)) ) )) )} 
    in _f) ))) )));
    ( [@branch_id=2498] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:main.adb:37:47] ([#"main.adb" 37 0 0] ()) );
     ( [@GP_Sloc:main.adb:37:61] ([#"main.adb" 37 0 0] ()) );
     ( [@GP_Sloc:main.adb:37:28] ([#"main.adb" 37 0 0] ()) );
     ( [@GP_Sloc:main.adb:37:28] ([#"main.adb" 37 0 0] ( ([#"main.adb" 37 0 0] ( [@comment:            PasswordManager.Init(MyCommandLine.Argument(1), PM_Information);                            ^ main.adb:37:28:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__B_1_declblk__if__call_init] [@vc:annotation] [@GP_Sloc:main.adb:37:28] [@GP_Id:1] (Passwordmanager__init___axiom.init(([#"main.adb" 37 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__B_1_declblk__if__call_init__call_argument] [@GP_Sloc:main.adb:37:47] [@vc:annotation] [@comment:            PasswordManager.Init(MyCommandLine.Argument(1), PM_Information);                                               ^ main.adb:37:47:VC_PRECONDITION] [@GP_Id:0] (Mycommandline__argument___axiom.argument((1 : int))) ))) (Main__pm_information.pm_information__split_fields)) )) )) ) )) else (
     ( ();
     ( [@GP_Sloc:main.adb:39:13] ([#"main.adb" 39 0 0] ()) );
     ( [@GP_Sloc:main.adb:39:13] ([#"main.adb" 39 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_466.temp___String_Literal_466(()))) ((1 : int)) ((33 : int))))) )) );
     ( [@GP_Sloc:main.adb:40:13] ([#"main.adb" 40 0 0] [#"main.adb" 40 0 0] raise Return__exc) ) )))) ) )) ) )) else (
    ( ();
    ( [@GP_Sloc:main.adb:45:7] ([#"main.adb" 45 0 0] ()) );
    ( [@GP_Sloc:main.adb:45:7] ([#"main.adb" 45 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_468.temp___String_Literal_468(()))) ((1 : int)) ((33 : int))))) )) );
    ( [@GP_Sloc:main.adb:46:7] ([#"main.adb" 46 0 0] [#"main.adb" 46 0 0] raise Return__exc) ) )))) );
   ( [@GP_Sloc:main.adb:50:15] ([#"main.adb" 50 0 0] ( () (* Translation of an Ada loop from main.adb:50 *)
   ;
   (if ((Boolean.of_int((1 : int)))) then (
    [#"main.adb" 50 0 0] try
     [#"main.adb" 50 0 0] try
      ( [#"main.adb" 50 0 0] begin ensures {true} let _ = (let _ = { Passwordmanager__information.__split_fields = Main__pm_information.pm_information__split_fields.Passwordmanager__information.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___506 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 50 0 0] (val _f : Passwordmanager__information.information
      ensures {[#"main.adb" 50 0 0] (result = { Passwordmanager__information.__split_fields = Main__pm_information.pm_information__split_fields.Passwordmanager__information.__split_fields__content })} 
      in _f) in (
       ( [#"main.adb" 50 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } in (
        ()))
        in () end ;
       (let temp___505 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 50 0 0] (val _f : Main__lines__mystring.mystring
       ensures {[#"main.adb" 50 0 0] (result = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })} 
       in _f) in (
        ( [#"main.adb" 50 0 0] begin ensures {true} let _ = (let _ = Main__numtokens.numtokens.int__content in (
         ()))
         in () end ;
        (let temp___504 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 50 0 0] (val _f : int
        ensures {[#"main.adb" 50 0 0] (result = Main__numtokens.numtokens.int__content)} 
        in _f) in (
         ( [#"main.adb" 50 0 0] begin ensures {true} let _ = (let _ = Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content in (
          ()))
          in () end ;
         (let temp___503 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 50 0 0] (val _f : Array__Int__Mystringtokeniser__tokenextent.map
         ensures {[#"main.adb" 50 0 0] (result = Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content)} 
         in _f) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:50 *)
          ;
          () (* While loop translating the Ada loop from main.adb:50 *)
          ;
          [#"main.adb" 50 0 0] while True do
           ( () (* Assume implicit invariants from the loop main.adb:50 *)
           ;
           [#"main.adb" 50 0 0] assume { [#"main.adb" 50 0 0] ( ( ( ( ( ( ( ( true /\ (Main__TtokenslistS___axiom.dynamic_invariant Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content True True True True) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ (Passwordmanager__information___axiom.dynamic_invariant { Passwordmanager__information.__split_fields = Main__pm_information.pm_information__split_fields.Passwordmanager__information.__split_fields__content } False True True True) )/\true ) };
           () (* Check for absence of RTE in the invariant of loop main.adb:50 *)
           ;
           () (* Loop statements appearing after the loop invariant of loop main.adb:50 *)
           ;
           ();
           ( [@GP_Sloc:main.adb:52:39] ([#"main.adb" 52 0 0] ()) );
           ( [@GP_Sloc:main.adb:52:26] ([#"main.adb" 52 0 0] ()) );
           ( [@GP_Sloc:main.adb:52:7] ([#"main.adb" 52 0 0] (if (( ([#"main.adb" 52 0 0] [#"main.adb" 52 0 0] (([@branch_id=2554] Main.spark__branch).bool__content <- ( (Passwordmanager__lock_status___axiom.lock_status({ Passwordmanager__information.__split_fields = Main__pm_information.pm_information__split_fields.Passwordmanager__information.__split_fields__content })) )));
           ( [@branch_id=2554] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:main.adb:53:10] ([#"main.adb" 53 0 0] ()) );
            ( [@GP_Sloc:main.adb:53:10] ([#"main.adb" 53 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_469.temp___String_Literal_469(()))) ((1 : int)) ((10 : int))))) )) );
            ( [@GP_Sloc:main.adb:53:43] ([#"main.adb" 53 0 0] ()) );
            ( [@GP_Sloc:main.adb:53:33] ([#"main.adb" 53 0 0] ()) );
            ( [@GP_Sloc:main.adb:53:33] ([#"main.adb" 53 0 0] ( (Main__lines__get_line___axiom.get_line(Main__s.s__split_fields)) )) ) )) else (
            ( ();
            ( [@GP_Sloc:main.adb:55:10] ([#"main.adb" 55 0 0] ()) );
            ( [@GP_Sloc:main.adb:55:10] ([#"main.adb" 55 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_470.temp___String_Literal_470(()))) ((1 : int)) ((10 : int))))) )) );
            ( [@GP_Sloc:main.adb:55:43] ([#"main.adb" 55 0 0] ()) );
            ( [@GP_Sloc:main.adb:55:33] ([#"main.adb" 55 0 0] ()) );
            ( [@GP_Sloc:main.adb:55:33] ([#"main.adb" 55 0 0] ( (Main__lines__get_line___axiom.get_line(Main__s.s__split_fields)) )) ) )))) );
           ( [@GP_Sloc:main.adb:59:50] ([#"main.adb" 59 0 0] ()) );
           ( [@GP_Sloc:main.adb:59:39] ([#"main.adb" 59 0 0] ()) );
           ( [@GP_Sloc:main.adb:59:53] ([#"main.adb" 59 0 0] ()) );
           ( [@GP_Sloc:main.adb:59:64] ([#"main.adb" 59 0 0] ()) );
           ( [@GP_Sloc:main.adb:59:24] ([#"main.adb" 59 0 0] ()) );
           ( [@GP_Sloc:main.adb:59:24] ([#"main.adb" 59 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content in (
            [#"main.adb" 59 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
             ( ([#"main.adb" 59 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_while__call_tokenise] [@vc:annotation] [@GP_Sloc:main.adb:59:24] [@comment:      MyStringTokeniser.Tokenise(Lines.To_String(S),TokensList,NumTokens);                        ^ main.adb:59:24:VC_PRECONDITION] [@GP_Id:6] (Mystringtokeniser__tokenise___axiom.tokenise((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__TTtokenslistSP1.first))) ((Standard__integer__rep.of_rep(Main__TTtokenslistSP1.last))) (Main__numtokens.numtokens)) ));
              (Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___471 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtokenslistSP1.first) (Main__TTtokenslistSP1.last)) in (
              (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___471) (Mystringtokeniser__tokenarray.first temp___471) Main__TTtokenslistSP1.first)))
              )) )))
           ) );
           ( [@GP_Sloc:main.adb:63:11] ([#"main.adb" 63 0 0] ()) );
           ( [@GP_Sloc:main.adb:63:28] ([#"main.adb" 63 0 0] ()) );
           ( [@GP_Sloc:main.adb:64:30] ([#"main.adb" 64 0 0] ()) );
           ( [@GP_Sloc:main.adb:64:19] ([#"main.adb" 64 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:30] ([#"main.adb" 65 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:19] ([#"main.adb" 65 0 0] ()) );
           ( [@GP_Sloc:main.adb:63:7] ([#"main.adb" 63 0 0] (if (( ([#"main.adb" 63 0 0] [#"main.adb" 63 0 0] (([@branch_id=2587] Main.spark__branch).bool__content <- ( (Boolean.orb((Boolean.orb((Boolean.orb((Main__numtokens.numtokens.int__content < (1 : int))) ((Main__numtokens.numtokens.int__content > (3 : int))))) ((( [#"main.adb" 63 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })) in (
            ()))
            in () end ;
           (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })))) ) < (1 : int))))) ((([#"main.adb" 65 0 0] ( [@comment:          or Lines.To_String(S)'Length > Utility.Max_Line_Length) then                                ^ main.adb:65:32:VC_RANGE_CHECK] [@GP_Id:42] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_while__if__or__cmp__typeconv__length_ref] [@GP_Sloc:main.adb:65:32] (Standard__integer.range_check_(( [#"main.adb" 65 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })) in (
            ()))
            in () end ;
           (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })))) ))) )) > (2048 : int)))) )));
           ( [@branch_id=2587] Main.spark__branch ).bool__content )) then (
             raise Temp___exception_473) else (
            ( ();
            ( [@GP_Sloc:main.adb:69:10] ([#"main.adb" 69 0 0] ( ();
            ([#"main.adb" 72 0 0] ());
            ([#"main.adb" 72 0 0] ());
            ([#"main.adb" 72 0 0] ());
            ([#"main.adb" 72 0 0] ());
            ([#"main.adb" 71 0 0] ( (let main__B_3__command__assume = (Ada__characters__handling__to_lower__2___axiom.to_lower__2((Main__lines__to_string___axiom.to_string(([#"main.adb" 72 0 0] ( [@comment:              To_Lower(Lines.To_String(Lines.Substring(S,TokensList(1).Start,                                             ^ main.adb:72:45:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:41] [@vc:annotation] [@GP_Sloc:main.adb:72:45] [@GP_Shape:L_2_while__if__B_3_declblk__command_decl__call_to_lower__2__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 73 0 0] ( [@comment:                       TokensList(1).Start+TokensList(1).Length-1)));                                                                ^ main.adb:73:64:VC_RANGE_CHECK] [@GP_Sloc:main.adb:73:64] [@GP_Id:40] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__command_decl__call_to_lower__2__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 73 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__if__B_3_declblk__command_decl__call_to_lower__2__call_to_string__call_substring__sub__add] [@GP_Id:39] [@GP_Sloc:main.adb:73:43] [@comment:                       TokensList(1).Start+TokensList(1).Length-1)));                                           ^ main.adb:73:43:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) in (
             (  (Main__B_3__command.command.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__command__assume)) ));
              assume {  ((Standard__integer__rep.to_rep(Main__B_3__command.command__first)) = (Standard__string.first(main__B_3__command__assume))) };
              assume {  ((Standard__integer__rep.to_rep(Main__B_3__command.command__last)) = (Standard__string.last(main__B_3__command__assume))) } )))
            ;
             assume {  (if (False) then (
             true) else (
             (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__command.command__first) (Standard__integer__rep.to_rep Main__B_3__command.command__last)))) } ));
            ([#"main.adb" 79 0 0] ());
            ([#"main.adb" 100 0 0] ());
            ([#"main.adb" 126 0 0] ());
            ([#"main.adb" 145 0 0] ());
            ([#"main.adb" 168 0 0] ());
            ();
            ( [@GP_Sloc:main.adb:77:17] ([#"main.adb" 77 0 0] ()) );
            ( [@GP_Sloc:main.adb:77:37] ([#"main.adb" 77 0 0] ()) );
            ( [@GP_Sloc:main.adb:77:13] ([#"main.adb" 77 0 0] (if (( ([#"main.adb" 77 0 0] [#"main.adb" 77 0 0] (([@branch_id=2663] Main.spark__branch).bool__content <- ( (Boolean.andb((Array__Int__Standard__character.bool_eq(Main__B_3__command.command.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__command.command__first))) ((Standard__integer__rep.to_rep(Main__B_3__command.command__last))) (Main__getdb.getdb) (Main__TTgetdbSP1.first) (Main__TTgetdbSP1.last))) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
            ( [@branch_id=2663] Main.spark__branch ).bool__content )) then (
             ( ();
             ( [@GP_Sloc:main.adb:79:16] ([#"main.adb" 79 0 0] ( ();
             ([#"main.adb" 82 0 0] ());
             ([#"main.adb" 82 0 0] ());
             ([#"main.adb" 81 0 0] ());
             ([#"main.adb" 81 0 0] ( (let main__B_3__B_4__tokurl__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 82 0 0] ( [@GP_Id:11] [@GP_Reason:VC_PRECONDITION] [@comment:                    (Lines.Substring(S,TokensList(2).Start,                           ^ main.adb:82:27:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_4_declblk__tokurl_decl__call_to_string__call_substring] [@GP_Sloc:main.adb:82:27] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 83 0 0] ( [@GP_Id:10] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_4_declblk__tokurl_decl__call_to_string__call_substring__sub] [@GP_Sloc:main.adb:83:62] [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                                              ^ main.adb:83:62:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 83 0 0] ( [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                         ^ main.adb:83:41:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_4_declblk__tokurl_decl__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:83:41] [@GP_Id:9] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
              (  (Main__B_3__B_4__tokurl.tokurl.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_4__tokurl__assume)) ));
               assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__tokurl.tokurl__first)) = (Standard__string.first(main__B_3__B_4__tokurl__assume))) };
               assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__tokurl.tokurl__last)) = (Standard__string.last(main__B_3__B_4__tokurl__assume))) } )))
             ;
              assume {  (if (False) then (
              true) else (
              (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_4__tokurl.tokurl__first) (Standard__integer__rep.to_rep Main__B_3__B_4__tokurl.tokurl__last)))) } ));
             ();
             ( [@GP_Sloc:main.adb:87:23] ([#"main.adb" 87 0 0] ()) );
             ( [@GP_Sloc:main.adb:87:19] ([#"main.adb" 87 0 0] (if (( ([#"main.adb" 87 0 0] [#"main.adb" 87 0 0] (([@branch_id=2713] Main.spark__branch).bool__content <- ( (([#"main.adb" 87 0 0] ( [@GP_Sloc:main.adb:87:29] [@comment:                  if (TokUrl'Length <= PasswordDatabase.Max_URL_Length) then                             ^ main.adb:87:29:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_4_declblk__if__cmp__typeconv__length_ref] [@GP_Id:8] (Standard__integer.range_check_(( [#"main.adb" 87 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_4__tokurl.tokurl.Array__Int__Standard__character.map__content in (
              ()))
              in () end ;
             (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_4__tokurl.tokurl__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__tokurl.tokurl__last)))) ))) )) <= (1024 : int)) )));
             ( [@branch_id=2713] Main.spark__branch ).bool__content )) then (
              ( ();
              ( [@GP_Sloc:main.adb:89:25] ([#"main.adb" 89 0 0] ()) );
              ( [@GP_Sloc:main.adb:89:69] ([#"main.adb" 89 0 0] ()) );
              ( [@GP_Sloc:main.adb:89:56] ([#"main.adb" 89 0 0] ()) );
              ( [@GP_Sloc:main.adb:88:37] ([#"main.adb" 88 0 0] ()) );
              ( [@GP_Sloc:main.adb:88:37] ([#"main.adb" 88 0 0] ( (Passwordmanager__execute_get_command___axiom.execute_get_command({ Passwordmanager__information.__split_fields = Main__pm_information.pm_information__split_fields.Passwordmanager__information.__split_fields__content }) (([#"main.adb" 89 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_4_declblk__if__call_execute_get_command__call_from_string__2] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                       (PM_Information,PasswordDatabase.From_String(TokUrl));                                                        ^ main.adb:89:56:VC_PRECONDITION] [@GP_Sloc:main.adb:89:56] [@GP_Id:7] (Passworddatabase__from_string__2___axiom.from_string__2((Standard__string.of_array(Main__B_3__B_4__tokurl.tokurl.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__tokurl.tokurl__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__tokurl.tokurl__last)))))) )))) )) ) )) else (
               raise Temp___exception_475))) ) )) ) )) else (
             ( [@GP_Sloc:main.adb:99:13] (if (( ([#"main.adb" 99 0 0] [#"main.adb" 99 0 0] (([@branch_id=2736] Main.spark__branch).bool__content <- ( (Boolean.andb((Array__Int__Standard__character.bool_eq(Main__B_3__command.command.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__command.command__first))) ((Standard__integer__rep.to_rep(Main__B_3__command.command__last))) (Main__putdb.putdb) (Main__TTputdbSP1.first) (Main__TTputdbSP1.last))) ((Main__numtokens.numtokens.int__content = (3 : int)))) )));
             ( [@branch_id=2736] Main.spark__branch ).bool__content )) then (
              ( ();
              ( [@GP_Sloc:main.adb:100:16] ([#"main.adb" 100 0 0] ( ();
              ([#"main.adb" 103 0 0] ());
              ([#"main.adb" 103 0 0] ());
              ([#"main.adb" 102 0 0] ());
              ([#"main.adb" 102 0 0] ( (let main__B_3__B_5__tokurl__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 103 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:103:27] [@vc:annotation] [@GP_Id:35] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__tokurl_decl__call_to_string__call_substring] [@comment:                    (Lines.Substring(S,TokensList(2).Start,                           ^ main.adb:103:27:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 104 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__tokurl_decl__call_to_string__call_substring__sub] [@vc:annotation] [@GP_Sloc:main.adb:104:62] [@GP_Id:34] [@GP_Reason:VC_RANGE_CHECK] [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                                              ^ main.adb:104:62:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 104 0 0] ( [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                         ^ main.adb:104:41:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__tokurl_decl__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:33] [@GP_Sloc:main.adb:104:41] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
               (  (Main__B_3__B_5__tokurl.tokurl.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_5__tokurl__assume)) ));
                assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokurl.tokurl__first)) = (Standard__string.first(main__B_3__B_5__tokurl__assume))) };
                assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokurl.tokurl__last)) = (Standard__string.last(main__B_3__B_5__tokurl__assume))) } )))
              ;
               assume {  (if (False) then (
               true) else (
               (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_5__tokurl.tokurl__first) (Standard__integer__rep.to_rep Main__B_3__B_5__tokurl.tokurl__last)))) } ));
              ([#"main.adb" 107 0 0] ());
              ([#"main.adb" 107 0 0] ());
              ([#"main.adb" 106 0 0] ());
              ([#"main.adb" 106 0 0] ( (let main__B_3__B_5__tokpwd__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 107 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                    (Lines.Substring(S,TokensList(3).Start,                           ^ main.adb:107:27:VC_PRECONDITION] [@vc:annotation] [@GP_Id:38] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__tokpwd_decl__call_to_string__call_substring] [@GP_Sloc:main.adb:107:27] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 108 0 0] ( [@GP_Sloc:main.adb:108:62] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__tokpwd_decl__call_to_string__call_substring__sub] [@vc:annotation] [@comment:                     TokensList(3).Start+TokensList(3).Length-1));                                                              ^ main.adb:108:62:VC_RANGE_CHECK] [@GP_Id:37] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 108 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__tokpwd_decl__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:108:41] [@GP_Id:36] [@comment:                     TokensList(3).Start+TokensList(3).Length-1));                                         ^ main.adb:108:41:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
               (  (Main__B_3__B_5__tokpwd.tokpwd.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_5__tokpwd__assume)) ));
                assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokpwd.tokpwd__first)) = (Standard__string.first(main__B_3__B_5__tokpwd__assume))) };
                assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokpwd.tokpwd__last)) = (Standard__string.last(main__B_3__B_5__tokpwd__assume))) } )))
              ;
               assume {  (if (False) then (
               true) else (
               (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_5__tokpwd.tokpwd__first) (Standard__integer__rep.to_rep Main__B_3__B_5__tokpwd.tokpwd__last)))) } ));
              ();
              ( [@GP_Sloc:main.adb:112:23] ([#"main.adb" 112 0 0] ()) );
              ( [@GP_Sloc:main.adb:113:25] ([#"main.adb" 113 0 0] ()) );
              ( [@GP_Sloc:main.adb:112:19] ([#"main.adb" 112 0 0] (if (( ([#"main.adb" 112 0 0] [#"main.adb" 112 0 0] (([@branch_id=2822] Main.spark__branch).bool__content <- ( (Boolean.andb((([#"main.adb" 112 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__if__and__cmp__typeconv__length_ref] [@vc:annotation] [@comment:                  if (TokUrl'Length <= PasswordDatabase.Max_URL_Length and                             ^ main.adb:112:29:VC_RANGE_CHECK] [@GP_Id:31] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:112:29] (Standard__integer.range_check_(( [#"main.adb" 112 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_5__tokurl.tokurl.Array__Int__Standard__character.map__content in (
               ()))
               in () end ;
              (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_5__tokurl.tokurl__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokurl.tokurl__last)))) ))) )) <= (1024 : int))) ((([#"main.adb" 113 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__if__and__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Id:32] [@GP_Reason:VC_RANGE_CHECK] [@comment:                        TokPwd'Length <= PasswordDatabase.Max_Password_Length) then                               ^ main.adb:113:31:VC_RANGE_CHECK] [@GP_Sloc:main.adb:113:31] (Standard__integer.range_check_(( [#"main.adb" 113 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_5__tokpwd.tokpwd.Array__Int__Standard__character.map__content in (
               ()))
               in () end ;
              (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_5__tokpwd.tokpwd__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokpwd.tokpwd__last)))) ))) )) <= (100 : int)))) )));
              ( [@branch_id=2822] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:115:25] ([#"main.adb" 115 0 0] ()) );
               ( [@GP_Sloc:main.adb:115:69] ([#"main.adb" 115 0 0] ()) );
               ( [@GP_Sloc:main.adb:115:56] ([#"main.adb" 115 0 0] ()) );
               ( [@GP_Sloc:main.adb:116:54] ([#"main.adb" 116 0 0] ()) );
               ( [@GP_Sloc:main.adb:116:41] ([#"main.adb" 116 0 0] ()) );
               ( [@GP_Sloc:main.adb:114:37] ([#"main.adb" 114 0 0] ()) );
               ( [@GP_Sloc:main.adb:114:37] ([#"main.adb" 114 0 0] ( (Passwordmanager__execute_put_command___axiom.execute_put_command(Main__pm_information.pm_information__split_fields) (([#"main.adb" 115 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                       (PM_Information,PasswordDatabase.From_String(TokUrl),                                                        ^ main.adb:115:56:VC_PRECONDITION] [@GP_Sloc:main.adb:115:56] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__if__call_execute_put_command__call_from_string__2] [@GP_Id:29] (Passworddatabase__from_string__2___axiom.from_string__2((Standard__string.of_array(Main__B_3__B_5__tokurl.tokurl.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokurl.tokurl__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokurl.tokurl__last)))))) ))) (([#"main.adb" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                        PasswordDatabase.From_String(TokPwd));                                         ^ main.adb:116:41:VC_PRECONDITION] [@vc:annotation] [@GP_Id:30] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_5_declblk__if__call_execute_put_command__call_from_string] [@GP_Sloc:main.adb:116:41] (Passworddatabase__from_string___axiom.from_string((Standard__string.of_array(Main__B_3__B_5__tokpwd.tokpwd.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokpwd.tokpwd__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokpwd.tokpwd__last)))))) )))) )) ) )) else (
                raise Temp___exception_495))) ) )) ) )) else (
              ( [@GP_Sloc:main.adb:125:13] (if (( ([#"main.adb" 125 0 0] [#"main.adb" 125 0 0] (([@branch_id=2858] Main.spark__branch).bool__content <- ( (Boolean.andb((Array__Int__Standard__character.bool_eq(Main__B_3__command.command.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__command.command__first))) ((Standard__integer__rep.to_rep(Main__B_3__command.command__last))) (Main__remdb.remdb) (Main__TTremdbSP1.first) (Main__TTremdbSP1.last))) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
              ( [@branch_id=2858] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:126:16] ([#"main.adb" 126 0 0] ( ();
               ([#"main.adb" 129 0 0] ());
               ([#"main.adb" 129 0 0] ());
               ([#"main.adb" 128 0 0] ());
               ([#"main.adb" 128 0 0] ( (let main__B_3__B_6__tokurl__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 129 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_6_declblk__tokurl_decl__call_to_string__call_substring] [@vc:annotation] [@GP_Sloc:main.adb:129:27] [@GP_Id:28] [@comment:                    (Lines.Substring(S,TokensList(2).Start,                           ^ main.adb:129:27:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 130 0 0] ( [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                                              ^ main.adb:130:62:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_6_declblk__tokurl_decl__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:27] [@GP_Sloc:main.adb:130:62] (Standard__positive.range_check_((([#"main.adb" 130 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_6_declblk__tokurl_decl__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:130:41] [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                         ^ main.adb:130:41:VC_OVERFLOW_CHECK] [@GP_Id:26] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                (  (Main__B_3__B_6__tokurl.tokurl.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_6__tokurl__assume)) ));
                 assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_6__tokurl.tokurl__first)) = (Standard__string.first(main__B_3__B_6__tokurl__assume))) };
                 assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_6__tokurl.tokurl__last)) = (Standard__string.last(main__B_3__B_6__tokurl__assume))) } )))
               ;
                assume {  (if (False) then (
                true) else (
                (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_6__tokurl.tokurl__first) (Standard__integer__rep.to_rep Main__B_3__B_6__tokurl.tokurl__last)))) } ));
               ();
               ( [@GP_Sloc:main.adb:133:23] ([#"main.adb" 133 0 0] ()) );
               ( [@GP_Sloc:main.adb:133:19] ([#"main.adb" 133 0 0] (if (( ([#"main.adb" 133 0 0] [#"main.adb" 133 0 0] (([@branch_id=2908] Main.spark__branch).bool__content <- ( (([#"main.adb" 133 0 0] ( [@comment:                  if (TokUrl'Length <= PasswordDatabase.Max_URL_Length) then                             ^ main.adb:133:29:VC_RANGE_CHECK] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_6_declblk__if__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Sloc:main.adb:133:29] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:25] (Standard__integer.range_check_(( [#"main.adb" 133 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_6__tokurl.tokurl.Array__Int__Standard__character.map__content in (
                ()))
                in () end ;
               (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_6__tokurl.tokurl__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_6__tokurl.tokurl__last)))) ))) )) <= (1024 : int)) )));
               ( [@branch_id=2908] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:135:25] ([#"main.adb" 135 0 0] ()) );
                ( [@GP_Sloc:main.adb:135:69] ([#"main.adb" 135 0 0] ()) );
                ( [@GP_Sloc:main.adb:135:56] ([#"main.adb" 135 0 0] ()) );
                ( [@GP_Sloc:main.adb:134:37] ([#"main.adb" 134 0 0] ()) );
                ( [@GP_Sloc:main.adb:134:37] ([#"main.adb" 134 0 0] ( (Passwordmanager__execute_rem_command___axiom.execute_rem_command(Main__pm_information.pm_information__split_fields) (([#"main.adb" 135 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:135:56] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_6_declblk__if__call_execute_rem_command__call_from_string__2] [@GP_Id:24] [@comment:                       (PM_Information,PasswordDatabase.From_String(TokUrl));                                                        ^ main.adb:135:56:VC_PRECONDITION] (Passworddatabase__from_string__2___axiom.from_string__2((Standard__string.of_array(Main__B_3__B_6__tokurl.tokurl.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_6__tokurl.tokurl__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_6__tokurl.tokurl__last)))))) )))) )) ) )) else (
                 raise Temp___exception_490))) ) )) ) )) else (
               ( [@GP_Sloc:main.adb:144:13] (if (( ([#"main.adb" 144 0 0] [#"main.adb" 144 0 0] (([@branch_id=2931] Main.spark__branch).bool__content <- ( (Boolean.andb((Array__Int__Standard__character.bool_eq(Main__B_3__command.command.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__command.command__first))) ((Standard__integer__rep.to_rep(Main__B_3__command.command__last))) (Main__unlock.unlock) (Main__TTunlockSP1.first) (Main__TTunlockSP1.last))) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
               ( [@branch_id=2931] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:145:19] ([#"main.adb" 145 0 0] ( ();
                ([#"main.adb" 149 0 0] ());
                ([#"main.adb" 148 0 0] ());
                ([#"main.adb" 147 0 0] ());
                ([#"main.adb" 147 0 0] ( (let main__B_3__B_7__tokpin__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 148 0 0] ( [@GP_Sloc:main.adb:148:30] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_7_declblk__tokpin_decl__call_to_string__call_substring] [@GP_Id:23] [@comment:                       (Lines.Substring                              ^ main.adb:148:30:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 149 0 0] ( [@comment:                          (S, TokensList(2).Start,TokensList (2).Start + TokensList (2).Length - 1));                                                                                                ^ main.adb:149:96:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_7_declblk__tokpin_decl__call_to_string__call_substring__sub] [@GP_Id:22] [@GP_Sloc:main.adb:149:96] (Standard__positive.range_check_((([#"main.adb" 149 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_7_declblk__tokpin_decl__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:149:72] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                          (S, TokensList(2).Start,TokensList (2).Start + TokensList (2).Length - 1));                                                                        ^ main.adb:149:72:VC_OVERFLOW_CHECK] [@GP_Id:21] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                 (  (Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_7__tokpin__assume)) ));
                  assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_7__tokpin.tokpin__first)) = (Standard__string.first(main__B_3__B_7__tokpin__assume))) };
                  assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_7__tokpin.tokpin__last)) = (Standard__string.last(main__B_3__B_7__tokpin__assume))) } )))
                ;
                 assume {  (if (False) then (
                 true) else (
                 (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__first) (Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__last)))) } ));
                ();
                ( [@GP_Sloc:main.adb:153:23] ([#"main.adb" 153 0 0] ()) );
                ( [@GP_Sloc:main.adb:153:19] ([#"main.adb" 153 0 0] (if (( ([#"main.adb" 153 0 0] [#"main.adb" 153 0 0] (([@branch_id=2981] Main.spark__branch).bool__content <- ( (Boolean.andb((( [#"main.adb" 153 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content in (
                 ()))
                 in () end ;
                (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_7__tokpin.tokpin__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_7__tokpin.tokpin__last)))) ) = (4 : int))) (( (let i = [#"main.adb" 153 0 0] (val _f : int
                in _f) in (
                 (if ((Boolean.andb(((Standard__integer__rep.to_rep(( [#"main.adb" 153 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content in (
                  ()))
                  in () end ;
                 Main__B_3__B_7__tokpin.tokpin__first ))) <= i)) ((i <= (Standard__integer__rep.to_rep(( [#"main.adb" 153 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content in (
                  ()))
                  in () end ;
                 Main__B_3__B_7__tokpin.tokpin__last ))))))) then (
                  [#"main.adb" 153 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content) (( [#"main.adb" 153 0 0] assert { [#"main.adb" 153 0 0] ([#"main.adb" 155 0 0] ( [@GP_Sloc:main.adb:155:35] [@GP_Id:19] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_7_declblk__if__and__forall__and__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                           TokPin(I) >= '0' and TokPin(I) <= '9')) then                                   ^ main.adb:155:35:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__last)) ) )) };
                  i ))))) >= (48 : int))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content) ((  assert {  ([#"main.adb" 155 0 0] ( [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_7_declblk__if__and__forall__and__cmp__ixdcomp] [@comment:                           TokPin(I) >= '0' and TokPin(I) <= '9')) then                                                        ^ main.adb:155:56:VC_INDEX_CHECK] [@GP_Sloc:main.adb:155:56] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:20] ( ((Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__last)) ) )) };
                  i ))))) <= (57 : int)))) in (
                   ()))
                   in () end ))))
                ;
                 (val _f : bool
                ensures { ( (result = True) <-> (forall i   [@model_trace:2989] [@name:I]  : int.
                 ( ( ((Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_7__tokpin.tokpin__last)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content i)) >= (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content i)) <= (57 : int)) ) )) )} 
                in _f) ))) )));
                ( [@branch_id=2981] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:158:25] ([#"main.adb" 158 0 0] ()) );
                 ( [@GP_Sloc:main.adb:158:57] ([#"main.adb" 158 0 0] ()) );
                 ( [@GP_Sloc:main.adb:158:44] ([#"main.adb" 158 0 0] ()) );
                 ( [@GP_Sloc:main.adb:157:37] ([#"main.adb" 157 0 0] ()) );
                 ( [@GP_Sloc:main.adb:157:37] ([#"main.adb" 157 0 0] ( (Passwordmanager__execute_unlock___axiom.execute_unlock(Main__pm_information.pm_information__split_fields) (([#"main.adb" 158 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:18] [@vc:annotation] [@comment:                       (PM_Information, PIN.From_String(TokPin));                                            ^ main.adb:158:44:VC_PRECONDITION] [@GP_Sloc:main.adb:158:44] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_7_declblk__if__call_execute_unlock__call_from_string] (Pin__from_string___axiom.from_string((Standard__string.of_array(Main__B_3__B_7__tokpin.tokpin.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_7__tokpin.tokpin__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_7__tokpin.tokpin__last)))))) )))) )) ) )) else (
                  raise Temp___exception_485))) ) )) ) )) else (
                ( [@GP_Sloc:main.adb:167:13] (if (( ([#"main.adb" 167 0 0] [#"main.adb" 167 0 0] (([@branch_id=3025] Main.spark__branch).bool__content <- ( (Boolean.andb((Array__Int__Standard__character.bool_eq(Main__B_3__command.command.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__command.command__first))) ((Standard__integer__rep.to_rep(Main__B_3__command.command__last))) (Main__lock.lock) (Main__TTlockSP1.first) (Main__TTlockSP1.last))) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
                ( [@branch_id=3025] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:168:16] ([#"main.adb" 168 0 0] ( ();
                 ([#"main.adb" 170 0 0] ());
                 ([#"main.adb" 170 0 0] ());
                 ([#"main.adb" 169 0 0] ());
                 ([#"main.adb" 169 0 0] ( (let main__B_3__B_8__tokpin__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 170 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_8_declblk__tokpin_decl__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@GP_Id:17] [@comment:                    (Lines.Substring(S,TokensList(2).Start,                           ^ main.adb:170:27:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:170:27] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 171 0 0] ( [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                                              ^ main.adb:171:62:VC_RANGE_CHECK] [@GP_Id:16] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:171:62] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_8_declblk__tokpin_decl__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 171 0 0] ( [@GP_Shape:L_2_while__if__B_3_declblk__if__B_8_declblk__tokpin_decl__call_to_string__call_substring__sub__add] [@GP_Id:15] [@GP_Sloc:main.adb:171:41] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                     TokensList(2).Start+TokensList(2).Length-1));                                         ^ main.adb:171:41:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__tokenslist.tokenslist.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  (  (Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_8__tokpin__assume)) ));
                   assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_8__tokpin.tokpin__first)) = (Standard__string.first(main__B_3__B_8__tokpin__assume))) };
                   assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_8__tokpin.tokpin__last)) = (Standard__string.last(main__B_3__B_8__tokpin__assume))) } )))
                 ;
                  assume {  (if (False) then (
                  true) else (
                  (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__first) (Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__last)))) } ));
                 ();
                 ( [@GP_Sloc:main.adb:174:23] ([#"main.adb" 174 0 0] ()) );
                 ( [@GP_Sloc:main.adb:174:19] ([#"main.adb" 174 0 0] (if (( ([#"main.adb" 174 0 0] [#"main.adb" 174 0 0] (([@branch_id=3075] Main.spark__branch).bool__content <- ( (Boolean.andb((( [#"main.adb" 174 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content in (
                  ()))
                  in () end ;
                 (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_8__tokpin.tokpin__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_8__tokpin.tokpin__last)))) ) = (4 : int))) (( (let i = [#"main.adb" 174 0 0] (val _f : int
                 in _f) in (
                  (if ((Boolean.andb(((Standard__integer__rep.to_rep(( [#"main.adb" 174 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  Main__B_3__B_8__tokpin.tokpin__first ))) <= i)) ((i <= (Standard__integer__rep.to_rep(( [#"main.adb" 174 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  Main__B_3__B_8__tokpin.tokpin__last ))))))) then (
                   [#"main.adb" 174 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content) (( [#"main.adb" 174 0 0] assert { [#"main.adb" 174 0 0] ([#"main.adb" 176 0 0] ( [@GP_Id:13] [@comment:                           TokPin(I) >= '0' and TokPin(I) <= '9')) then                                   ^ main.adb:176:35:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_8_declblk__if__and__forall__and__cmp__ixdcomp] [@GP_Sloc:main.adb:176:35] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__last)) ) )) };
                   i ))))) >= (48 : int))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content) ((  assert {  ([#"main.adb" 176 0 0] ( [@comment:                           TokPin(I) >= '0' and TokPin(I) <= '9')) then                                                        ^ main.adb:176:56:VC_INDEX_CHECK] [@GP_Sloc:main.adb:176:56] [@GP_Id:14] [@vc:annotation] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_8_declblk__if__and__forall__and__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__last)) ) )) };
                   i ))))) <= (57 : int)))) in (
                    ()))
                    in () end ))))
                 ;
                  (val _f : bool
                 ensures { ( (result = True) <-> (forall i   [@model_trace:3083] [@name:I]  : int.
                  ( ( ((Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_8__tokpin.tokpin__last)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content i)) >= (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content i)) <= (57 : int)) ) )) )} 
                 in _f) ))) )));
                 ( [@branch_id=3075] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:178:54] ([#"main.adb" 178 0 0] ()) );
                  ( [@GP_Sloc:main.adb:179:70] ([#"main.adb" 179 0 0] ()) );
                  ( [@GP_Sloc:main.adb:179:57] ([#"main.adb" 179 0 0] ()) );
                  ( [@GP_Sloc:main.adb:178:40] ([#"main.adb" 178 0 0] ()) );
                  ( [@GP_Sloc:main.adb:178:40] ([#"main.adb" 178 0 0] ( (Passwordmanager__execute_lock___axiom.execute_lock(Main__pm_information.pm_information__split_fields) (([#"main.adb" 179 0 0] ( [@GP_Id:12] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:179:57] [@GP_Shape:L_2_while__if__B_3_declblk__if__B_8_declblk__if__call_execute_lock__call_from_string] [@vc:annotation] [@comment:                                                     PIN.From_String(TokPin));                                                         ^ main.adb:179:57:VC_PRECONDITION] (Pin__from_string___axiom.from_string((Standard__string.of_array(Main__B_3__B_8__tokpin.tokpin.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_8__tokpin.tokpin__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_8__tokpin.tokpin__last)))))) )))) )) ) )) else (
                   raise Temp___exception_480))) ) )) ) )) else (
                  raise Temp___exception_478)) ))) ))) ))) )))) ) )) ) )))) );
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:50 *)
           ;
           (if (not ( (Boolean.of_int((1 : int))) )) then (
             raise Main__L_2.L_2)) )
          done )))
          )))
         )))
        )))
       )
     with
      Temp___exception_478 -> ( ();
      ( [@GP_Sloc:main.adb:190:19] ([#"main.adb" 190 0 0] ()) );
      ( [@GP_Sloc:main.adb:190:19] ([#"main.adb" 190 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_477.temp___String_Literal_477(()))) ((1 : int)) ((33 : int))))) )) );
      ( [@GP_Sloc:main.adb:191:19] ([#"main.adb" 191 0 0] [#"main.adb" 191 0 0] raise Return__exc) ) )| 
      Temp___exception_485 -> ( ();
      ( [@GP_Sloc:main.adb:161:22] ([#"main.adb" 161 0 0] ()) );
      ( [@GP_Sloc:main.adb:161:22] ([#"main.adb" 161 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_484.temp___String_Literal_484(()))) ((1 : int)) ((33 : int))))) )) );
      ( [@GP_Sloc:main.adb:162:22] ([#"main.adb" 162 0 0] [#"main.adb" 162 0 0] raise Return__exc) ) )| 
      Temp___exception_480 -> ( ();
      ( [@GP_Sloc:main.adb:182:22] ([#"main.adb" 182 0 0] ()) );
      ( [@GP_Sloc:main.adb:182:22] ([#"main.adb" 182 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_479.temp___String_Literal_479(()))) ((1 : int)) ((33 : int))))) )) );
      ( [@GP_Sloc:main.adb:183:22] ([#"main.adb" 183 0 0] [#"main.adb" 183 0 0] raise Return__exc) ) )| 
      Temp___exception_490 -> ( ();
      ( [@GP_Sloc:main.adb:138:22] ([#"main.adb" 138 0 0] ()) );
      ( [@GP_Sloc:main.adb:138:22] ([#"main.adb" 138 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_489.temp___String_Literal_489(()))) ((1 : int)) ((33 : int))))) )) );
      ( [@GP_Sloc:main.adb:139:22] ([#"main.adb" 139 0 0] [#"main.adb" 139 0 0] raise Return__exc) ) )| 
      Temp___exception_473 -> ( ();
      ( [@GP_Sloc:main.adb:66:13] ([#"main.adb" 66 0 0] ()) );
      ( [@GP_Sloc:main.adb:66:13] ([#"main.adb" 66 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_472.temp___String_Literal_472(()))) ((1 : int)) ((33 : int))))) )) );
      ( [@GP_Sloc:main.adb:67:13] ([#"main.adb" 67 0 0] [#"main.adb" 67 0 0] raise Return__exc) ) )| 
      Temp___exception_495 -> ( ();
      ( [@GP_Sloc:main.adb:119:22] ([#"main.adb" 119 0 0] ()) );
      ( [@GP_Sloc:main.adb:119:22] ([#"main.adb" 119 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_494.temp___String_Literal_494(()))) ((1 : int)) ((33 : int))))) )) );
      ( [@GP_Sloc:main.adb:120:22] ([#"main.adb" 120 0 0] [#"main.adb" 120 0 0] raise Return__exc) ) )| 
      Temp___exception_475 -> ( ();
      ( [@GP_Sloc:main.adb:92:22] ([#"main.adb" 92 0 0] ()) );
      ( [@GP_Sloc:main.adb:92:22] ([#"main.adb" 92 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_474.temp___String_Literal_474(()))) ((1 : int)) ((33 : int))))) )) );
      ( [@GP_Sloc:main.adb:93:22] ([#"main.adb" 93 0 0] [#"main.adb" 93 0 0] raise Return__exc) ) )
     end
    with
     Main__L_2.L_2 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "lines" defined at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Main__lines__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length___axiom as Main__lines__max_mystring_length___axiom

 let def [#"main.adb" 15 0 0][@GP_Subp:main.adb:15] 
   (__void_param : unit)
  requires { [#"main.adb" 15 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 5 0 0] ());
  ([#"main.adb" 15 0 0] ( [#"main.adb" 15 0 0] begin ensures {true} let _ = (let _ = (2048 : int) in (
   ()))
   in () end ;
  [#"main.adb" 15 0 0] assume { [#"main.adb" 15 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"main.adb" 15 0 0] ());
  ([#"mystring.ads" 1 0 0] ());
  ([#"mystring.ads" 6 0 0] ());
  ([#"mystring.ads" 8 0 0] ());
  ([#"mystring.ads" 9 0 0] ());
  ([#"mystring.ads" 12 0 0] ());
  ([#"mystring.ads" 14 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 16 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 19 0 0] ());
  ([#"mystring.ads" 23 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 27 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ();
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 37 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.adb" 5 0 0] ());
  ([#"mystring.adb" 12 0 0] ());
  ([#"mystring.adb" 28 0 0] ());
  ([#"mystring.adb" 52 0 0] ());
  ([#"mystring.adb" 71 0 0] ());
  ([#"mystring.adb" 83 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:89:1:instantiated:main.adb:15:4] ([#"mystring.adb" 89 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:6 instantiated at main.adb:15, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Main__lines__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [@GP_Subp:mystring.ads:6] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___507 [@mlw:proxy_symbol] [@introduced] =  (val _f : Main__lines__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:23 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length__m as Main__lines__length__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length__m___axiom as Main__lines__length__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__length__result [@model_trace:101927@result] [@model_projected] [@name:Length]  : int__ref 
 
 let def [#"mystring.ads" 23 0 0][@GP_Subp:mystring.ads:23] 
   (__void_param : unit)
  requires { [#"mystring.ads" 23 0 0] true }
  ensures { [#"mystring.ads" 23 0 0] ([#"mystring.ads" 24 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:43] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:main.adb:15:4:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:15:4] [@model_vc_post] ( [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:15:4] [@GP_Pretty_Ada:102323] (main__lines__length__result.int__content <= (2048 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at main.adb:15 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:23 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at main.adb:15 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:23 instantiated at main.adb:15 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:43:8:instantiated:main.adb:15:4] ([#"mystring.ads" 43 0 0] ( [#"mystring.ads" 43 0 0] (main__lines__length__result.int__content <- ( (Main__lines__mystring__T13b__rep.to_rep(Main__lines__length__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ));
   [#"mystring.ads" 43 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (main__lines__length__result.int__content <= (2048 : int)) in (
   ()))
   in () end ;
  main__lines__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:8 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__to_string__result as Main__lines__to_string__result
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS
 use        Main__lines__to_string__T50b as Main__lines__to_string__T50b
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__to_string__m___axiom as Main__lines__to_string__m___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__to_string__result___axiom as Main__lines__to_string__result___axiom
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Main__lines__to_string__T50b___axiom as Main__lines__to_string__T50b___axiom

 val main__lines__to_string__result [@name:To_String] [@model_projected] [@model_trace:101776@result]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 8 0 0][@GP_Subp:mystring.ads:8] 
   (__void_param : unit)
  requires { [#"mystring.ads" 8 0 0] true }
  ensures { [#"mystring.ads" 8 0 0] ([#"mystring.ads" 9 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:15:4] [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:main.adb:15:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:50] ( ( ( [@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:15:4] [@GP_Pretty_Ada:101756] ((Standard__string.length main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_516 : int.
   ( (temp___result_516 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_516 Main__lines__to_string__m.m) ))) ) /\ ( [@GP_Pretty_Ada:101763] [@GP_Sloc:mystring.ads:10:14:instantiated:main.adb:15:4] ((Standard__string.first main__lines__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:101768] [@GP_Sloc:mystring.ads:10:45:instantiated:main.adb:15:4] ((Standard__string.last main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_517 : int.
   ( (temp___result_517 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_517 Main__lines__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at main.adb:15 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:8 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at main.adb:15 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:8 instantiated at main.adb:15 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] begin ensures {true} let _ = (let _ = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 6 0 0] [#"mystring.adb" 6 0 0] (val _f : unit
   requires {( [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Id:44] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:6:7:instantiated:main.adb:15:4] [#"mystring.adb" 6 0 0] ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 6 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (Main__lines__to_string__TresultS___axiom.default_initial_assumption (Main__lines__to_string__TresultS.of_array Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) False) };
   [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (if (False) then (
    true) else (
    ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:8:7:instantiated:main.adb:15:4] ([#"mystring.adb" 8 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:15:4] ([#"mystring.adb" 8 0 0] [#"mystring.adb" 8 0 0] (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Main__lines__to_string__TresultS.to_array (let temp___515 [@mlw:proxy_symbol] [@introduced] = (let temp___514 [@mlw:proxy_symbol] [@introduced] = (let temp___513 [@mlw:proxy_symbol] [@introduced] = (let temp___511 [@mlw:proxy_symbol] [@introduced] = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
   (let temp___510 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___512 [@mlw:proxy_symbol] [@introduced] = Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Main__lines__to_string__T50b.of_array(( [#"mystring.adb" 8 0 0] assert { [#"mystring.adb" 8 0 0] ([#"mystring.adb" 8 0 0] ( [@GP_Id:45] [@vc:annotation] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:15:4] [@GP_Shape:result_assign__typeconv__slice] ( (temp___510 <= temp___511) -> ( ( (Main__lines__TmystringstrD1.first <= temp___510) /\ (temp___510 <= Main__lines__TmystringstrD1.last) ) /\ ( (Main__lines__TmystringstrD1.first <= temp___511) /\ (temp___511 <= Main__lines__TmystringstrD1.last) ) ) ) )) };
    temp___512 )) (temp___510) (temp___511))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@GP_Id:46] [@vc:annotation] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:15:4] [@GP_Shape:result_assign__typeconv__slice] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Main__lines__to_string__T50b.first(temp___513))) ((Main__lines__to_string__T50b.last(temp___513)))) )) };
    (Standard__string.of_array((Main__lines__to_string__T50b.to_array(temp___513))) ((Main__lines__to_string__T50b.first(temp___513))) ((Main__lines__to_string__T50b.last(temp___513)))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@GP_Id:47] [@vc:annotation] [@GP_Shape:result_assign__typeconv] [@GP_Sloc:mystring.adb:8:17:instantiated:main.adb:15:4] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:main.adb:15:4:VC_LENGTH_CHECK] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___514) <= (Standard__string.last temp___514))) then (
     ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ (((Standard__string.last temp___514) - (Standard__string.first temp___514)) = ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) - (1 : int))) )) else (
     ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) < (1 : int)))) ) )) };
    (Main__lines__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___514))) ((Standard__string.first(temp___514))) ((1 : int)))) ((1 : int)) ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:15:4] [@GP_Id:48] [@vc:annotation] [@GP_Shape:result_assign] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:main.adb:15:4:VC_LENGTH_CHECK] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Main__lines__to_string__TresultS.first temp___515) <= (Main__lines__to_string__TresultS.last temp___515))) then (
     ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) <= (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ (((Main__lines__to_string__TresultS.last temp___515) - (Main__lines__to_string__TresultS.first temp___515)) = ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) - (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) < (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first)))) ) )) };
    temp___515 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:9:14:instantiated:main.adb:15:4] ([#"mystring.adb" 9 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:9:7:instantiated:main.adb:15:4] ([#"mystring.adb" 9 0 0] ( [#"mystring.adb" 9 0 0] (main__lines__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____last)))) ));
   [#"mystring.adb" 9 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 9 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Id:49] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:9:30:instantiated:main.adb:15:4] (Standard__integer.range_check_(( [#"mystring.ads" 9 0 0] begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(main__lines__to_string__result.Standard__string.string__content)) ))) )) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(main__lines__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(main__lines__to_string__result.Standard__string.string__content)) ) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m))))) in (
   ()))
   in () end ;
  main__lines__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at main.adb:15, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_518___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_518 as Temp_____aggregate_def_518
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___520   : int.
   (let temp___519 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_518.temp_____aggregate_def_518 temp___520) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___520 True True True True)) then (
     (forall temp___521   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___519 temp___521)) = temp___520))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:12 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__from_string__m as Main__lines__from_string__m
 use        Main__lines__from_string__j as Main__lines__from_string__j
 use        Main__lines__from_string__L_1__i as Main__lines__from_string__L_1__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__from_string__L_1 as Main__lines__from_string__L_1
 use        Main__lines__from_string__L_1__T55b as Main__lines__from_string__L_1__T55b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_518 as Temp_____aggregate_def_518
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__from_string__s___axiom as Main__lines__from_string__s___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__from_string__m___axiom as Main__lines__from_string__m___axiom
 use        Main__lines__from_string__j___axiom as Main__lines__from_string__j___axiom
 use        Main__lines__from_string__L_1___axiom as Main__lines__from_string__L_1___axiom
 use        Main__lines__from_string__L_1__i___axiom as Main__lines__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_518___axiom as Temp_____aggregate_def_518___axiom
 use        Main__lines__from_string__L_1__T55b___axiom as Main__lines__from_string__L_1__T55b___axiom

 val main__lines__from_string__result [@name:From_String] [@model_projected] [@model_trace:101810@result]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 12 0 0][@GP_Subp:mystring.ads:12] 
   (__void_param : unit)
  requires { [#"mystring.ads" 12 0 0] true }
  ensures { [#"mystring.ads" 12 0 0] ([#"mystring.ads" 14 0 0] ( [@GP_Sloc:mystring.ads:14:15:instantiated:main.adb:15:4] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Id:61] [@model_vc_post] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:14:15:instantiated:main.adb:15:4:VC_POSTCONDITION] ( [@GP_Sloc:mystring.ads:14:15:instantiated:main.adb:15:4] [@GP_Pretty_Ada:102255] ((epsilon temp___result_534 : int.
   ( (temp___result_534 = (Main__lines__length.length main__lines__from_string__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_534 main__lines__from_string__result.Main__lines__mystring.mystring__content) )) = (Standard__string.length Main__lines__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at main.adb:15 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Main__lines__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:12 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at main.adb:15 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 13 0 0] ( [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:60] [@GP_Sloc:mystring.ads:13:15:instantiated:main.adb:15:4] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:13:15:instantiated:main.adb:15:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 13 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) )) <= (2048 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:12 instantiated at main.adb:15 *)
  ;
   assume {  ( [@GP_Pretty_Ada:102241] ((Standard__string.length Main__lines__from_string__s.s) <= (2048 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 12 0 0] ());
   ([#"mystring.adb" 13 0 0] ( (let main__lines__from_string__m__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = ( 0 : Main__lines__mystring__T13b.t13b ); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_518.temp_____aggregate_def_518((32 : int))) } } in (
    [#"mystring.adb" 13 0 0] (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__from_string__m__assume.Main__lines__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 13 0 0] assume { [#"mystring.adb" 13 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 14 0 0] ());
   ([#"mystring.adb" 14 0 0] ( [#"mystring.adb" 14 0 0] (Main__lines__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 14 0 0] assume { [#"mystring.adb" 14 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:16:7:instantiated:main.adb:15:4] ([#"mystring.adb" 16 0 0] (if (( ([#"mystring.adb" 16 0 0] [#"mystring.adb" 16 0 0] (([@branch_id=130790] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 16 0 0] ( [@GP_Sloc:mystring.adb:16:11:instantiated:main.adb:15:4] [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Id:52] (Standard__integer.range_check_(( [#"mystring.adb" 16 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Main__lines__from_string__s.s)) ))) )) > (2048 : int)) )));
   ( [@branch_id=130790] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:15:4] ([#"mystring.adb" 17 0 0] ([#"mystring.adb" 17 0 0] ( [@GP_Reason:VC_RAISE] [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:main.adb:15:4:VC_RAISE] [@GP_Id:51] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:19:7:instantiated:main.adb:15:4] ([#"mystring.adb" 19 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:19:16:instantiated:main.adb:15:4] ([#"mystring.adb" 19 0 0] (let temp___523 [@mlw:proxy_symbol] [@introduced] = (let temp___522 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = temp___522.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
     ()))
     in () end ;
    { ( temp___522 ) with Main__lines__mystring.__split_fields = { ( temp___522.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 19 0 0] ( [@GP_Sloc:mystring.adb:19:20:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] [@comment:      M.Length := S'Length;                    ^ mystring.adb:19:20:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Id:53] (Main__lines__mystring__T13b.range_check_(( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Main__lines__from_string__s.s)) ))) )))) } } )))
    in (
     (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___523.Main__lines__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:20:24:instantiated:main.adb:15:4] ([#"mystring.adb" 20 0 0] (let temp___524 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Main__lines__from_string__s.s)) ) in (
   (let temp___525 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Main__lines__from_string__s.s)) ) in (
    ( [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( temp___524 ));
    () (* Translation of an Ada loop from mystring.adb:20 instantiated at main.adb:15 *)
    ;
    (if ((Boolean.andb((temp___524 <= Main__lines__from_string__L_1__i.i.int__content)) ((Main__lines__from_string__L_1__i.i.int__content <= temp___525)))) then (
     [#"mystring.adb" 20 0 0] try
      ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__j.j.int__content in (
       ()))
       in () end ;
      (let temp___532 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
      ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__j.j.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
        ()))
        in () end ;
       (let temp___530 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : Main__lines__mystring.mystring
       ensures {[#"mystring.adb" 20 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content })} 
       in _f) in (
        ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__L_1__i.i.int__content in (
         ()))
         in () end ;
        (let temp___529 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
        ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__L_1__i.i.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:15 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:20 instantiated at main.adb:15 *)
         ;
         (let temp___inv_533 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Id:57] [@GP_Shape:L_1_while__pragargs__cmp__add] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:15:4] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Id:56] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:15:4] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 21 0 0] ( [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:15:4] [@GP_Id:58] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:main.adb:15:4:VC_LOOP_INVARIANT] [@GP_Shape:L_1_while__pragargs__cmp] ( [@GP_Pretty_Ada:130818] [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:15:4] (Main__lines__from_string__j.j.int__content = ((Main__lines__from_string__L_1__i.i.int__content - (Standard__string.first Main__lines__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:20 instantiated at main.adb:15 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((Standard__string.first Main__lines__from_string__s.s) <= (Standard__string.last Main__lines__from_string__s.s)) )) then (
           (Main__lines__from_string__L_1__T55b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) Main__lines__from_string__L_1__i.i.int__content)) else true) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___530.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) ) /\ (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True True True True) )/\true )) (( ((Standard__string.first Main__lines__from_string__s.s) <= Main__lines__from_string__L_1__i.i.int__content) /\ (Main__lines__from_string__L_1__i.i.int__content <= (Standard__string.last Main__lines__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:20 instantiated at main.adb:15 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:20 instantiated at main.adb:15 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:22:10:instantiated:main.adb:15:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:15:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:19:instantiated:main.adb:15:4] ([#"mystring.adb" 22 0 0] (let temp___528 [@mlw:proxy_symbol] [@introduced] = (let temp___527 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___527.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___527 ) with Main__lines__mystring.__split_fields = { ( temp___527.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___526 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 22 0 0] assert { [#"mystring.adb" 22 0 0] ([#"mystring.adb" 22 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:15:4] [@GP_Reason:VC_INDEX_CHECK] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:22:16:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Id:54] ( (Main__lines__TmystringstrD1.first <= Main__lines__from_string__j.j.int__content) /\ (Main__lines__from_string__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__lines__from_string__s.s))) (Main__lines__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___528.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:23:10:instantiated:main.adb:15:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:15:instantiated:main.adb:15:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:12:instantiated:main.adb:15:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Main__lines__from_string__j.j.int__content <- ( ([#"mystring.adb" 23 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:23:17:instantiated:main.adb:15:4] [@GP_Id:55] (Standard__integer.range_check_((Main__lines__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:15 *)
          ;
          (if ((Main__lines__from_string__L_1__i.i.int__content = temp___525)) then (
            raise Main__lines__from_string__L_1.L_1));
          ([#"mystring.adb" 20 0 0] [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( (Main__lines__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_533 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Id:57] [@GP_Shape:L_1_while__pragargs__cmp__add] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:15:4] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Id:56] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:15:4] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:25:14:instantiated:main.adb:15:4] ([#"mystring.adb" 25 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:25:7:instantiated:main.adb:15:4] ([#"mystring.adb" 25 0 0] ( [#"mystring.adb" 25 0 0] (main__lines__from_string__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__from_string__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 14 0 0] ( [@GP_Id:59] [@GP_Sloc:mystring.ads:14:45:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:14:45:instantiated:main.adb:15:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 14 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  main__lines__from_string__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:16 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less__m1 as Main__lines__less__m1
 use        Main__lines__less__m2 as Main__lines__less__m2
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__less__i as Main__lines__less__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__less__L_2 as Main__lines__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__less__m1___axiom as Main__lines__less__m1___axiom
 use        Main__lines__less__m2___axiom as Main__lines__less__m2___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__less__i___axiom as Main__lines__less__i___axiom
 use        Main__lines__less__L_2___axiom as Main__lines__less__L_2___axiom

 val main__lines__less__result [@model_trace:101829@result] [@model_projected] [@name:Less]  : bool__ref 
 
 let def [#"mystring.ads" 16 0 0][@GP_Subp:mystring.ads:16] 
   (__void_param : unit)
  requires { [#"mystring.ads" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m1.m1 True False True True) };
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:16 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:16 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 16 0 0] try
   ( ();
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Main__lines__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 36 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:main.adb:15:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=130947] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) < (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=130947] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:main.adb:15:4] ([#"mystring.adb" 32 0 0] ( [#"mystring.adb" 32 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:33:7:instantiated:main.adb:15:4] (if (( ([#"mystring.adb" 33 0 0] [#"mystring.adb" 33 0 0] (([@branch_id=130957] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) > (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
    ( [@branch_id=130957] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:34:10:instantiated:main.adb:15:4] ([#"mystring.adb" 34 0 0] ( [#"mystring.adb" 34 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 34 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:36:35:instantiated:main.adb:15:4] ([#"mystring.adb" 36 0 0] ( () (* Translation of an Ada loop from mystring.adb:36 instantiated at main.adb:15 *)
     ;
     (if ((Main__lines__less__i.i.int__content <= (2048 : int))) then (
      [#"mystring.adb" 36 0 0] try
       ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Main__lines__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___539 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 36 0 0] (val _f : int
       ensures {[#"mystring.adb" 36 0 0] (result = Main__lines__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:15 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:36 instantiated at main.adb:15 *)
        ;
        (let temp___inv_540 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 36 0 0] while True do
         invariant { 
          ([#"mystring.adb" 37 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:main.adb:15:4:VC_LOOP_INVARIANT] [@GP_Id:67] [@GP_Shape:if__L_2_while__pragargs__cmp] [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:15:4] ( [@GP_Pretty_Ada:130978] [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:15:4] (Main__lines__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:36 instantiated at main.adb:15 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True True True True) )/\true )) ((Main__lines__less__i.i.int__content <= (2048 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:36 instantiated at main.adb:15 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:36 instantiated at main.adb:15 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:15:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:15:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:13:instantiated:main.adb:15:4] ([#"mystring.adb" 38 0 0] (if (( ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (([@branch_id=130985] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___537 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___537) (( [#"mystring.adb" 38 0 0] assert { [#"mystring.adb" 38 0 0] ([#"mystring.adb" 38 0 0] ( [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:15:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:65] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___538 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___538) ((  assert {  ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:15:4] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:66] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=130985] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:39:16:instantiated:main.adb:15:4] ([#"mystring.adb" 39 0 0] ( [#"mystring.adb" 39 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 39 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:40:13:instantiated:main.adb:15:4] (if (( ([#"mystring.adb" 40 0 0] [#"mystring.adb" 40 0 0] (([@branch_id=130999] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___535 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___535) (( [#"mystring.adb" 40 0 0] assert { [#"mystring.adb" 40 0 0] ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Id:63] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:40:26:instantiated:main.adb:15:4] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___536 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___536) ((  assert {  ([#"mystring.adb" 40 0 0] ( [@GP_Sloc:mystring.adb:40:38:instantiated:main.adb:15:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Id:64] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=130999] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:41:16:instantiated:main.adb:15:4] ([#"mystring.adb" 41 0 0] ( [#"mystring.adb" 41 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 41 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:43:16:instantiated:main.adb:15:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:21:instantiated:main.adb:15:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:18:instantiated:main.adb:15:4] ([#"mystring.adb" 43 0 0] [#"mystring.adb" 43 0 0] (Main__lines__less__i.i.int__content <- ( ([#"mystring.adb" 43 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] [@GP_Sloc:mystring.adb:43:23:instantiated:main.adb:15:4] [@GP_Id:62] (Standard__integer.range_check_((Main__lines__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:15 *)
         ;
         (if (not ( (Main__lines__less__i.i.int__content <= (2048 : int)) )) then (
           raise Main__lines__less__L_2.L_2));
         (let temp___inv_540 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Main__lines__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:47:10:instantiated:main.adb:15:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 47 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:30 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m as Main__lines__get__m
 use        Main__lines__get__index as Main__lines__get__index
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m___axiom as Main__lines__get__m___axiom
 use        Main__lines__get__index___axiom as Main__lines__get__index___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__get__result [@model_projected] [@name:Get] [@model_trace:102013@result]  : int__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__get__m.m True False True True) };
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Main__lines__get__index.index <= (Main__lines__length___axiom.length(Main__lines__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] ( [@GP_Pretty_Ada:102391] (Main__lines__get__index.index <= (epsilon temp___result_542 : int.
   ( (temp___result_542 = (Main__lines__length.length Main__lines__get__m.m)) /\ (Main__lines__length.length__function_guard temp___result_542 Main__lines__get__m.m) ))) ) };
  [#"mystring.ads" 30 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:46:8:instantiated:main.adb:15:4] ([#"mystring.ads" 46 0 0] ( [#"mystring.ads" 46 0 0] (main__lines__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___541 [@mlw:proxy_symbol] [@introduced] = Main__lines__get__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get(temp___541) (( [#"mystring.ads" 46 0 0] assert { [#"mystring.ads" 46 0 0] ([#"mystring.ads" 46 0 0] ( [@GP_Shape:return__ixdcomp] [@GP_Sloc:mystring.ads:46:13:instantiated:main.adb:15:4] [@vc:annotation] [@comment:     (M.Str(Index));             ^ mystring.ads:46:13:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:68] ( (Main__lines__TmystringstrD1.first <= Main__lines__get__index.index) /\ (Main__lines__get__index.index <= Main__lines__TmystringstrD1.last) ) )) };
    Main__lines__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:18 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__equal__m1 as Main__lines__equal__m1
 use        Main__lines__equal__m2 as Main__lines__equal__m2
 use        Main__lines__get as Main__lines__get
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__equal__i as Main__lines__equal__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__equal__L_3 as Main__lines__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__equal__m1___axiom as Main__lines__equal__m1___axiom
 use        Main__lines__equal__m2___axiom as Main__lines__equal__m2___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__equal__i___axiom as Main__lines__equal__i___axiom
 use        Main__lines__equal__L_3___axiom as Main__lines__equal__L_3___axiom

 val main__lines__equal__result [@name:Equal] [@model_projected] [@model_trace:101893@result]  : bool__ref 
 
 let def [#"mystring.ads" 18 0 0][@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires { [#"mystring.ads" 18 0 0] true }
  ensures { [#"mystring.ads" 18 0 0] ([#"mystring.ads" 19 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:78] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:19:15:instantiated:main.adb:15:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__if] [@GP_Sloc:mystring.ads:19:15:instantiated:main.adb:15:4] (if ((main__lines__equal__result.bool__content = True)) then (
   ( ( [@GP_Pretty_Ada:101862] [@GP_Sloc:mystring.ads:20:11:instantiated:main.adb:15:4] ((epsilon temp___result_556 : int.
    ( (temp___result_556 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_556 Main__lines__equal__m1.m1) )) = (epsilon temp___result_557 : int.
    ( (temp___result_557 = (Main__lines__length.length Main__lines__equal__m2.m2)) /\ (Main__lines__length.length__function_guard temp___result_557 Main__lines__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 19 0 0]  [@name:I] [@model_trace:101880]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_558 : int.
     ( (temp___result_558 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_558 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Sloc:mystring.ads:21:40:instantiated:main.adb:15:4] [@GP_Pretty_Ada:101870] ((epsilon temp___result_559 : int.
     ( (temp___result_559 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_559 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_560 : int.
     ( (temp___result_560 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_560 Main__lines__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:102469] [@GP_Sloc:mystring.ads:19:15:instantiated:main.adb:15:4] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:18 instantiated at main.adb:15 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m1.m1 True False True True) };
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:18 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:18 instantiated at main.adb:15 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:18 instantiated at main.adb:15 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 53 0 0] ( [#"mystring.adb" 53 0 0] (Main__lines__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 53 0 0] assume { [#"mystring.adb" 53 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 58 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:55:7:instantiated:main.adb:15:4] ([#"mystring.adb" 55 0 0] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=131136] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) <> (Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=131136] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:56:10:instantiated:main.adb:15:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:58:35:instantiated:main.adb:15:4] ([#"mystring.adb" 58 0 0] ( () (* Translation of an Ada loop from mystring.adb:58 instantiated at main.adb:15 *)
    ;
    (if ((Main__lines__equal__i.i.int__content <= (2048 : int))) then (
     [#"mystring.adb" 58 0 0] try
      ( [#"mystring.adb" 58 0 0] begin ensures {true} let _ = (let _ = Main__lines__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___545 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 58 0 0] (val _f : int
      ensures {[#"mystring.adb" 58 0 0] (result = Main__lines__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:15 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:58 instantiated at main.adb:15 *)
       ;
       (let temp___inv_546 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 58 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:15:4] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___547 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___547) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Id:73] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:15:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___548 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___548) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:15:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@model_trace:131177] [@name:J]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___549 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___549 j)))
        ) = (Standard__character__rep.to_rep (let temp___550 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___550 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 59 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Id:75] [@GP_Shape:if__L_3_while__pragargs__and] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:15:4] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:59:36:instantiated:main.adb:15:4:VC_LOOP_INVARIANT] ( ( [@GP_Pretty_Ada:131158] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:15:4] (Main__lines__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 59 0 0]  [@model_trace:131177] [@name:J]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Sloc:mystring.adb:60:60:instantiated:main.adb:15:4] [@GP_Pretty_Ada:131165] ((Standard__character__rep.to_rep (let temp___551 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___551 j)))
          ) = (Standard__character__rep.to_rep (let temp___552 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___552 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:58 instantiated at main.adb:15 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True True True True) )/\true )) ((Main__lines__equal__i.i.int__content <= (2048 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:58 instantiated at main.adb:15 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:58 instantiated at main.adb:15 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:15:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:15:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:13:instantiated:main.adb:15:4] ([#"mystring.adb" 61 0 0] (if (( ([#"mystring.adb" 61 0 0] [#"mystring.adb" 61 0 0] (([@branch_id=131190] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___543 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___543) (( [#"mystring.adb" 61 0 0] assert { [#"mystring.adb" 61 0 0] ([#"mystring.adb" 61 0 0] ( [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:15:4] [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:61:23:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Id:70] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___544 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___544) ((  assert {  ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Id:71] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:61:36:instantiated:main.adb:15:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=131190] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:62:16:instantiated:main.adb:15:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 62 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:64:16:instantiated:main.adb:15:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:21:instantiated:main.adb:15:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:18:instantiated:main.adb:15:4] ([#"mystring.adb" 64 0 0] [#"mystring.adb" 64 0 0] (Main__lines__equal__i.i.int__content <- ( ([#"mystring.adb" 64 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:64:23:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__if__i_assign__add] [@GP_Id:69] [@GP_Sloc:mystring.adb:64:23:instantiated:main.adb:15:4] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:15 *)
        ;
        (if (not ( (Main__lines__equal__i.i.int__content <= (2048 : int)) )) then (
          raise Main__lines__equal__L_3.L_3));
        (let temp___inv_546 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:15:4] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___547 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___547) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Id:73] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:15:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___548 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___548) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:15:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@model_trace:131177] [@name:J]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___549 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___549 j)))
         ) = (Standard__character__rep.to_rep (let temp___550 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___550 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Main__lines__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:67:10:instantiated:main.adb:15:4] ([#"mystring.adb" 67 0 0] ( [#"mystring.adb" 67 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 67 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (main__lines__equal__result.bool__content) then (
   (Boolean.andb(((Main__lines__length___axiom.length(Main__lines__equal__m1.m1)) = (Main__lines__length___axiom.length(Main__lines__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Main__lines__length___axiom.length(Main__lines__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 21 0 0] ( [@GP_Sloc:mystring.ads:21:40:instantiated:main.adb:15:4] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:21:40:instantiated:main.adb:15:4:VC_PRECONDITION] [@GP_Id:76] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] (Main__lines__get___axiom.get(Main__lines__equal__m1.m1) (i)) )) = ([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:mystring.ads:21:52:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Id:77] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:21:52:instantiated:main.adb:15:4:VC_PRECONDITION] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] (Main__lines__get___axiom.get(Main__lines__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:101880]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_553 : int.
     ( (temp___result_553 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_553 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:101870] ((epsilon temp___result_554 : int.
     ( (temp___result_554 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_554 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_555 : int.
     ( (temp___result_555 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_555 Main__lines__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  main__lines__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at main.adb:15, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_561___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_561 as Temp_____aggregate_def_561
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___563   : int.
   (let temp___562 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_561.temp_____aggregate_def_561 temp___563) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___563 True True True True)) then (
     (forall temp___564   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___562 temp___564)) = temp___563))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:26 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m as Main__lines__substring__m
 use        Main__lines__substring__from as Main__lines__substring__from
 use        Main__lines__substring__to as Main__lines__substring__to
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__substring__r as Main__lines__substring__r
 use        Main__lines__substring__j as Main__lines__substring__j
 use        Main__lines__substring__L_4__i as Main__lines__substring__L_4__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__substring__L_4 as Main__lines__substring__L_4
 use        Main__lines__substring__L_4__T71b as Main__lines__substring__L_4__T71b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_561 as Temp_____aggregate_def_561
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m___axiom as Main__lines__substring__m___axiom
 use        Main__lines__substring__from___axiom as Main__lines__substring__from___axiom
 use        Main__lines__substring__to___axiom as Main__lines__substring__to___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__substring__r___axiom as Main__lines__substring__r___axiom
 use        Main__lines__substring__j___axiom as Main__lines__substring__j___axiom
 use        Main__lines__substring__L_4___axiom as Main__lines__substring__L_4___axiom
 use        Main__lines__substring__L_4__i___axiom as Main__lines__substring__L_4__i___axiom
 use        Temp_____aggregate_def_561___axiom as Temp_____aggregate_def_561___axiom
 use        Main__lines__substring__L_4__T71b___axiom as Main__lines__substring__L_4__T71b___axiom

 val main__lines__substring__result [@model_trace:101969@result] [@model_projected] [@name:Substring]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 26 0 0][@GP_Subp:mystring.ads:26] 
   (__void_param : unit)
  requires { [#"mystring.ads" 26 0 0] true }
  ensures { [#"mystring.ads" 26 0 0] ([#"mystring.ads" 28 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:88] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Sloc:mystring.ads:28:14:instantiated:main.adb:15:4] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:28:14:instantiated:main.adb:15:4:VC_POSTCONDITION] ( [@GP_Pretty_Ada:102364] [@GP_Sloc:mystring.ads:28:14:instantiated:main.adb:15:4] ((epsilon temp___result_577 : int.
   ( (temp___result_577 = (Main__lines__length.length main__lines__substring__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_577 main__lines__substring__result.Main__lines__mystring.mystring__content) )) = ((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:26 instantiated at main.adb:15 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:26 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:26 instantiated at main.adb:15 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Main__lines__substring__from.from <= Main__lines__substring__to.to__)) ((Main__lines__substring__to.to__ <= (Main__lines__length___axiom.length(Main__lines__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:26 instantiated at main.adb:15 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:101948] (Main__lines__substring__from.from <= Main__lines__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:101951] (Main__lines__substring__to.to__ <= (epsilon temp___result_576 : int.
   ( (temp___result_576 = (Main__lines__length.length Main__lines__substring__m.m)) /\ (Main__lines__length.length__function_guard temp___result_576 Main__lines__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 72 0 0] ( (let main__lines__substring__r__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 72 0 0] ( [@GP_Id:80] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:15:4] (Main__lines__mystring__T13b.range_check_(([#"mystring.adb" 72 0 0] ( [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:79] [@GP_Shape:r_decl__aggr__typeconv__add] [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:15:4] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) )))) )))); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_561.temp_____aggregate_def_561((32 : int))) } } in (
     (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__substring__r__assume.Main__lines__mystring.__split_fields ))))
   ;
    assume {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ([#"mystring.adb" 73 0 0] ( [#"mystring.adb" 73 0 0] (Main__lines__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 73 0 0] assume { [#"mystring.adb" 73 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 75 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:75:25:instantiated:main.adb:15:4] ([#"mystring.adb" 75 0 0] (let temp___565 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__from.from in (
   (let temp___566 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__to.to__ in (
    ( [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( temp___565 ));
    () (* Translation of an Ada loop from mystring.adb:75 instantiated at main.adb:15 *)
    ;
    (if ((Boolean.andb((temp___565 <= Main__lines__substring__L_4__i.i.int__content)) ((Main__lines__substring__L_4__i.i.int__content <= temp___566)))) then (
     [#"mystring.adb" 75 0 0] try
      ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__j.j.int__content in (
       ()))
       in () end ;
      (let temp___574 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
      ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__j.j.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
        ()))
        in () end ;
       (let temp___572 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : Main__lines__mystring.mystring
       ensures {[#"mystring.adb" 75 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content })} 
       in _f) in (
        ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__L_4__i.i.int__content in (
         ()))
         in () end ;
        (let temp___571 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
        ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__L_4__i.i.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:15 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:75 instantiated at main.adb:15 *)
         ;
         (let temp___inv_575 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Id:85] [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:15:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Id:84] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:15:4] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 76 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Id:86] [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:15:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:main.adb:15:4:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] ( [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:15:4] [@GP_Pretty_Ada:131352] (Main__lines__substring__j.j.int__content = ((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:75 instantiated at main.adb:15 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ (Main__lines__substring__from.from <= Main__lines__substring__to.to__) )) then (
           (Main__lines__substring__L_4__T71b.dynamic_property Main__lines__substring__from.from Main__lines__substring__to.to__ Main__lines__substring__L_4__i.i.int__content)) else true) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___572.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) ) /\ (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True True True True) )/\true )) (( (Main__lines__substring__from.from <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:75 instantiated at main.adb:15 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:75 instantiated at main.adb:15 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:77:10:instantiated:main.adb:15:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:15:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:19:instantiated:main.adb:15:4] ([#"mystring.adb" 77 0 0] (let temp___570 [@mlw:proxy_symbol] [@introduced] = (let temp___569 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 77 0 0] begin ensures {true} let _ = (let _ = temp___569.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___569 ) with Main__lines__mystring.__split_fields = { ( temp___569.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___568 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 77 0 0] assert { [#"mystring.adb" 77 0 0] ([#"mystring.adb" 77 0 0] ( [@GP_Id:82] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:77:16:instantiated:main.adb:15:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:15:4] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__j.j.int__content) /\ (Main__lines__substring__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___567 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
             (Array__Int__Standard__character.get(temp___567) ((  assert {  ([#"mystring.adb" 77 0 0] ( [@GP_Sloc:mystring.adb:77:28:instantiated:main.adb:15:4] [@GP_Id:81] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:77:28:instantiated:main.adb:15:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
             Main__lines__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___570.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:78:10:instantiated:main.adb:15:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:15:instantiated:main.adb:15:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:12:instantiated:main.adb:15:4] ([#"mystring.adb" 78 0 0] [#"mystring.adb" 78 0 0] (Main__lines__substring__j.j.int__content <- ( ([#"mystring.adb" 78 0 0] ( [@GP_Id:83] [@GP_Sloc:mystring.adb:78:17:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__j_assign__add] [@comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:15 *)
          ;
          (if ((Main__lines__substring__L_4__i.i.int__content = temp___566)) then (
            raise Main__lines__substring__L_4.L_4));
          ([#"mystring.adb" 75 0 0] [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( (Main__lines__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_575 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Id:85] [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:15:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Id:84] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:15:4] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:80:14:instantiated:main.adb:15:4] ([#"mystring.adb" 80 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:80:7:instantiated:main.adb:15:4] ([#"mystring.adb" 80 0 0] ( [#"mystring.adb" 80 0 0] (main__lines__substring__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 80 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__substring__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 28 0 0] ( [@GP_Id:87] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__cmp__add] [@GP_Sloc:mystring.ads:28:51:instantiated:main.adb:15:4] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:28:51:instantiated:main.adb:15:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  main__lines__substring__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:33 instantiated at main.adb:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__get_line__m as Main__lines__get_line__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__get_line__m___axiom as Main__lines__get_line__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [#"mystring.ads" 33 0 0][@GP_Subp:mystring.ads:33] 
   (__void_param : unit)
  requires { [#"mystring.ads" 33 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:33 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 33 0 0] assume { [#"mystring.ads" 33 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:33 instantiated at main.adb:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:33 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 33 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:33 instantiated at main.adb:15 *)
  ;
  [#"mystring.ads" 33 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:15:4] ([#"mystring.adb" 85 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:15:4] ([#"mystring.adb" 85 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 85 0 0] assert { [#"mystring.adb" 85 0 0] ([#"mystring.adb" 85 0 0] ( [@GP_Id:89] [@vc:annotation] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:85:44:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:85:44:instantiated:main.adb:15:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Main__lines__mystring__T13b__rep.to_rep({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___580 [@mlw:proxy_symbol] [@introduced] = (let temp___579 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___579.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
       ()))
       in () end ;
      { ( temp___579 ) with Main__lines__mystring.__split_fields = { ( temp___579.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___578 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___578))) ((Standard__string.first(temp___578))) (Main__lines__TmystringstrD1.first))))
       } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___580.Main__lines__mystring.__split_fields ))))
     ;
     (let temp___582 [@mlw:proxy_symbol] [@introduced] = (let temp___581 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___581.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
       ()))
       in () end ;
      { ( temp___581 ) with Main__lines__mystring.__split_fields = { ( temp___581.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 85 0 0] ( [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:85:60:instantiated:main.adb:15:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:85:60:instantiated:main.adb:15:4] [@vc:annotation] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:90] (Main__lines__mystring__T13b.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___582.Main__lines__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

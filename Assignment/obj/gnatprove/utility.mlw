(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for possibly declaring a logic function for "check_pin_setup_validity" defined at utility.ads:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_pin_setup_validity
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function check_pin_setup_validity 
   (__void_param : unit) : bool
 
 val predicate check_pin_setup_validity__function_guard 
   (temp___result_154 : bool) (__void_param : unit)

end

(* Module for defining the constant "token_number" defined at utility.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_command_input_validity__token_number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant token_number [#"utility.ads" 13 0 0][@name:Token_Number] [@model_trace:2792] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token_number" defined at utility.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_command_input_validity__token_number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "string_input" defined at utility.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_command_input_validity__string_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant string_input [#"utility.ads" 13 0 0][@model_projected] [@name:String_Input] [@model_trace:2801] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "string_input" defined at utility.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_command_input_validity__string_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_command_input_validity" defined at utility.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_command_input_validity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function check_command_input_validity 
   (token_number : int) (string_input : Standard__string.string) : bool
 
 val predicate check_command_input_validity__function_guard 
   (temp___result_155 : bool) (token_number : int) (string_input : Standard__string.string)

end

(* Module for defining the constant "token_number" defined at utility.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_get_rem_pin_length__token_number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant token_number [#"utility.ads" 18 0 0][@model_trace:2820] [@name:Token_Number] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token_number" defined at utility.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_get_rem_pin_length__token_number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_get_rem_pin_length" defined at utility.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_get_rem_pin_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function check_get_rem_pin_length 
   (token_number : int) : bool
 
 val predicate check_get_rem_pin_length__function_guard 
   (temp___result_156 : bool) (token_number : int)

end

(* Module for defining the constant "token_number" defined at utility.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_put_length__token_number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant token_number [#"utility.ads" 22 0 0][@model_trace:2839] [@name:Token_Number] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token_number" defined at utility.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_put_length__token_number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_put_length" defined at utility.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_put_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function check_put_length 
   (token_number : int) : bool
 
 val predicate check_put_length__function_guard 
   (temp___result_157 : bool) (token_number : int)

end

(* Module for defining the constant "url_input" defined at utility.ads:26, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_get_rem_validity__url_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant url_input [#"utility.ads" 26 0 0][@name:Url_Input] [@model_projected] [@model_trace:2858] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "url_input" defined at utility.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_get_rem_validity__url_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_get_rem_validity" defined at utility.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_get_rem_validity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function check_get_rem_validity 
   (url_input : Standard__string.string) : bool
 
 val predicate check_get_rem_validity__function_guard 
   (temp___result_158 : bool) (url_input : Standard__string.string)

end

(* Module for defining the constant "url_input" defined at utility.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_put_validity__url_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant url_input [#"utility.ads" 30 0 0][@name:Url_Input] [@model_trace:2877] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "url_input" defined at utility.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_put_validity__url_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pwd_input" defined at utility.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_put_validity__pwd_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pwd_input [#"utility.ads" 30 0 0][@model_projected] [@model_trace:2886] [@name:Pwd_Input] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pwd_input" defined at utility.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_put_validity__pwd_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_put_validity" defined at utility.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_put_validity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function check_put_validity 
   (url_input : Standard__string.string) (pwd_input : Standard__string.string) : bool
 
 val predicate check_put_validity__function_guard 
   (temp___result_159 : bool) (url_input : Standard__string.string) (pwd_input : Standard__string.string)

end

(* Module for defining the constant "pin_input" defined at utility.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_pin_validity__pin_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pin_input [#"utility.ads" 35 0 0][@model_projected] [@model_trace:2905] [@name:Pin_Input] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pin_input" defined at utility.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_pin_validity__pin_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_pin_validity" defined at utility.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_pin_validity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function check_pin_validity 
   (pin_input : Standard__string.string) : bool
 
 val predicate check_pin_validity__function_guard 
   (temp___result_160 : bool) (pin_input : Standard__string.string)

end

(* Module for defining the constant "input_pin" defined at utility.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_input_validity__input_pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant input_pin [#"utility.ads" 38 0 0][@model_projected] [@model_trace:2924] [@name:Input_Pin] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input_pin" defined at utility.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_input_validity__input_pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_input_validity" defined at utility.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_input_validity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function check_input_validity 
   (input_pin : Standard__string.string) : bool
 
 val predicate check_input_validity__function_guard 
   (temp___result_161 : bool) (input_pin : Standard__string.string)

end

(* Module for defining the constant "max_line_length" defined at utility.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__max_line_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_line_length [#"utility.ads" 41 0 0][@model_trace:2936] [@name:Max_Line_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "max_command_length" defined at utility.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__max_command_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_command_length [#"utility.ads" 42 0 0][@model_trace:2946] [@name:Max_Command_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "get_rem_pin_length" defined at utility.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__get_rem_pin_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant get_rem_pin_length [#"utility.ads" 43 0 0][@model_trace:2956] [@name:Get_Rem_Pin_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "number" defined at utility.ads:46, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_input_number__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"utility.ads" 46 0 0][@name:Number] [@model_trace:2973] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at utility.ads:46, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_input_number__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "check_input_number" defined at utility.ads:46, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Utility__check_input_number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function check_input_number 
   (number : int) : bool
 
 val predicate check_input_number__function_guard 
   (temp___result_162 : bool) (number : int)

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for possibly declaring a logic function for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function argument_count 
   (__void_param : unit) : int
 
 val predicate argument_count__function_guard 
   (temp___result_165 : int) (__void_param : unit)

end

(* Module for defining the constant "R1b" defined at utility.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Utility__check_pin_setup_validity__L_1__R1b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r1b [#"utility.adb" 15 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T2b" defined at utility.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_pin_setup_validity__L_1__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content : t2b }
 
 function t2b__ref_t2b__content__projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref_t2b__content__projection
 
 meta "inline:no" function t2b__ref_t2b__content__projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for defining the constant "number" defined at mycommandline.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Mycommandline__argument__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"mycommandline.ads" 7 0 0][@name:Number] [@model_trace:3031] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at mycommandline.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mycommandline__argument__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function argument 
   (number : int) : Standard__string.string
 
 val predicate argument__function_guard 
   (temp___result_167 : Standard__string.string) (number : int)

end

(* Module for axiomatizing type "TS6bP1" defined at utility.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_command_input_validity__TS6bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS6bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS6bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS6bP1__ref =
  { mutable tS6bP1__content : tS6bP1 }
 
 function tS6bP1__ref_tS6bP1__content__projection 
   (a : tS6bP1__ref) : tS6bP1 =
  a.tS6bP1__content
 
 meta "model_projection" function tS6bP1__ref_tS6bP1__content__projection
 
 meta "inline:no" function tS6bP1__ref_tS6bP1__content__projection
 
 val tS6bP1__havoc 
   (x : tS6bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S6b" defined at utility.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_command_input_validity__S6b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s6b =
  string
 
 type s6b__ref =
  { mutable s6b__content : s6b }
 
 function s6b__ref_s6b__content__projection 
   (a : s6b__ref) : s6b =
  a.s6b__content
 
 meta "model_projection" function s6b__ref_s6b__content__projection
 
 meta "inline:no" function s6b__ref_s6b__content__projection
 
 val s6b__havoc 
   (x : s6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS14bP1" defined at utility.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_get_rem_validity__TS14bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS14bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS14bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS14bP1__ref =
  { mutable tS14bP1__content : tS14bP1 }
 
 function tS14bP1__ref_tS14bP1__content__projection 
   (a : tS14bP1__ref) : tS14bP1 =
  a.tS14bP1__content
 
 meta "model_projection" function tS14bP1__ref_tS14bP1__content__projection
 
 meta "inline:no" function tS14bP1__ref_tS14bP1__content__projection
 
 val tS14bP1__havoc 
   (x : tS14bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S14b" defined at utility.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_get_rem_validity__S14b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s14b =
  string
 
 type s14b__ref =
  { mutable s14b__content : s14b }
 
 function s14b__ref_s14b__content__projection 
   (a : s14b__ref) : s14b =
  a.s14b__content
 
 meta "model_projection" function s14b__ref_s14b__content__projection
 
 meta "inline:no" function s14b__ref_s14b__content__projection
 
 val s14b__havoc 
   (x : s14b__ref) : unit
  writes {x}

end

(* Module for defining the constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_url_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_url_length [#"passworddatabase.ads" 9 0 0][@model_trace:6640] [@name:Max_URL_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TS18bP1" defined at utility.adb:74, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_put_validity__TS18bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS18bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS18bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS18bP1__ref =
  { mutable tS18bP1__content : tS18bP1 }
 
 function tS18bP1__ref_tS18bP1__content__projection 
   (a : tS18bP1__ref) : tS18bP1 =
  a.tS18bP1__content
 
 meta "model_projection" function tS18bP1__ref_tS18bP1__content__projection
 
 meta "inline:no" function tS18bP1__ref_tS18bP1__content__projection
 
 val tS18bP1__havoc 
   (x : tS18bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S18b" defined at utility.adb:74, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_put_validity__S18b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s18b =
  string
 
 type s18b__ref =
  { mutable s18b__content : s18b }
 
 function s18b__ref_s18b__content__projection 
   (a : s18b__ref) : s18b =
  a.s18b__content
 
 meta "model_projection" function s18b__ref_s18b__content__projection
 
 meta "inline:no" function s18b__ref_s18b__content__projection
 
 val s18b__havoc 
   (x : s18b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS17bP1" defined at utility.adb:74, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_put_validity__TS17bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS17bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS17bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS17bP1__ref =
  { mutable tS17bP1__content : tS17bP1 }
 
 function tS17bP1__ref_tS17bP1__content__projection 
   (a : tS17bP1__ref) : tS17bP1 =
  a.tS17bP1__content
 
 meta "model_projection" function tS17bP1__ref_tS17bP1__content__projection
 
 meta "inline:no" function tS17bP1__ref_tS17bP1__content__projection
 
 val tS17bP1__havoc 
   (x : tS17bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S17b" defined at utility.adb:74, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_put_validity__S17b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s17b =
  string
 
 type s17b__ref =
  { mutable s17b__content : s17b }
 
 function s17b__ref_s17b__content__projection 
   (a : s17b__ref) : s17b =
  a.s17b__content
 
 meta "model_projection" function s17b__ref_s17b__content__projection
 
 meta "inline:no" function s17b__ref_s17b__content__projection
 
 val s17b__havoc 
   (x : s17b__ref) : unit
  writes {x}

end

(* Module for defining the constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_password_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_password_length [#"passworddatabase.ads" 8 0 0][@name:Max_Password_Length] [@model_trace:6630] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TS21bP1" defined at utility.adb:88, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_pin_validity__TS21bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS21bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS21bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS21bP1__ref =
  { mutable tS21bP1__content : tS21bP1 }
 
 function tS21bP1__ref_tS21bP1__content__projection 
   (a : tS21bP1__ref) : tS21bP1 =
  a.tS21bP1__content
 
 meta "model_projection" function tS21bP1__ref_tS21bP1__content__projection
 
 meta "inline:no" function tS21bP1__ref_tS21bP1__content__projection
 
 val tS21bP1__havoc 
   (x : tS21bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S21b" defined at utility.adb:88, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_pin_validity__S21b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s21b =
  string
 
 type s21b__ref =
  { mutable s21b__content : s21b }
 
 function s21b__ref_s21b__content__projection 
   (a : s21b__ref) : s21b =
  a.s21b__content
 
 meta "model_projection" function s21b__ref_s21b__content__projection
 
 meta "inline:no" function s21b__ref_s21b__content__projection
 
 val s21b__havoc 
   (x : s21b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS26bP1" defined at utility.adb:107, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_input_validity__TS26bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS26bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS26bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS26bP1__ref =
  { mutable tS26bP1__content : tS26bP1 }
 
 function tS26bP1__ref_tS26bP1__content__projection 
   (a : tS26bP1__ref) : tS26bP1 =
  a.tS26bP1__content
 
 meta "model_projection" function tS26bP1__ref_tS26bP1__content__projection
 
 meta "inline:no" function tS26bP1__ref_tS26bP1__content__projection
 
 val tS26bP1__havoc 
   (x : tS26bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S26b" defined at utility.adb:107, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_input_validity__S26b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s26b =
  string
 
 type s26b__ref =
  { mutable s26b__content : s26b }
 
 function s26b__ref_s26b__content__projection 
   (a : s26b__ref) : s26b =
  a.s26b__content
 
 meta "model_projection" function s26b__ref_s26b__content__projection
 
 meta "inline:no" function s26b__ref_s26b__content__projection
 
 val s26b__havoc 
   (x : s26b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T28b" defined at utility.adb:116, created in Gnat2Why.Types.Translate_Type *)
module Utility__check_input_validity__L_2__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t28b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t28b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t28b__ref =
  { mutable t28b__content : t28b }
 
 function t28b__ref_t28b__content__projection 
   (a : t28b__ref) : t28b =
  a.t28b__content
 
 meta "model_projection" function t28b__ref_t28b__content__projection
 
 meta "inline:no" function t28b__ref_t28b__content__projection
 
 val t28b__havoc 
   (x : t28b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "first_input" defined at utility.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Utility__check_pin_setup_validity__first_input
 use        "_gnatprove_standard".Main
 use        "int".Int

 val first_input [#"utility.adb" 10 0 0][@model_projected] [@name:First_Input] [@model_trace:2333]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "first_input" defined at utility.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_pin_setup_validity__first_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "arg" defined at utility.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Utility__check_pin_setup_validity__L_1__arg
 use        "_gnatprove_standard".Main
 use        "int".Int

 val arg [#"utility.adb" 15 0 0][@model_trace:2352] [@model_projected] [@name:Arg]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "arg" defined at utility.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_pin_setup_validity__L_1__arg___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pin_length" defined at utility.adb:108, created in Gnat2Why.Decls.Translate_Variable *)
module Utility__check_input_validity__pin_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val pin_length [#"utility.adb" 108 0 0][@name:Pin_Length] [@model_trace:2660] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pin_length" defined at utility.adb:108, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_input_validity__pin_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "index" defined at utility.adb:116, created in Gnat2Why.Decls.Translate_Variable *)
module Utility__check_input_validity__L_2__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val index [#"utility.adb" 116 0 0][@model_projected] [@name:index] [@model_trace:2681]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at utility.adb:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_input_validity__L_2__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "char" defined at utility.adb:118, created in Gnat2Why.Decls.Translate_Variable *)
module Utility__check_input_validity__B_3__char
 use        "_gnatprove_standard".Main
 use        "int".Int

 val char [#"utility.adb" 118 0 0][@name:char] [@model_projected] [@model_trace:2699]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "char" defined at utility.adb:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_input_validity__B_3__char___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_163 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_164 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for defining the loop exit exception for the loop "L_1" defined at utility.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Utility__check_pin_setup_validity__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at utility.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_pin_setup_validity__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at utility.adb:116, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Utility__check_input_validity__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at utility.adb:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Utility__check_input_validity__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_184 : int) (temp___is_init_180 : bool) (temp___skip_constant_181 : bool) (temp___do_toplevel_182 : bool) (temp___do_typ_inv_183 : bool) =
  (if (( temp___is_init_180 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_184)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_184 : int) (temp___is_init_180 : bool) (temp___skip_constant_181 : bool) (temp___do_toplevel_182 : bool) (temp___do_typ_inv_183 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_184 : int) (temp___is_init_180 : bool) (temp___skip_constant_181 : bool) (temp___do_toplevel_182 : bool) (temp___do_typ_inv_183 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_185 : int) (temp___skip_top_level_186 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_185 : int) (temp___skip_top_level_186 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_185 : int) (temp___skip_top_level_186 : bool) }

end

(* Module giving axioms for type "T2b" defined at utility.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_pin_setup_validity__L_1__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS6bP1" defined at utility.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_command_input_validity__TS6bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S6b" defined at utility.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_command_input_validity__S6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Utility__check_command_input_validity__string_input as Utility__check_command_input_validity__string_input
 use        Utility__check_command_input_validity__S6b as Utility__check_command_input_validity__S6b

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : Utility__check_command_input_validity__S6b.s6b) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  (if (temp___skip_constant_190) then (
   true) else (
   ( (Utility__check_command_input_validity__S6b.dynamic_property (Standard__string.first Utility__check_command_input_validity__string_input.string_input) (Standard__string.last Utility__check_command_input_validity__string_input.string_input) (Utility__check_command_input_validity__S6b.first temp___expr_193) (Utility__check_command_input_validity__S6b.last temp___expr_193)) /\ ( ((Utility__check_command_input_validity__S6b.first temp___expr_193) = (Standard__string.first Utility__check_command_input_validity__string_input.string_input)) /\ ((Utility__check_command_input_validity__S6b.last temp___expr_193) = (Standard__string.last Utility__check_command_input_validity__string_input.string_input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_193 : Utility__check_command_input_validity__S6b.s6b) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : Utility__check_command_input_validity__S6b.s6b) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_195 : Utility__check_command_input_validity__S6b.s6b) (temp___skip_top_level_196 : bool) =
  ( ( true /\ ((Utility__check_command_input_validity__S6b.first temp___expr_195) = (Standard__string.first Utility__check_command_input_validity__string_input.string_input)) )/\((Utility__check_command_input_validity__S6b.last temp___expr_195) = (Standard__string.last Utility__check_command_input_validity__string_input.string_input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_195 : Utility__check_command_input_validity__S6b.s6b) (temp___skip_top_level_196 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_195 : Utility__check_command_input_validity__S6b.s6b) (temp___skip_top_level_196 : bool) }

end

(* Module giving axioms for type "TS14bP1" defined at utility.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_get_rem_validity__TS14bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S14b" defined at utility.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_get_rem_validity__S14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Utility__check_get_rem_validity__url_input as Utility__check_get_rem_validity__url_input
 use        Utility__check_get_rem_validity__S14b as Utility__check_get_rem_validity__S14b

 predicate dynamic_invariant [@inline] 
   (temp___expr_203 : Utility__check_get_rem_validity__S14b.s14b) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) =
  (if (temp___skip_constant_200) then (
   true) else (
   ( (Utility__check_get_rem_validity__S14b.dynamic_property (Standard__string.first Utility__check_get_rem_validity__url_input.url_input) (Standard__string.last Utility__check_get_rem_validity__url_input.url_input) (Utility__check_get_rem_validity__S14b.first temp___expr_203) (Utility__check_get_rem_validity__S14b.last temp___expr_203)) /\ ( ((Utility__check_get_rem_validity__S14b.first temp___expr_203) = (Standard__string.first Utility__check_get_rem_validity__url_input.url_input)) /\ ((Utility__check_get_rem_validity__S14b.last temp___expr_203) = (Standard__string.last Utility__check_get_rem_validity__url_input.url_input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_203 : Utility__check_get_rem_validity__S14b.s14b) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_203 : Utility__check_get_rem_validity__S14b.s14b) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_205 : Utility__check_get_rem_validity__S14b.s14b) (temp___skip_top_level_206 : bool) =
  ( ( true /\ ((Utility__check_get_rem_validity__S14b.first temp___expr_205) = (Standard__string.first Utility__check_get_rem_validity__url_input.url_input)) )/\((Utility__check_get_rem_validity__S14b.last temp___expr_205) = (Standard__string.last Utility__check_get_rem_validity__url_input.url_input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_205 : Utility__check_get_rem_validity__S14b.s14b) (temp___skip_top_level_206 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_205 : Utility__check_get_rem_validity__S14b.s14b) (temp___skip_top_level_206 : bool) }

end

(* Module giving axioms for type "TS18bP1" defined at utility.adb:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_put_validity__TS18bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S18b" defined at utility.adb:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_put_validity__S18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Utility__check_put_validity__pwd_input as Utility__check_put_validity__pwd_input
 use        Utility__check_put_validity__S18b as Utility__check_put_validity__S18b

 predicate dynamic_invariant [@inline] 
   (temp___expr_213 : Utility__check_put_validity__S18b.s18b) (temp___is_init_209 : bool) (temp___skip_constant_210 : bool) (temp___do_toplevel_211 : bool) (temp___do_typ_inv_212 : bool) =
  (if (temp___skip_constant_210) then (
   true) else (
   ( (Utility__check_put_validity__S18b.dynamic_property (Standard__string.first Utility__check_put_validity__pwd_input.pwd_input) (Standard__string.last Utility__check_put_validity__pwd_input.pwd_input) (Utility__check_put_validity__S18b.first temp___expr_213) (Utility__check_put_validity__S18b.last temp___expr_213)) /\ ( ((Utility__check_put_validity__S18b.first temp___expr_213) = (Standard__string.first Utility__check_put_validity__pwd_input.pwd_input)) /\ ((Utility__check_put_validity__S18b.last temp___expr_213) = (Standard__string.last Utility__check_put_validity__pwd_input.pwd_input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_213 : Utility__check_put_validity__S18b.s18b) (temp___is_init_209 : bool) (temp___skip_constant_210 : bool) (temp___do_toplevel_211 : bool) (temp___do_typ_inv_212 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_213 : Utility__check_put_validity__S18b.s18b) (temp___is_init_209 : bool) (temp___skip_constant_210 : bool) (temp___do_toplevel_211 : bool) (temp___do_typ_inv_212 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_215 : Utility__check_put_validity__S18b.s18b) (temp___skip_top_level_216 : bool) =
  ( ( true /\ ((Utility__check_put_validity__S18b.first temp___expr_215) = (Standard__string.first Utility__check_put_validity__pwd_input.pwd_input)) )/\((Utility__check_put_validity__S18b.last temp___expr_215) = (Standard__string.last Utility__check_put_validity__pwd_input.pwd_input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_215 : Utility__check_put_validity__S18b.s18b) (temp___skip_top_level_216 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_215 : Utility__check_put_validity__S18b.s18b) (temp___skip_top_level_216 : bool) }

end

(* Module giving axioms for type "TS17bP1" defined at utility.adb:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_put_validity__TS17bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S17b" defined at utility.adb:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_put_validity__S17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Utility__check_put_validity__url_input as Utility__check_put_validity__url_input
 use        Utility__check_put_validity__S17b as Utility__check_put_validity__S17b

 predicate dynamic_invariant [@inline] 
   (temp___expr_223 : Utility__check_put_validity__S17b.s17b) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) =
  (if (temp___skip_constant_220) then (
   true) else (
   ( (Utility__check_put_validity__S17b.dynamic_property (Standard__string.first Utility__check_put_validity__url_input.url_input) (Standard__string.last Utility__check_put_validity__url_input.url_input) (Utility__check_put_validity__S17b.first temp___expr_223) (Utility__check_put_validity__S17b.last temp___expr_223)) /\ ( ((Utility__check_put_validity__S17b.first temp___expr_223) = (Standard__string.first Utility__check_put_validity__url_input.url_input)) /\ ((Utility__check_put_validity__S17b.last temp___expr_223) = (Standard__string.last Utility__check_put_validity__url_input.url_input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_223 : Utility__check_put_validity__S17b.s17b) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_223 : Utility__check_put_validity__S17b.s17b) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_225 : Utility__check_put_validity__S17b.s17b) (temp___skip_top_level_226 : bool) =
  ( ( true /\ ((Utility__check_put_validity__S17b.first temp___expr_225) = (Standard__string.first Utility__check_put_validity__url_input.url_input)) )/\((Utility__check_put_validity__S17b.last temp___expr_225) = (Standard__string.last Utility__check_put_validity__url_input.url_input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_225 : Utility__check_put_validity__S17b.s17b) (temp___skip_top_level_226 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_225 : Utility__check_put_validity__S17b.s17b) (temp___skip_top_level_226 : bool) }

end

(* Module giving axioms for type "TS21bP1" defined at utility.adb:88, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_pin_validity__TS21bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S21b" defined at utility.adb:88, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_pin_validity__S21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Utility__check_pin_validity__pin_input as Utility__check_pin_validity__pin_input
 use        Utility__check_pin_validity__S21b as Utility__check_pin_validity__S21b

 predicate dynamic_invariant [@inline] 
   (temp___expr_233 : Utility__check_pin_validity__S21b.s21b) (temp___is_init_229 : bool) (temp___skip_constant_230 : bool) (temp___do_toplevel_231 : bool) (temp___do_typ_inv_232 : bool) =
  (if (temp___skip_constant_230) then (
   true) else (
   ( (Utility__check_pin_validity__S21b.dynamic_property (Standard__string.first Utility__check_pin_validity__pin_input.pin_input) (Standard__string.last Utility__check_pin_validity__pin_input.pin_input) (Utility__check_pin_validity__S21b.first temp___expr_233) (Utility__check_pin_validity__S21b.last temp___expr_233)) /\ ( ((Utility__check_pin_validity__S21b.first temp___expr_233) = (Standard__string.first Utility__check_pin_validity__pin_input.pin_input)) /\ ((Utility__check_pin_validity__S21b.last temp___expr_233) = (Standard__string.last Utility__check_pin_validity__pin_input.pin_input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_233 : Utility__check_pin_validity__S21b.s21b) (temp___is_init_229 : bool) (temp___skip_constant_230 : bool) (temp___do_toplevel_231 : bool) (temp___do_typ_inv_232 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_233 : Utility__check_pin_validity__S21b.s21b) (temp___is_init_229 : bool) (temp___skip_constant_230 : bool) (temp___do_toplevel_231 : bool) (temp___do_typ_inv_232 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_235 : Utility__check_pin_validity__S21b.s21b) (temp___skip_top_level_236 : bool) =
  ( ( true /\ ((Utility__check_pin_validity__S21b.first temp___expr_235) = (Standard__string.first Utility__check_pin_validity__pin_input.pin_input)) )/\((Utility__check_pin_validity__S21b.last temp___expr_235) = (Standard__string.last Utility__check_pin_validity__pin_input.pin_input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_235 : Utility__check_pin_validity__S21b.s21b) (temp___skip_top_level_236 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_235 : Utility__check_pin_validity__S21b.s21b) (temp___skip_top_level_236 : bool) }

end

(* Module giving axioms for type "TS26bP1" defined at utility.adb:107, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_input_validity__TS26bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S26b" defined at utility.adb:107, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_input_validity__S26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Utility__check_input_validity__input_pin as Utility__check_input_validity__input_pin
 use        Utility__check_input_validity__S26b as Utility__check_input_validity__S26b

 predicate dynamic_invariant [@inline] 
   (temp___expr_243 : Utility__check_input_validity__S26b.s26b) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) =
  (if (temp___skip_constant_240) then (
   true) else (
   ( (Utility__check_input_validity__S26b.dynamic_property (Standard__string.first Utility__check_input_validity__input_pin.input_pin) (Standard__string.last Utility__check_input_validity__input_pin.input_pin) (Utility__check_input_validity__S26b.first temp___expr_243) (Utility__check_input_validity__S26b.last temp___expr_243)) /\ ( ((Utility__check_input_validity__S26b.first temp___expr_243) = (Standard__string.first Utility__check_input_validity__input_pin.input_pin)) /\ ((Utility__check_input_validity__S26b.last temp___expr_243) = (Standard__string.last Utility__check_input_validity__input_pin.input_pin)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_243 : Utility__check_input_validity__S26b.s26b) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_243 : Utility__check_input_validity__S26b.s26b) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_245 : Utility__check_input_validity__S26b.s26b) (temp___skip_top_level_246 : bool) =
  ( ( true /\ ((Utility__check_input_validity__S26b.first temp___expr_245) = (Standard__string.first Utility__check_input_validity__input_pin.input_pin)) )/\((Utility__check_input_validity__S26b.last temp___expr_245) = (Standard__string.last Utility__check_input_validity__input_pin.input_pin)) )
 val default_initial_assumption [@inline] 
   (temp___expr_245 : Utility__check_input_validity__S26b.s26b) (temp___skip_top_level_246 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_245 : Utility__check_input_validity__S26b.s26b) (temp___skip_top_level_246 : bool) }

end

(* Module giving axioms for type "T28b" defined at utility.adb:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module Utility__check_input_validity__L_2__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module for defining the value of constant "max_line_length" defined at utility.ads:41, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Utility__max_line_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Utility__max_line_length as Utility__max_line_length

 axiom max_line_length__def_axiom :
  ((Utility__max_line_length.max_line_length ) = (2048 : int))

end

(* Module for defining the value of constant "max_command_length" defined at utility.ads:42, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Utility__max_command_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Utility__max_command_length as Utility__max_command_length

 axiom max_command_length__def_axiom :
  ((Utility__max_command_length.max_command_length ) = (3 : int))

end

(* Module for defining the value of constant "get_rem_pin_length" defined at utility.ads:43, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Utility__get_rem_pin_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Utility__get_rem_pin_length as Utility__get_rem_pin_length

 axiom get_rem_pin_length__def_axiom :
  ((Utility__get_rem_pin_length.get_rem_pin_length ) = (2 : int))

end

(* Module for defining the value of constant "R1b" defined at utility.adb:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Utility__check_pin_setup_validity__L_1__R1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mycommandline__argument_count as Mycommandline__argument_count
 use        Utility__check_pin_setup_validity__L_1__R1b as Utility__check_pin_setup_validity__L_1__R1b

 axiom r1b__def_axiom :
  ((Utility__check_pin_setup_validity__L_1__R1b.r1b ) = (epsilon temp___result_166 : int.
   ( (temp___result_166 = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard temp___result_166 ()) )))

end

(* Module for defining the value of constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_url_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_url_length as Passworddatabase__max_url_length

 axiom max_url_length__def_axiom :
  ((Passworddatabase__max_url_length.max_url_length ) = (1024 : int))

end

(* Module for defining the value of constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_password_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_password_length as Passworddatabase__max_password_length

 axiom max_password_length__def_axiom :
  ((Passworddatabase__max_password_length.max_password_length ) = (100 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "check_pin_setup_validity" defined at utility.ads:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_pin_setup_validity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Utility__check_pin_setup_validity as Utility__check_pin_setup_validity

 val check_pin_setup_validity 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_pin_setup_validity.check_pin_setup_validity ())) /\ (Utility__check_pin_setup_validity.check_pin_setup_validity__function_guard result ()) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "check_command_input_validity" defined at utility.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_command_input_validity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_command_input_validity as Utility__check_command_input_validity

 val check_command_input_validity 
   (token_number : int) (string_input : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_command_input_validity.check_command_input_validity token_number string_input)) /\ (Utility__check_command_input_validity.check_command_input_validity__function_guard result token_number string_input) )/\true ) }
 
 axiom check_command_input_validity__post_axiom :
  (forall token_number   : int.
  (forall string_input   : Standard__string.string [(Utility__check_command_input_validity.check_command_input_validity token_number string_input)].
   ( ( (Standard__natural___axiom.dynamic_invariant token_number True True True True) /\ (Standard__string___axiom.dynamic_invariant string_input True True True True) ) -> (let result = (Utility__check_command_input_validity.check_command_input_validity token_number string_input) in (
    (if ((Utility__check_command_input_validity.check_command_input_validity__function_guard result token_number string_input)) then (
     ( ( true /\ true )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "check_get_rem_pin_length" defined at utility.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_get_rem_pin_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_get_rem_pin_length as Utility__check_get_rem_pin_length

 val check_get_rem_pin_length 
   (token_number : int) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_get_rem_pin_length.check_get_rem_pin_length token_number)) /\ (Utility__check_get_rem_pin_length.check_get_rem_pin_length__function_guard result token_number) )/\true ) }
 
 axiom check_get_rem_pin_length__post_axiom :
  (forall token_number   : int [(Utility__check_get_rem_pin_length.check_get_rem_pin_length token_number)].
   ( (Standard__natural___axiom.dynamic_invariant token_number True True True True) -> (let result = (Utility__check_get_rem_pin_length.check_get_rem_pin_length token_number) in (
    (if ((Utility__check_get_rem_pin_length.check_get_rem_pin_length__function_guard result token_number)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "check_put_length" defined at utility.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_put_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_put_length as Utility__check_put_length

 val check_put_length 
   (token_number : int) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_put_length.check_put_length token_number)) /\ (Utility__check_put_length.check_put_length__function_guard result token_number) )/\true ) }
 
 axiom check_put_length__post_axiom :
  (forall token_number   : int [(Utility__check_put_length.check_put_length token_number)].
   ( (Standard__natural___axiom.dynamic_invariant token_number True True True True) -> (let result = (Utility__check_put_length.check_put_length token_number) in (
    (if ((Utility__check_put_length.check_put_length__function_guard result token_number)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "check_get_rem_validity" defined at utility.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_get_rem_validity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_get_rem_validity as Utility__check_get_rem_validity

 val check_get_rem_validity 
   (url_input : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_get_rem_validity.check_get_rem_validity url_input)) /\ (Utility__check_get_rem_validity.check_get_rem_validity__function_guard result url_input) )/\true ) }
 
 axiom check_get_rem_validity__post_axiom :
  (forall url_input   : Standard__string.string [(Utility__check_get_rem_validity.check_get_rem_validity url_input)].
   ( (Standard__string___axiom.dynamic_invariant url_input True True True True) -> (let result = (Utility__check_get_rem_validity.check_get_rem_validity url_input) in (
    (if ((Utility__check_get_rem_validity.check_get_rem_validity__function_guard result url_input)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "check_put_validity" defined at utility.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_put_validity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_put_validity as Utility__check_put_validity

 val check_put_validity 
   (url_input : Standard__string.string) (pwd_input : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_put_validity.check_put_validity url_input pwd_input)) /\ (Utility__check_put_validity.check_put_validity__function_guard result url_input pwd_input) )/\true ) }
 
 axiom check_put_validity__post_axiom :
  (forall url_input   pwd_input   : Standard__string.string [(Utility__check_put_validity.check_put_validity url_input pwd_input)].
   ( ( (Standard__string___axiom.dynamic_invariant url_input True True True True) /\ (Standard__string___axiom.dynamic_invariant pwd_input True True True True) ) -> (let result = (Utility__check_put_validity.check_put_validity url_input pwd_input) in (
    (if ((Utility__check_put_validity.check_put_validity__function_guard result url_input pwd_input)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "check_pin_validity" defined at utility.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_pin_validity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_pin_validity as Utility__check_pin_validity

 val check_pin_validity 
   (pin_input : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_pin_validity.check_pin_validity pin_input)) /\ (Utility__check_pin_validity.check_pin_validity__function_guard result pin_input) )/\true ) }
 
 axiom check_pin_validity__post_axiom :
  (forall pin_input   : Standard__string.string [(Utility__check_pin_validity.check_pin_validity pin_input)].
   ( (Standard__string___axiom.dynamic_invariant pin_input True True True True) -> (let result = (Utility__check_pin_validity.check_pin_validity pin_input) in (
    (if ((Utility__check_pin_validity.check_pin_validity__function_guard result pin_input)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "check_input_validity" defined at utility.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_input_validity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_input_validity as Utility__check_input_validity

 val check_input_validity 
   (input_pin : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_input_validity.check_input_validity input_pin)) /\ (Utility__check_input_validity.check_input_validity__function_guard result input_pin) )/\true ) }
 
 axiom check_input_validity__post_axiom :
  (forall input_pin   : Standard__string.string [(Utility__check_input_validity.check_input_validity input_pin)].
   ( (Standard__string___axiom.dynamic_invariant input_pin True True True True) -> (let result = (Utility__check_input_validity.check_input_validity input_pin) in (
    (if ((Utility__check_input_validity.check_input_validity__function_guard result input_pin)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "check_input_number" defined at utility.ads:46, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Utility__check_input_number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_input_number as Utility__check_input_number

 val check_input_number 
   (number : int) : bool
  requires {  true }
  ensures {  ( ( (result = (Utility__check_input_number.check_input_number number)) /\ (Utility__check_input_number.check_input_number__function_guard result number) )/\true ) }
 
 axiom check_input_number__post_axiom :
  (forall number   : int [(Utility__check_input_number.check_input_number number)].
   ( (Standard__natural___axiom.dynamic_invariant number True True True True) -> (let result = (Utility__check_input_number.check_input_number number) in (
    (if ((Utility__check_input_number.check_input_number__function_guard result number)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count

 val argument_count 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard result ()) )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom argument_count__post_axiom :
  (forall __void_param   : unit [(Mycommandline__argument_count.argument_count __void_param)].
   (let result = (Mycommandline__argument_count.argument_count __void_param) in (
    (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count
 use        Mycommandline__argument as Mycommandline__argument

 val argument 
   (number : int) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:28535] (number <= (epsilon temp___result_187 : int.
   ( (temp___result_187 = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard temp___result_187 ()) ))) ) }
  ensures {  ( ( (result = (Mycommandline__argument.argument number)) /\ (Mycommandline__argument.argument__function_guard result number) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "utility" defined at utility.ads:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Utility__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__max_line_length as Utility__max_line_length
 use        Utility__max_command_length as Utility__max_command_length
 use        Utility__get_rem_pin_length as Utility__get_rem_pin_length
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__max_line_length___axiom as Utility__max_line_length___axiom
 use        Utility__max_command_length___axiom as Utility__max_command_length___axiom
 use        Utility__get_rem_pin_length___axiom as Utility__get_rem_pin_length___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"utility.ads" 6 0 0][@GP_Subp:utility.ads:6] 
   (__void_param : unit)
  requires { [#"utility.ads" 6 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"utility.ads" 6 0 0] ());
  ([#"utility.ads" 9 0 0] ());
  ([#"utility.ads" 12 0 0] ());
  ([#"utility.ads" 17 0 0] ());
  ([#"utility.ads" 21 0 0] ());
  ([#"utility.ads" 25 0 0] ());
  ([#"utility.ads" 29 0 0] ());
  ([#"utility.ads" 34 0 0] ());
  ([#"utility.ads" 38 0 0] ());
  ();
  ([#"utility.ads" 41 0 0] ( [#"utility.ads" 41 0 0] begin ensures {true} let _ = (let _ = (2048 : int) in (
   ()))
   in () end ;
  [#"utility.ads" 41 0 0] assume { [#"utility.ads" 41 0 0] (Standard__natural___axiom.dynamic_invariant Utility__max_line_length.max_line_length True False True True) } ));
  ([#"utility.ads" 42 0 0] ( [#"utility.ads" 42 0 0] begin ensures {true} let _ = (let _ = (3 : int) in (
   ()))
   in () end ;
  [#"utility.ads" 42 0 0] assume { [#"utility.ads" 42 0 0] (Standard__natural___axiom.dynamic_invariant Utility__max_command_length.max_command_length True False True True) } ));
  ([#"utility.ads" 43 0 0] ( [#"utility.ads" 43 0 0] begin ensures {true} let _ = (let _ = (2 : int) in (
   ()))
   in () end ;
  [#"utility.ads" 43 0 0] assume { [#"utility.ads" 43 0 0] (Standard__natural___axiom.dynamic_invariant Utility__get_rem_pin_length.get_rem_pin_length True False True True) } ));
  ([#"utility.ads" 46 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"utility.adb" 7 0 0] ());
  ([#"utility.adb" 9 0 0] ());
  ([#"utility.adb" 27 0 0] ());
  ([#"utility.adb" 42 0 0] ());
  ([#"utility.adb" 52 0 0] ());
  ([#"utility.adb" 62 0 0] ());
  ([#"utility.adb" 74 0 0] ());
  ([#"utility.adb" 88 0 0] ());
  ([#"utility.adb" 98 0 0] ());
  ([#"utility.adb" 107 0 0] ());
  ();
  ( [@GP_Sloc:utility.adb:128:1] ([#"utility.adb" 128 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_pin_setup_validity" defined at utility.ads:9, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_pin_setup_validity__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__string as Standard__string
 use        Utility__check_input_validity___axiom as Utility__check_input_validity___axiom
 use        Utility__check_input_number___axiom as Utility__check_input_number___axiom
 use        Utility__check_pin_setup_validity__first_input as Utility__check_pin_setup_validity__first_input
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Utility__check_pin_setup_validity__L_1__R1b as Utility__check_pin_setup_validity__L_1__R1b
 use        Utility__check_pin_setup_validity__L_1__arg as Utility__check_pin_setup_validity__L_1__arg
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Utility__check_pin_setup_validity__L_1 as Utility__check_pin_setup_validity__L_1
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Utility__check_pin_setup_validity__first_input___axiom as Utility__check_pin_setup_validity__first_input___axiom
 use        Utility__check_pin_setup_validity__L_1__arg___axiom as Utility__check_pin_setup_validity__L_1__arg___axiom
 use        Utility__check_pin_setup_validity__L_1___axiom as Utility__check_pin_setup_validity__L_1___axiom
 use        Utility__check_input_validity___axiom as Utility__check_input_validity___axiom
 use        Utility__check_input_number___axiom as Utility__check_input_number___axiom
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Utility__check_pin_setup_validity__L_1__R1b___axiom as Utility__check_pin_setup_validity__L_1__R1b___axiom

 val utility__check_pin_setup_validity__result [@name:Check_Pin_Setup_Validity] [@model_projected] [@model_trace:2775@result]  : bool__ref 
 
 let def [#"utility.ads" 9 0 0][@GP_Subp:utility.ads:9] 
   (__void_param : unit)
  requires { [#"utility.ads" 9 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:9 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:9 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:9 *)
  ;
  [#"utility.ads" 9 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:9 *)
  ;
  [#"utility.ads" 9 0 0] try
   ( ();
   ([#"utility.adb" 10 0 0] ( [#"utility.adb" 10 0 0] (Utility__check_pin_setup_validity__first_input.first_input.int__content <- ( (1 : int) ));
   [#"utility.adb" 10 0 0] assume { [#"utility.adb" 10 0 0] (Standard__positive___axiom.dynamic_invariant Utility__check_pin_setup_validity__first_input.first_input.int__content True False True True) } ));
   ([#"utility.adb" 15 0 0] ());
   ();
   ( [@GP_Sloc:utility.adb:13:43] ([#"utility.adb" 13 0 0] ()) );
   ( [@GP_Sloc:utility.adb:13:11] ([#"utility.adb" 13 0 0] ()) );
   ( [@GP_Sloc:utility.adb:13:7] ([#"utility.adb" 13 0 0] (if (( ([#"utility.adb" 13 0 0] [#"utility.adb" 13 0 0] (([@branch_id=2344] Main.spark__branch).bool__content <- ( (Utility__check_input_number___axiom.check_input_number((Mycommandline__argument_count___axiom.argument_count(())))) )));
   ( [@branch_id=2344] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:15:37] ([#"utility.adb" 15 0 0] ()) );
    ( [@GP_Sloc:utility.adb:15:37] ([#"utility.adb" 15 0 0] ([#"utility.adb" 15 0 0] ( (let utility__check_pin_setup_validity__L_1__R1b__assume = (Mycommandline__argument_count___axiom.argument_count(())) in (
     [#"utility.adb" 15 0 0] assume { [#"utility.adb" 15 0 0] (utility__check_pin_setup_validity__L_1__R1b__assume = Utility__check_pin_setup_validity__L_1__R1b.r1b) }))
    ;
    [#"utility.adb" 15 0 0] assume { [#"utility.adb" 15 0 0] (Standard__natural___axiom.dynamic_invariant Utility__check_pin_setup_validity__L_1__R1b.r1b True False True True) } ))) );
    ( [@GP_Sloc:utility.adb:15:53] ([#"utility.adb" 15 0 0] (let temp___249 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
    (let temp___250 [@mlw:proxy_symbol] [@introduced] = Utility__check_pin_setup_validity__L_1__R1b.r1b in (
     ( [#"utility.adb" 15 0 0] (Utility__check_pin_setup_validity__L_1__arg.arg.int__content <- ( temp___249 ));
     () (* Translation of an Ada loop from utility.adb:15 *)
     ;
     (if ((Boolean.andb((temp___249 <= Utility__check_pin_setup_validity__L_1__arg.arg.int__content)) ((Utility__check_pin_setup_validity__L_1__arg.arg.int__content <= temp___250)))) then (
      [#"utility.adb" 15 0 0] try
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop utility.adb:15 *)
       ;
       () (* While loop translating the Ada loop from utility.adb:15 *)
       ;
       [#"utility.adb" 15 0 0] while True do
        ( () (* Assume implicit invariants from the loop utility.adb:15 *)
        ;
        [#"utility.adb" 15 0 0] assume { [#"utility.adb" 15 0 0] ( ((1 : int) <= Utility__check_pin_setup_validity__L_1__arg.arg.int__content) /\ (Utility__check_pin_setup_validity__L_1__arg.arg.int__content <= Utility__check_pin_setup_validity__L_1__R1b.r1b) ) };
        () (* Check for absence of RTE in the invariant of loop utility.adb:15 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop utility.adb:15 *)
        ;
        ();
        ( [@GP_Sloc:utility.adb:16:51] ([#"utility.adb" 16 0 0] ()) );
        ( [@GP_Sloc:utility.adb:16:17] ([#"utility.adb" 16 0 0] ()) );
        ( [@GP_Sloc:utility.adb:16:13] ([#"utility.adb" 16 0 0] (if (( ([#"utility.adb" 16 0 0] [#"utility.adb" 16 0 0] (([@branch_id=2367] Main.spark__branch).bool__content <- ( (Utility__check_input_validity___axiom.check_input_validity(([#"utility.adb" 16 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:utility.adb:16:51] [@vc:annotation] [@GP_Shape:if__L_1_while__if__call_check_input_validity__call_argument] [@GP_Id:0] [@comment:            if (check_input_validity(MyCommandLine.Argument(Arg))) then                                                   ^ utility.adb:16:51:VC_PRECONDITION] (Mycommandline__argument___axiom.argument(Utility__check_pin_setup_validity__L_1__arg.arg.int__content)) )))) )));
        ( [@branch_id=2367] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:utility.adb:17:16] ([#"utility.adb" 17 0 0] ( [#"utility.adb" 17 0 0] (utility__check_pin_setup_validity__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
         [#"utility.adb" 17 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:utility.adb:19:16] ([#"utility.adb" 19 0 0] ( [#"utility.adb" 19 0 0] (utility__check_pin_setup_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"utility.adb" 19 0 0] raise Return__exc )) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop utility.adb:15 *)
        ;
        (if ((Utility__check_pin_setup_validity__L_1__arg.arg.int__content = temp___250)) then (
          raise Utility__check_pin_setup_validity__L_1.L_1));
        ([#"utility.adb" 15 0 0] [#"utility.adb" 15 0 0] (Utility__check_pin_setup_validity__L_1__arg.arg.int__content <- ( (Utility__check_pin_setup_validity__L_1__arg.arg.int__content + (1 : int)) ))) )
       done )
      with
       Utility__check_pin_setup_validity__L_1.L_1 -> ()
      end)) )))
    ))
    ) ) )) else (
    ()))) );
   ( [@GP_Sloc:utility.adb:23:7] ([#"utility.adb" 23 0 0] ( [#"utility.adb" 23 0 0] (utility__check_pin_setup_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
   [#"utility.adb" 23 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_pin_setup_validity__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_command_input_validity" defined at utility.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_command_input_validity__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_command_input_validity__token_number as Utility__check_command_input_validity__token_number
 use        Utility__check_command_input_validity__string_input as Utility__check_command_input_validity__string_input
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Utility__check_command_input_validity__token_number___axiom as Utility__check_command_input_validity__token_number___axiom
 use        Utility__check_command_input_validity__string_input___axiom as Utility__check_command_input_validity__string_input___axiom

 val utility__check_command_input_validity__result [@model_projected] [@model_trace:2785@result] [@name:Check_Command_Input_Validity]  : bool__ref 
 
 let def [#"utility.ads" 12 0 0][@GP_Subp:utility.ads:12] 
   (__void_param : unit)
  requires { [#"utility.ads" 12 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:12 *)
  ;
  [#"utility.ads" 12 0 0] assume { [#"utility.ads" 12 0 0] (Standard__natural___axiom.dynamic_invariant Utility__check_command_input_validity__token_number.token_number True False True True) };
  [#"utility.ads" 12 0 0] assume { [#"utility.ads" 12 0 0] (Standard__string___axiom.dynamic_invariant Utility__check_command_input_validity__string_input.string_input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:12 *)
  ;
  [#"utility.ads" 12 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:12 *)
  ;
  [#"utility.ads" 12 0 0] try
   ( ();
   ([#"utility.adb" 27 0 0] ());
   ();
   ( [@GP_Sloc:utility.adb:31:7] ([#"utility.adb" 31 0 0] (if (( ([#"utility.adb" 31 0 0] [#"utility.adb" 31 0 0] (([@branch_id=2412] Main.spark__branch).bool__content <- ( (Boolean.orb((Utility__check_command_input_validity__token_number.token_number > (3 : int))) ((Utility__check_command_input_validity__token_number.token_number = (0 : int)))) )));
   ( [@branch_id=2412] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:32:10] ([#"utility.adb" 32 0 0] ( [#"utility.adb" 32 0 0] (utility__check_command_input_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"utility.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:utility.adb:34:7] (if (( ([#"utility.adb" 34 0 0] [#"utility.adb" 34 0 0] (([@branch_id=2424] Main.spark__branch).bool__content <- ( (([#"utility.adb" 34 0 0] ( [@vc:annotation] [@GP_Sloc:utility.adb:34:26] [@GP_Reason:VC_RANGE_CHECK] [@comment:      elsif (String_Input'Length > Utility.Max_Line_Length) then                          ^ utility.adb:34:26:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Id:1] (Standard__integer.range_check_(( [#"utility.adb" 34 0 0] begin ensures {true} let _ = (let _ = Utility__check_command_input_validity__string_input.string_input in (
     ()))
     in () end ;
    (Standard__string.length(Utility__check_command_input_validity__string_input.string_input)) ))) )) > (2048 : int)) )));
    ( [@branch_id=2424] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:utility.adb:35:10] ([#"utility.adb" 35 0 0] ( [#"utility.adb" 35 0 0] (utility__check_command_input_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"utility.adb" 35 0 0] raise Return__exc )) ) )) else (
     ())) )))) );
   ( [@GP_Sloc:utility.adb:38:7] ([#"utility.adb" 38 0 0] ( [#"utility.adb" 38 0 0] (utility__check_command_input_validity__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
   [#"utility.adb" 38 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_command_input_validity__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_get_rem_pin_length" defined at utility.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_get_rem_pin_length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_get_rem_pin_length__token_number as Utility__check_get_rem_pin_length__token_number
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_get_rem_pin_length__token_number___axiom as Utility__check_get_rem_pin_length__token_number___axiom

 val utility__check_get_rem_pin_length__result [@model_trace:2813@result] [@name:Check_Get_Rem_Pin_Length] [@model_projected]  : bool__ref 
 
 let def [#"utility.ads" 17 0 0][@GP_Subp:utility.ads:17] 
   (__void_param : unit)
  requires { [#"utility.ads" 17 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:17 *)
  ;
  [#"utility.ads" 17 0 0] assume { [#"utility.ads" 17 0 0] (Standard__natural___axiom.dynamic_invariant Utility__check_get_rem_pin_length__token_number.token_number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:17 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:17 *)
  ;
  [#"utility.ads" 17 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:17 *)
  ;
  [#"utility.ads" 17 0 0] try
   ( ();
   ( [@GP_Sloc:utility.adb:45:7] ([#"utility.adb" 45 0 0] (if (( ([#"utility.adb" 45 0 0] [#"utility.adb" 45 0 0] (([@branch_id=2457] Main.spark__branch).bool__content <- ( (Utility__check_get_rem_pin_length__token_number.token_number = (2 : int)) )));
   ( [@branch_id=2457] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:46:10] ([#"utility.adb" 46 0 0] ( [#"utility.adb" 46 0 0] (utility__check_get_rem_pin_length__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"utility.adb" 46 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:utility.adb:48:7] ([#"utility.adb" 48 0 0] ( [#"utility.adb" 48 0 0] (utility__check_get_rem_pin_length__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
   [#"utility.adb" 48 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_get_rem_pin_length__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_put_length" defined at utility.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_put_length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_put_length__token_number as Utility__check_put_length__token_number
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_put_length__token_number___axiom as Utility__check_put_length__token_number___axiom

 val utility__check_put_length__result [@model_trace:2832@result] [@model_projected] [@name:Check_Put_Length]  : bool__ref 
 
 let def [#"utility.ads" 21 0 0][@GP_Subp:utility.ads:21] 
   (__void_param : unit)
  requires { [#"utility.ads" 21 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:21 *)
  ;
  [#"utility.ads" 21 0 0] assume { [#"utility.ads" 21 0 0] (Standard__natural___axiom.dynamic_invariant Utility__check_put_length__token_number.token_number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:21 *)
  ;
  [#"utility.ads" 21 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:21 *)
  ;
  [#"utility.ads" 21 0 0] try
   ( ();
   ( [@GP_Sloc:utility.adb:55:7] ([#"utility.adb" 55 0 0] (if (( ([#"utility.adb" 55 0 0] [#"utility.adb" 55 0 0] (([@branch_id=2488] Main.spark__branch).bool__content <- ( (Utility__check_put_length__token_number.token_number = (3 : int)) )));
   ( [@branch_id=2488] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:56:10] ([#"utility.adb" 56 0 0] ( [#"utility.adb" 56 0 0] (utility__check_put_length__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"utility.adb" 56 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:utility.adb:58:7] ([#"utility.adb" 58 0 0] ( [#"utility.adb" 58 0 0] (utility__check_put_length__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
   [#"utility.adb" 58 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_put_length__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_get_rem_validity" defined at utility.ads:25, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_get_rem_validity__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_get_rem_validity__url_input as Utility__check_get_rem_validity__url_input
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Utility__check_get_rem_validity__url_input___axiom as Utility__check_get_rem_validity__url_input___axiom

 val utility__check_get_rem_validity__result [@name:Check_Get_Rem_Validity] [@model_projected] [@model_trace:2851@result]  : bool__ref 
 
 let def [#"utility.ads" 25 0 0][@GP_Subp:utility.ads:25] 
   (__void_param : unit)
  requires { [#"utility.ads" 25 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:25 *)
  ;
  [#"utility.ads" 25 0 0] assume { [#"utility.ads" 25 0 0] (Standard__string___axiom.dynamic_invariant Utility__check_get_rem_validity__url_input.url_input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:25 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:25 *)
  ;
  [#"utility.ads" 25 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:25 *)
  ;
  [#"utility.ads" 25 0 0] try
   ( ();
   ([#"utility.adb" 62 0 0] ());
   ();
   ( [@GP_Sloc:utility.adb:67:7] ([#"utility.adb" 67 0 0] (if (( ([#"utility.adb" 67 0 0] [#"utility.adb" 67 0 0] (([@branch_id=2519] Main.spark__branch).bool__content <- ( (([#"utility.adb" 67 0 0] ( [@vc:annotation] [@comment:      if (Url_Input'Length < PasswordDatabase.Max_URL_Length) then                    ^ utility.adb:67:20:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:utility.adb:67:20] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Id:2] (Standard__integer.range_check_(( [#"utility.adb" 67 0 0] begin ensures {true} let _ = (let _ = Utility__check_get_rem_validity__url_input.url_input in (
    ()))
    in () end ;
   (Standard__string.length(Utility__check_get_rem_validity__url_input.url_input)) ))) )) < (1024 : int)) )));
   ( [@branch_id=2519] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:68:10] ([#"utility.adb" 68 0 0] ( [#"utility.adb" 68 0 0] (utility__check_get_rem_validity__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"utility.adb" 68 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:utility.adb:70:7] ([#"utility.adb" 70 0 0] ( [#"utility.adb" 70 0 0] (utility__check_get_rem_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
   [#"utility.adb" 70 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_get_rem_validity__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_put_validity" defined at utility.ads:29, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_put_validity__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_put_validity__url_input as Utility__check_put_validity__url_input
 use        Utility__check_put_validity__pwd_input as Utility__check_put_validity__pwd_input
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Utility__check_put_validity__url_input___axiom as Utility__check_put_validity__url_input___axiom
 use        Utility__check_put_validity__pwd_input___axiom as Utility__check_put_validity__pwd_input___axiom

 val utility__check_put_validity__result [@model_projected] [@model_trace:2870@result] [@name:Check_Put_Validity]  : bool__ref 
 
 let def [#"utility.ads" 29 0 0][@GP_Subp:utility.ads:29] 
   (__void_param : unit)
  requires { [#"utility.ads" 29 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:29 *)
  ;
  [#"utility.ads" 29 0 0] assume { [#"utility.ads" 29 0 0] (Standard__string___axiom.dynamic_invariant Utility__check_put_validity__url_input.url_input True False True True) };
  [#"utility.ads" 29 0 0] assume { [#"utility.ads" 29 0 0] (Standard__string___axiom.dynamic_invariant Utility__check_put_validity__pwd_input.pwd_input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:29 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:29 *)
  ;
  [#"utility.ads" 29 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:29 *)
  ;
  [#"utility.ads" 29 0 0] try
   ( ();
   ([#"utility.adb" 74 0 0] ());
   ([#"utility.adb" 74 0 0] ());
   ();
   ( [@GP_Sloc:utility.adb:80:7] ([#"utility.adb" 80 0 0] (if (( ([#"utility.adb" 80 0 0] [#"utility.adb" 80 0 0] (([@branch_id=2561] Main.spark__branch).bool__content <- ( (Boolean.andb((([#"utility.adb" 80 0 0] ( [@vc:annotation] [@GP_Shape:if__and__cmp__typeconv__length_ref] [@comment:      if (Url_Input'Length < PasswordDatabase.Max_URL_Length and                    ^ utility.adb:80:20:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:3] [@GP_Sloc:utility.adb:80:20] (Standard__integer.range_check_(( [#"utility.adb" 80 0 0] begin ensures {true} let _ = (let _ = Utility__check_put_validity__url_input.url_input in (
    ()))
    in () end ;
   (Standard__string.length(Utility__check_put_validity__url_input.url_input)) ))) )) < (1024 : int))) ((([#"utility.adb" 81 0 0] ( [@comment:              Pwd_Input'Length < PasswordDatabase.Max_Password_Length) then                        ^ utility.adb:81:24:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:utility.adb:81:24] [@GP_Shape:if__and__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:4] (Standard__integer.range_check_(( [#"utility.adb" 81 0 0] begin ensures {true} let _ = (let _ = Utility__check_put_validity__pwd_input.pwd_input in (
    ()))
    in () end ;
   (Standard__string.length(Utility__check_put_validity__pwd_input.pwd_input)) ))) )) < (100 : int)))) )));
   ( [@branch_id=2561] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:82:10] ([#"utility.adb" 82 0 0] ( [#"utility.adb" 82 0 0] (utility__check_put_validity__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"utility.adb" 82 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:utility.adb:84:7] ([#"utility.adb" 84 0 0] ( [#"utility.adb" 84 0 0] (utility__check_put_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
   [#"utility.adb" 84 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_put_validity__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_pin_validity" defined at utility.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_pin_validity__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_pin_validity__pin_input as Utility__check_pin_validity__pin_input
 use        Utility__check_input_validity___axiom as Utility__check_input_validity___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Utility__check_pin_validity__pin_input___axiom as Utility__check_pin_validity__pin_input___axiom
 use        Utility__check_input_validity___axiom as Utility__check_input_validity___axiom

 val utility__check_pin_validity__result [@name:Check_Pin_Validity] [@model_projected] [@model_trace:2898@result]  : bool__ref 
 
 let def [#"utility.ads" 34 0 0][@GP_Subp:utility.ads:34] 
   (__void_param : unit)
  requires { [#"utility.ads" 34 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:34 *)
  ;
  [#"utility.ads" 34 0 0] assume { [#"utility.ads" 34 0 0] (Standard__string___axiom.dynamic_invariant Utility__check_pin_validity__pin_input.pin_input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:34 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:34 *)
  ;
  [#"utility.ads" 34 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:34 *)
  ;
  [#"utility.ads" 34 0 0] try
   ( ();
   ([#"utility.adb" 88 0 0] ());
   ();
   ( [@GP_Sloc:utility.adb:92:11] ([#"utility.adb" 92 0 0] ()) );
   ( [@GP_Sloc:utility.adb:92:7] ([#"utility.adb" 92 0 0] (if (( ([#"utility.adb" 92 0 0] [#"utility.adb" 92 0 0] (([@branch_id=2602] Main.spark__branch).bool__content <- ( (Utility__check_input_validity___axiom.check_input_validity(Utility__check_pin_validity__pin_input.pin_input)) )));
   ( [@branch_id=2602] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:93:10] ([#"utility.adb" 93 0 0] ( [#"utility.adb" 93 0 0] (utility__check_pin_validity__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"utility.adb" 93 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:utility.adb:95:7] ([#"utility.adb" 95 0 0] ( [#"utility.adb" 95 0 0] (utility__check_pin_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
   [#"utility.adb" 95 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_pin_validity__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_input_validity" defined at utility.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_input_validity__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Utility__check_input_validity__input_pin as Utility__check_input_validity__input_pin
 use        Utility__check_input_validity__pin_length as Utility__check_input_validity__pin_length
 use        Utility__check_input_validity__L_2__index as Utility__check_input_validity__L_2__index
 use        Utility__check_input_validity__B_3__char as Utility__check_input_validity__B_3__char
 use        Utility__check_input_validity__L_2 as Utility__check_input_validity__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Utility__check_input_validity__pin_length___axiom as Utility__check_input_validity__pin_length___axiom
 use        Utility__check_input_validity__L_2__index___axiom as Utility__check_input_validity__L_2__index___axiom
 use        Utility__check_input_validity__B_3__char___axiom as Utility__check_input_validity__B_3__char___axiom
 use        Utility__check_input_validity__L_2___axiom as Utility__check_input_validity__L_2___axiom
 use        Utility__check_input_validity__input_pin___axiom as Utility__check_input_validity__input_pin___axiom

 val utility__check_input_validity__result [@model_projected] [@name:check_input_validity] [@model_trace:2917@result]  : bool__ref 
 
 let def [#"utility.ads" 38 0 0][@GP_Subp:utility.ads:38] 
   (__void_param : unit)
  requires { [#"utility.ads" 38 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:38 *)
  ;
  [#"utility.ads" 38 0 0] assume { [#"utility.ads" 38 0 0] (Standard__string___axiom.dynamic_invariant Utility__check_input_validity__input_pin.input_pin True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:38 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:38 *)
  ;
  [#"utility.ads" 38 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:38 *)
  ;
  [#"utility.ads" 38 0 0] try
   ( ();
   ([#"utility.adb" 107 0 0] ());
   ([#"utility.adb" 108 0 0] ( [#"utility.adb" 108 0 0] (Utility__check_input_validity__pin_length.pin_length.int__content <- ( (4 : int) ));
   [#"utility.adb" 108 0 0] assume { [#"utility.adb" 108 0 0] (Standard__positive___axiom.dynamic_invariant Utility__check_input_validity__pin_length.pin_length.int__content True False True True) } ));
   ([#"utility.adb" 117 0 0] ());
   ([#"utility.adb" 116 0 0] ());
   ();
   ( [@GP_Sloc:utility.adb:111:31] ([#"utility.adb" 111 0 0] ()) );
   ( [@GP_Sloc:utility.adb:111:7] ([#"utility.adb" 111 0 0] (if (( ([#"utility.adb" 111 0 0] [#"utility.adb" 111 0 0] (([@branch_id=2671] Main.spark__branch).bool__content <- ( (([#"utility.adb" 111 0 0] ( [@vc:annotation] [@comment:      if (Input_Pin'Length /= Pin_Length) then                    ^ utility.adb:111:20:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Sloc:utility.adb:111:20] [@GP_Id:7] (Standard__integer.range_check_(( [#"utility.adb" 111 0 0] begin ensures {true} let _ = (let _ = Utility__check_input_validity__input_pin.input_pin in (
    ()))
    in () end ;
   (Standard__string.length(Utility__check_input_validity__input_pin.input_pin)) ))) )) <> Utility__check_input_validity__pin_length.pin_length.int__content) )));
   ( [@branch_id=2671] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:112:10] ([#"utility.adb" 112 0 0] ( [#"utility.adb" 112 0 0] (utility__check_input_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"utility.adb" 112 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:utility.adb:116:43] ([#"utility.adb" 116 0 0] (let temp___256 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
    (let temp___257 [@mlw:proxy_symbol] [@introduced] = ([#"utility.adb" 116 0 0] ( [@vc:annotation] [@GP_Sloc:utility.adb:116:35] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__L_2_while__range__typeconv__length_ref] [@comment:         for index in 1..Input_Pin'Length loop                                   ^ utility.adb:116:35:VC_RANGE_CHECK] [@GP_Id:6] (Standard__integer.range_check_(( [#"utility.adb" 116 0 0] begin ensures {true} let _ = (let _ = Utility__check_input_validity__input_pin.input_pin in (
     ()))
     in () end ;
    (Standard__string.length(Utility__check_input_validity__input_pin.input_pin)) ))) )) in (
     (  (Utility__check_input_validity__L_2__index.index.int__content <- ( temp___256 ));
     () (* Translation of an Ada loop from utility.adb:116 *)
     ;
     (if ((Boolean.andb((temp___256 <= Utility__check_input_validity__L_2__index.index.int__content)) ((Utility__check_input_validity__L_2__index.index.int__content <= temp___257)))) then (
       try
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop utility.adb:116 *)
       ;
       () (* While loop translating the Ada loop from utility.adb:116 *)
       ;
        while True do
        ( () (* Assume implicit invariants from the loop utility.adb:116 *)
        ;
         assume {  ( ((1 : int) <= Utility__check_input_validity__L_2__index.index.int__content) /\ (Utility__check_input_validity__L_2__index.index.int__content <= (Standard__string.length Utility__check_input_validity__input_pin.input_pin)) ) };
        () (* Check for absence of RTE in the invariant of loop utility.adb:116 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop utility.adb:116 *)
        ;
        ();
        ( [@GP_Sloc:utility.adb:118:16] ([#"utility.adb" 118 0 0] ([#"utility.adb" 118 0 0] ( [#"utility.adb" 118 0 0] (Utility__check_input_validity__B_3__char.char.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Utility__check_input_validity__input_pin.input_pin))) (( [#"utility.adb" 118 0 0] assert { [#"utility.adb" 118 0 0] ([#"utility.adb" 118 0 0] ( [@GP_Sloc:utility.adb:118:46] [@comment:               char : Character := Input_Pin(index);                                              ^ utility.adb:118:46:VC_INDEX_CHECK] [@GP_Shape:if__L_2_while__B_3_declblk__char_decl__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:5] ( ((Standard__string.first Utility__check_input_validity__input_pin.input_pin) <= Utility__check_input_validity__L_2__index.index.int__content) /\ (Utility__check_input_validity__L_2__index.index.int__content <= (Standard__string.last Utility__check_input_validity__input_pin.input_pin)) ) )) };
        Utility__check_input_validity__L_2__index.index.int__content ))))) ));
         assume {  (Standard__character___axiom.dynamic_invariant Utility__check_input_validity__B_3__char.char.int__content True False True True) } ))) );
        ( [@GP_Sloc:utility.adb:120:20] ([#"utility.adb" 120 0 0] ()) );
        ( [@GP_Sloc:utility.adb:120:34] ([#"utility.adb" 120 0 0] ()) );
        ( [@GP_Sloc:utility.adb:120:16] ([#"utility.adb" 120 0 0] (if (( ([#"utility.adb" 120 0 0] [#"utility.adb" 120 0 0] (([@branch_id=2712] Main.spark__branch).bool__content <- ( (Boolean.orb((Utility__check_input_validity__B_3__char.char.int__content < (48 : int))) ((Utility__check_input_validity__B_3__char.char.int__content > (57 : int)))) )));
        ( [@branch_id=2712] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:utility.adb:121:16] ([#"utility.adb" 121 0 0] ( [#"utility.adb" 121 0 0] (utility__check_input_validity__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"utility.adb" 121 0 0] raise Return__exc )) ) )) else (
         ()))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop utility.adb:116 *)
        ;
        (if ((Utility__check_input_validity__L_2__index.index.int__content = temp___257)) then (
          raise Utility__check_input_validity__L_2.L_2));
        ([#"utility.adb" 116 0 0] [#"utility.adb" 116 0 0] (Utility__check_input_validity__L_2__index.index.int__content <- ( (Utility__check_input_validity__L_2__index.index.int__content + (1 : int)) ))) )
       done )
      with
       Utility__check_input_validity__L_2.L_2 -> ()
      end)) )))
    ))
    ) ) )))) );
   ( [@GP_Sloc:utility.adb:126:7] ([#"utility.adb" 126 0 0] ( [#"utility.adb" 126 0 0] (utility__check_input_validity__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
   [#"utility.adb" 126 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_input_validity__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "check_input_number" defined at utility.ads:46, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Utility__check_input_number__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_input_number__number as Utility__check_input_number__number
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Utility__check_input_number__number___axiom as Utility__check_input_number__number___axiom

 val utility__check_input_number__result [@name:check_input_number] [@model_projected] [@model_trace:2966@result]  : bool__ref 
 
 let def [#"utility.ads" 46 0 0][@GP_Subp:utility.ads:46] 
   (__void_param : unit)
  requires { [#"utility.ads" 46 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram utility.ads:46 *)
  ;
  [#"utility.ads" 46 0 0] assume { [#"utility.ads" 46 0 0] (Standard__natural___axiom.dynamic_invariant Utility__check_input_number__number.number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram utility.ads:46 *)
  ;
  () (* Check for RTE in the Pre of the subprogram utility.ads:46 *)
  ;
  [#"utility.ads" 46 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram utility.ads:46 *)
  ;
  [#"utility.ads" 46 0 0] try
   ( ();
   ( [@GP_Sloc:utility.adb:100:7] ([#"utility.adb" 100 0 0] (if (( ([#"utility.adb" 100 0 0] [#"utility.adb" 100 0 0] (([@branch_id=2631] Main.spark__branch).bool__content <- ( (Utility__check_input_number__number.number <> (1 : int)) )));
   ( [@branch_id=2631] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:utility.adb:101:10] ([#"utility.adb" 101 0 0] ( [#"utility.adb" 101 0 0] (utility__check_input_number__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"utility.adb" 101 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:utility.adb:103:7] ([#"utility.adb" 103 0 0] ( [#"utility.adb" 103 0 0] (utility__check_input_number__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
   [#"utility.adb" 103 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  utility__check_input_number__result.bool__content )
end
